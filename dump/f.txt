/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include "main.h"
#include "Timer/Timer.h"

static volatile uint8_t digits[2] = {0,0};   /* current value */
static volatile uint8_t mux_idx  = 0;


Timer_Config Seg7_Timer;
GPIO_TypeDef *DIG_Port = GPIOC;
GPIO_TypeDef *SEG_PORT = GPIOA;

/*
 *        10     9     8     7     6
 *    _____|_____|_____|_____|_____|_____
 *   |                                   |
 *   |                                   |
 *   |       T                 U         |
 *   |                                   |
 *   |_____ _____ _____ _____ _____ _____|
 *         |     |     |     |     |
 *         1     2     3     4     5
 */

/*
 *  1 -> G
 *  2 -> DP
 *  3 -> A
 *  4 -> F
 *  5 -> DIG1
 *  6 -> D
 *  7 -> E
 *  8 -> C
 *  9 -> B
 *  10 -> DIG2
 */


uint8_t A = 0;
uint8_t B = 1;
uint8_t C = 2;
uint8_t D = 3;
uint8_t E = 4;
uint8_t F = 5;
uint8_t G = 6;
uint8_t DIG1 = 4;
uint8_t DIG2 = 5;

static const uint8_t seg_lut[10] = {
		/*0*/ 0b00111111,
		/*1*/ 0b00000110,
		/*2*/ 0b01011011,
		/*3*/ 0b01001111,
		/*4*/ 0b01100110,
		/*5*/ 0b01101101,
		/*6*/ 0b01111101,
		/*7*/ 0b00000111,
		/*8*/ 0b01111111,
		/*9*/ 0b01101111
};


void Select_DIG1(void)
{
	GPIO_Pin_Low(DIG_Port, DIG1);
}

void Select_DIG2(void)
{
	GPIO_Pin_Low(DIG_Port, DIG2);
}

void Diselect_DIG1(void)
{
	GPIO_Pin_High(DIG_Port, DIG1);
}

void Diselect_DIG2(void)
{
	GPIO_Pin_High(DIG_Port, DIG2);
}

void Seven_Segment_Display(void)
{

}



void Seg7_Update()
{

	uint8_t pattern = seg_lut[ digits[mux_idx] ];
	SEG_PORT->BSRR = (0x00FFU << 16);         /* clear old */
	SEG_PORT->ODR = pattern;                  /* set new */

	if(mux_idx == 0)
	{
		Select_DIG1();

	}
	else
	{
		Select_DIG2();
	}

	mux_idx ^= 1U;
}


void Seg7_Init(TIM_TypeDef *update_Timer, GPIO_TypeDef *segIOPort, GPIO_TypeDef *digPort)
{
	GPIO_Pin_Init(segIOPort, A, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.Pull_Up, GPIO_Configuration.Alternate_Functions.None);
	GPIO_Pin_Init(segIOPort, B, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.Pull_Up, GPIO_Configuration.Alternate_Functions.None);
	GPIO_Pin_Init(segIOPort, C, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.Pull_Up, GPIO_Configuration.Alternate_Functions.None);
	GPIO_Pin_Init(segIOPort, D, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.Pull_Up, GPIO_Configuration.Alternate_Functions.None);
	GPIO_Pin_Init(segIOPort, E, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.Pull_Up, GPIO_Configuration.Alternate_Functions.None);
	GPIO_Pin_Init(segIOPort, F, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.Pull_Up, GPIO_Configuration.Alternate_Functions.None);
	GPIO_Pin_Init(segIOPort, G, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.Pull_Up, GPIO_Configuration.Alternate_Functions.None);
	GPIO_Pin_Init(digPort, DIG1, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Open_Drain, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.None);
	GPIO_Pin_Init(digPort, DIG2, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Open_Drain, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.None);


	Seg7_Timer.Port = update_Timer;
	Seg7_Timer.Mode = Timer_Configurations.Mode.Update;
	Seg7_Timer.Clock_Source = Timer_Configurations.Clock_Source.Internal;
	Seg7_Timer.DMA_Enable = false;
	Seg7_Timer.Direction = Timer_Configurations.Direction.Upcounting;
	Seg7_Timer.Interrupt_Request = Timer_Configurations.Interrupt_Request.Update_Interrupt;
	Seg7_Timer.ISR_Routines.Update_ISR = Seg7_Update;
	Seg7_Timer.Prescaler = (uint16_t)(SystemCoreClock/1000000UL)-1;
	Seg7_Timer.Autoreload_Value = 60000-1;
	Timer_Init(&Seg7_Timer);
	Timer_Trigger(&Seg7_Timer);
}

void display_number(uint8_t value)
{

}

int main(void)
{
	MCU_Clock_Setup();
	Delay_Config();
	Seg7_Init(TIM6, SEG_PORT, DIG_Port);

//	SEG_PORT->BSRR |= (1 << 16);

//	SEG_PORT->BSRR = (1 << 17)| 0b11111111;



	for(;;)
	{

		for (uint8_t n = 0; n < 100; ++n)
		{
			digits[0] = n / 10;       /* tens  */
			digits[1] = n % 10;       /* ones  */


			Delay_milli(50);








		}
	}
}

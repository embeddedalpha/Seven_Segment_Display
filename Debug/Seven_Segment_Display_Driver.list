
Seven_Segment_Display_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048c4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08004a4c  08004a4c  00005a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a68  08004a68  00006014  2**0
                  CONTENTS
  4 .ARM          00000000  08004a68  08004a68  00006014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a68  08004a68  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a68  08004a68  00005a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a6c  08004a6c  00005a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08004a70  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006014  2**0
                  CONTENTS
 10 .bss          00000190  20000014  20000014  00006014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001a4  200001a4  00006014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007530  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000cc8  00000000  00000000  0000d574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003c0  00000000  00000000  0000e240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002e9  00000000  00000000  0000e600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019e4f  00000000  00000000  0000e8e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005eb9  00000000  00000000  00028738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008fcd0  00000000  00000000  0002e5f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000be2c1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000df8  00000000  00000000  000be304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  000bf0fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004a34 	.word	0x08004a34

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08004a34 	.word	0x08004a34

080001c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db0b      	blt.n	80001f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 021f 	and.w	r2, r3, #31
 80001e0:	4907      	ldr	r1, [pc, #28]	@ (8000200 <__NVIC_EnableIRQ+0x38>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	2001      	movs	r0, #1
 80001ea:	fa00 f202 	lsl.w	r2, r0, r2
 80001ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	e000e100 	.word	0xe000e100

08000204 <DMA1_Stream0_IRQHandler>:
volatile uint32_t DMA_LISR = 0;
volatile uint32_t DMA_HISR = 0;


void DMA1_Stream0_IRQHandler(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 8000208:	4b60      	ldr	r3, [pc, #384]	@ (800038c <DMA1_Stream0_IRQHandler+0x188>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a60      	ldr	r2, [pc, #384]	@ (8000390 <DMA1_Stream0_IRQHandler+0x18c>)
 800020e:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF0)
 8000210:	4b5f      	ldr	r3, [pc, #380]	@ (8000390 <DMA1_Stream0_IRQHandler+0x18c>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	f003 0301 	and.w	r3, r3, #1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d015      	beq.n	8000248 <DMA1_Stream0_IRQHandler+0x44>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 800021c:	4b5d      	ldr	r3, [pc, #372]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	69db      	ldr	r3, [r3, #28]
 8000222:	2280      	movs	r2, #128	@ 0x80
 8000224:	4013      	ands	r3, r2
 8000226:	2b00      	cmp	r3, #0
 8000228:	d00e      	beq.n	8000248 <DMA1_Stream0_IRQHandler+0x44>
		{
		    if (__DMA1_Stream0_Config__ -> ISR_Routines.FIFO_Error_ISR)
 800022a:	4b5a      	ldr	r3, [pc, #360]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000230:	2b00      	cmp	r3, #0
 8000232:	d009      	beq.n	8000248 <DMA1_Stream0_IRQHandler+0x44>
		    {
		    	__DMA1_Stream0_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000234:	4b57      	ldr	r3, [pc, #348]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800023a:	4798      	blx	r3
		    	DMA1 -> LIFCR |= DMA_LIFCR_CFEIF0;
 800023c:	4b53      	ldr	r3, [pc, #332]	@ (800038c <DMA1_Stream0_IRQHandler+0x188>)
 800023e:	689b      	ldr	r3, [r3, #8]
 8000240:	4a52      	ldr	r2, [pc, #328]	@ (800038c <DMA1_Stream0_IRQHandler+0x188>)
 8000242:	f043 0301 	orr.w	r3, r3, #1
 8000246:	6093      	str	r3, [r2, #8]
		    }
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF0)
 8000248:	4b51      	ldr	r3, [pc, #324]	@ (8000390 <DMA1_Stream0_IRQHandler+0x18c>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	f003 0304 	and.w	r3, r3, #4
 8000250:	2b00      	cmp	r3, #0
 8000252:	d015      	beq.n	8000280 <DMA1_Stream0_IRQHandler+0x7c>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8000254:	4b4f      	ldr	r3, [pc, #316]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	69db      	ldr	r3, [r3, #28]
 800025a:	2202      	movs	r2, #2
 800025c:	4013      	ands	r3, r2
 800025e:	2b00      	cmp	r3, #0
 8000260:	d00e      	beq.n	8000280 <DMA1_Stream0_IRQHandler+0x7c>
		{
		    if (__DMA1_Stream0_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000262:	4b4c      	ldr	r3, [pc, #304]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000268:	2b00      	cmp	r3, #0
 800026a:	d009      	beq.n	8000280 <DMA1_Stream0_IRQHandler+0x7c>
		    {
		    	__DMA1_Stream0_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 800026c:	4b49      	ldr	r3, [pc, #292]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000272:	4798      	blx	r3
		    	DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8000274:	4b45      	ldr	r3, [pc, #276]	@ (800038c <DMA1_Stream0_IRQHandler+0x188>)
 8000276:	689b      	ldr	r3, [r3, #8]
 8000278:	4a44      	ldr	r2, [pc, #272]	@ (800038c <DMA1_Stream0_IRQHandler+0x188>)
 800027a:	f043 0304 	orr.w	r3, r3, #4
 800027e:	6093      	str	r3, [r2, #8]
		    }
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF0)
 8000280:	4b43      	ldr	r3, [pc, #268]	@ (8000390 <DMA1_Stream0_IRQHandler+0x18c>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	f003 0308 	and.w	r3, r3, #8
 8000288:	2b00      	cmp	r3, #0
 800028a:	d015      	beq.n	80002b8 <DMA1_Stream0_IRQHandler+0xb4>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 800028c:	4b41      	ldr	r3, [pc, #260]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	69db      	ldr	r3, [r3, #28]
 8000292:	2204      	movs	r2, #4
 8000294:	4013      	ands	r3, r2
 8000296:	2b00      	cmp	r3, #0
 8000298:	d00e      	beq.n	80002b8 <DMA1_Stream0_IRQHandler+0xb4>
		{
		    if (__DMA1_Stream0_Config__ -> ISR_Routines.Transfer_Error_ISR)
 800029a:	4b3e      	ldr	r3, [pc, #248]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d009      	beq.n	80002b8 <DMA1_Stream0_IRQHandler+0xb4>
		    {
		    	__DMA1_Stream0_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80002a4:	4b3b      	ldr	r3, [pc, #236]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002aa:	4798      	blx	r3
		    	DMA1 -> LIFCR |= DMA_LIFCR_CTEIF0;
 80002ac:	4b37      	ldr	r3, [pc, #220]	@ (800038c <DMA1_Stream0_IRQHandler+0x188>)
 80002ae:	689b      	ldr	r3, [r3, #8]
 80002b0:	4a36      	ldr	r2, [pc, #216]	@ (800038c <DMA1_Stream0_IRQHandler+0x188>)
 80002b2:	f043 0308 	orr.w	r3, r3, #8
 80002b6:	6093      	str	r3, [r2, #8]
		    }
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF0)
 80002b8:	4b35      	ldr	r3, [pc, #212]	@ (8000390 <DMA1_Stream0_IRQHandler+0x18c>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	f003 0310 	and.w	r3, r3, #16
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d02d      	beq.n	8000320 <DMA1_Stream0_IRQHandler+0x11c>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 80002c4:	4b33      	ldr	r3, [pc, #204]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	69db      	ldr	r3, [r3, #28]
 80002ca:	2208      	movs	r2, #8
 80002cc:	4013      	ands	r3, r2
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d026      	beq.n	8000320 <DMA1_Stream0_IRQHandler+0x11c>
		{
		    if (__DMA1_Stream0_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80002d2:	4b30      	ldr	r3, [pc, #192]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d021      	beq.n	8000320 <DMA1_Stream0_IRQHandler+0x11c>
		    {
		    	__DMA1_Stream0_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80002dc:	4b2d      	ldr	r3, [pc, #180]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80002e2:	4798      	blx	r3
		    	DMA1 -> LIFCR |= DMA_LIFCR_CHTIF0;
 80002e4:	4b29      	ldr	r3, [pc, #164]	@ (800038c <DMA1_Stream0_IRQHandler+0x188>)
 80002e6:	689b      	ldr	r3, [r3, #8]
 80002e8:	4a28      	ldr	r2, [pc, #160]	@ (800038c <DMA1_Stream0_IRQHandler+0x188>)
 80002ea:	f043 0310 	orr.w	r3, r3, #16
 80002ee:	6093      	str	r3, [r2, #8]

		    	if(__DMA1_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80002f0:	4b28      	ldr	r3, [pc, #160]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80002f6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d110      	bne.n	8000320 <DMA1_Stream0_IRQHandler+0x11c>
		    	{
		    		if((__DMA1_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80002fe:	4b25      	ldr	r3, [pc, #148]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800030a:	2b00      	cmp	r3, #0
 800030c:	d004      	beq.n	8000318 <DMA1_Stream0_IRQHandler+0x114>
		    		{
		    			__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800030e:	4b21      	ldr	r3, [pc, #132]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000314:	4798      	blx	r3
 8000316:	e003      	b.n	8000320 <DMA1_Stream0_IRQHandler+0x11c>
		    		}
		    		else
		    		{
		    			__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000318:	4b1e      	ldr	r3, [pc, #120]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800031e:	4798      	blx	r3
		    	}
		    }
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF0)
 8000320:	4b1b      	ldr	r3, [pc, #108]	@ (8000390 <DMA1_Stream0_IRQHandler+0x18c>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	f003 0320 	and.w	r3, r3, #32
 8000328:	2b00      	cmp	r3, #0
 800032a:	d02d      	beq.n	8000388 <DMA1_Stream0_IRQHandler+0x184>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 800032c:	4b19      	ldr	r3, [pc, #100]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	69db      	ldr	r3, [r3, #28]
 8000332:	2210      	movs	r2, #16
 8000334:	4013      	ands	r3, r2
 8000336:	2b00      	cmp	r3, #0
 8000338:	d026      	beq.n	8000388 <DMA1_Stream0_IRQHandler+0x184>
		{
		    if (__DMA1_Stream0_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 800033a:	4b16      	ldr	r3, [pc, #88]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000340:	2b00      	cmp	r3, #0
 8000342:	d021      	beq.n	8000388 <DMA1_Stream0_IRQHandler+0x184>
		    {
		    	__DMA1_Stream0_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000344:	4b13      	ldr	r3, [pc, #76]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800034a:	4798      	blx	r3
		    	DMA1 -> LIFCR |= DMA_LIFCR_CTCIF0;
 800034c:	4b0f      	ldr	r3, [pc, #60]	@ (800038c <DMA1_Stream0_IRQHandler+0x188>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	4a0e      	ldr	r2, [pc, #56]	@ (800038c <DMA1_Stream0_IRQHandler+0x188>)
 8000352:	f043 0320 	orr.w	r3, r3, #32
 8000356:	6093      	str	r3, [r2, #8]

		    	if(__DMA1_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000358:	4b0e      	ldr	r3, [pc, #56]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800035e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000362:	4293      	cmp	r3, r2
 8000364:	d110      	bne.n	8000388 <DMA1_Stream0_IRQHandler+0x184>
		    	{
		    		if((__DMA1_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000366:	4b0b      	ldr	r3, [pc, #44]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	685b      	ldr	r3, [r3, #4]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000372:	2b00      	cmp	r3, #0
 8000374:	d004      	beq.n	8000380 <DMA1_Stream0_IRQHandler+0x17c>
		    		{
		    			__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000376:	4b07      	ldr	r3, [pc, #28]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800037c:	4798      	blx	r3
		    	}
		    }
		}

	}
}
 800037e:	e003      	b.n	8000388 <DMA1_Stream0_IRQHandler+0x184>
		    			__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000380:	4b04      	ldr	r3, [pc, #16]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000386:	4798      	blx	r3
}
 8000388:	bf00      	nop
 800038a:	bd80      	pop	{r7, pc}
 800038c:	40026000 	.word	0x40026000
 8000390:	20000070 	.word	0x20000070
 8000394:	20000030 	.word	0x20000030

08000398 <DMA1_Stream1_IRQHandler>:

void DMA1_Stream1_IRQHandler(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 800039c:	4b4f      	ldr	r3, [pc, #316]	@ (80004dc <DMA1_Stream1_IRQHandler+0x144>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a4f      	ldr	r2, [pc, #316]	@ (80004e0 <DMA1_Stream1_IRQHandler+0x148>)
 80003a2:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF1)
 80003a4:	4b4e      	ldr	r3, [pc, #312]	@ (80004e0 <DMA1_Stream1_IRQHandler+0x148>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d00e      	beq.n	80003ce <DMA1_Stream1_IRQHandler+0x36>
	{
	    if (__DMA1_Stream1_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80003b0:	4b4c      	ldr	r3, [pc, #304]	@ (80004e4 <DMA1_Stream1_IRQHandler+0x14c>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d009      	beq.n	80003ce <DMA1_Stream1_IRQHandler+0x36>
	    {
	    	__DMA1_Stream1_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80003ba:	4b4a      	ldr	r3, [pc, #296]	@ (80004e4 <DMA1_Stream1_IRQHandler+0x14c>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80003c0:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CFEIF1;
 80003c2:	4b46      	ldr	r3, [pc, #280]	@ (80004dc <DMA1_Stream1_IRQHandler+0x144>)
 80003c4:	689b      	ldr	r3, [r3, #8]
 80003c6:	4a45      	ldr	r2, [pc, #276]	@ (80004dc <DMA1_Stream1_IRQHandler+0x144>)
 80003c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003cc:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_DMEIF1)
 80003ce:	4b44      	ldr	r3, [pc, #272]	@ (80004e0 <DMA1_Stream1_IRQHandler+0x148>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d00e      	beq.n	80003f8 <DMA1_Stream1_IRQHandler+0x60>
	{
	    if (__DMA1_Stream1_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80003da:	4b42      	ldr	r3, [pc, #264]	@ (80004e4 <DMA1_Stream1_IRQHandler+0x14c>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d009      	beq.n	80003f8 <DMA1_Stream1_IRQHandler+0x60>
	    {
	    	__DMA1_Stream1_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80003e4:	4b3f      	ldr	r3, [pc, #252]	@ (80004e4 <DMA1_Stream1_IRQHandler+0x14c>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003ea:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 80003ec:	4b3b      	ldr	r3, [pc, #236]	@ (80004dc <DMA1_Stream1_IRQHandler+0x144>)
 80003ee:	689b      	ldr	r3, [r3, #8]
 80003f0:	4a3a      	ldr	r2, [pc, #232]	@ (80004dc <DMA1_Stream1_IRQHandler+0x144>)
 80003f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003f6:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_TEIF1)
 80003f8:	4b39      	ldr	r3, [pc, #228]	@ (80004e0 <DMA1_Stream1_IRQHandler+0x148>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000400:	2b00      	cmp	r3, #0
 8000402:	d00e      	beq.n	8000422 <DMA1_Stream1_IRQHandler+0x8a>
	{
	    if (__DMA1_Stream1_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000404:	4b37      	ldr	r3, [pc, #220]	@ (80004e4 <DMA1_Stream1_IRQHandler+0x14c>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800040a:	2b00      	cmp	r3, #0
 800040c:	d009      	beq.n	8000422 <DMA1_Stream1_IRQHandler+0x8a>
	    {
	    	__DMA1_Stream1_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800040e:	4b35      	ldr	r3, [pc, #212]	@ (80004e4 <DMA1_Stream1_IRQHandler+0x14c>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000414:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CTEIF1;
 8000416:	4b31      	ldr	r3, [pc, #196]	@ (80004dc <DMA1_Stream1_IRQHandler+0x144>)
 8000418:	689b      	ldr	r3, [r3, #8]
 800041a:	4a30      	ldr	r2, [pc, #192]	@ (80004dc <DMA1_Stream1_IRQHandler+0x144>)
 800041c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000420:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_HTIF1)
 8000422:	4b2f      	ldr	r3, [pc, #188]	@ (80004e0 <DMA1_Stream1_IRQHandler+0x148>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800042a:	2b00      	cmp	r3, #0
 800042c:	d026      	beq.n	800047c <DMA1_Stream1_IRQHandler+0xe4>
	{
	    if (__DMA1_Stream1_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800042e:	4b2d      	ldr	r3, [pc, #180]	@ (80004e4 <DMA1_Stream1_IRQHandler+0x14c>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000434:	2b00      	cmp	r3, #0
 8000436:	d021      	beq.n	800047c <DMA1_Stream1_IRQHandler+0xe4>
	    {
	    	__DMA1_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000438:	4b2a      	ldr	r3, [pc, #168]	@ (80004e4 <DMA1_Stream1_IRQHandler+0x14c>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800043e:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CHTIF1;
 8000440:	4b26      	ldr	r3, [pc, #152]	@ (80004dc <DMA1_Stream1_IRQHandler+0x144>)
 8000442:	689b      	ldr	r3, [r3, #8]
 8000444:	4a25      	ldr	r2, [pc, #148]	@ (80004dc <DMA1_Stream1_IRQHandler+0x144>)
 8000446:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800044a:	6093      	str	r3, [r2, #8]

	    	if(__DMA1_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800044c:	4b25      	ldr	r3, [pc, #148]	@ (80004e4 <DMA1_Stream1_IRQHandler+0x14c>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000452:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000456:	4293      	cmp	r3, r2
 8000458:	d110      	bne.n	800047c <DMA1_Stream1_IRQHandler+0xe4>
	    	{
	    		if((__DMA1_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800045a:	4b22      	ldr	r3, [pc, #136]	@ (80004e4 <DMA1_Stream1_IRQHandler+0x14c>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	685b      	ldr	r3, [r3, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000466:	2b00      	cmp	r3, #0
 8000468:	d004      	beq.n	8000474 <DMA1_Stream1_IRQHandler+0xdc>
	    		{
	    			__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800046a:	4b1e      	ldr	r3, [pc, #120]	@ (80004e4 <DMA1_Stream1_IRQHandler+0x14c>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000470:	4798      	blx	r3
 8000472:	e003      	b.n	800047c <DMA1_Stream1_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000474:	4b1b      	ldr	r3, [pc, #108]	@ (80004e4 <DMA1_Stream1_IRQHandler+0x14c>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800047a:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_LISR & DMA_LISR_TCIF1)
 800047c:	4b18      	ldr	r3, [pc, #96]	@ (80004e0 <DMA1_Stream1_IRQHandler+0x148>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000484:	2b00      	cmp	r3, #0
 8000486:	d026      	beq.n	80004d6 <DMA1_Stream1_IRQHandler+0x13e>
	{
	    if (__DMA1_Stream1_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000488:	4b16      	ldr	r3, [pc, #88]	@ (80004e4 <DMA1_Stream1_IRQHandler+0x14c>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800048e:	2b00      	cmp	r3, #0
 8000490:	d021      	beq.n	80004d6 <DMA1_Stream1_IRQHandler+0x13e>
	    {
	    	__DMA1_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000492:	4b14      	ldr	r3, [pc, #80]	@ (80004e4 <DMA1_Stream1_IRQHandler+0x14c>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000498:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CTCIF1;
 800049a:	4b10      	ldr	r3, [pc, #64]	@ (80004dc <DMA1_Stream1_IRQHandler+0x144>)
 800049c:	689b      	ldr	r3, [r3, #8]
 800049e:	4a0f      	ldr	r2, [pc, #60]	@ (80004dc <DMA1_Stream1_IRQHandler+0x144>)
 80004a0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80004a4:	6093      	str	r3, [r2, #8]

	    	if(__DMA1_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80004a6:	4b0f      	ldr	r3, [pc, #60]	@ (80004e4 <DMA1_Stream1_IRQHandler+0x14c>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80004ac:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d110      	bne.n	80004d6 <DMA1_Stream1_IRQHandler+0x13e>
	    	{
	    		if((__DMA1_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80004b4:	4b0b      	ldr	r3, [pc, #44]	@ (80004e4 <DMA1_Stream1_IRQHandler+0x14c>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	685b      	ldr	r3, [r3, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d004      	beq.n	80004ce <DMA1_Stream1_IRQHandler+0x136>
	    		{
	    			__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80004c4:	4b07      	ldr	r3, [pc, #28]	@ (80004e4 <DMA1_Stream1_IRQHandler+0x14c>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80004ca:	4798      	blx	r3
	    			__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 80004cc:	e003      	b.n	80004d6 <DMA1_Stream1_IRQHandler+0x13e>
	    			__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80004ce:	4b05      	ldr	r3, [pc, #20]	@ (80004e4 <DMA1_Stream1_IRQHandler+0x14c>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80004d4:	4798      	blx	r3
}
 80004d6:	bf00      	nop
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	40026000 	.word	0x40026000
 80004e0:	20000070 	.word	0x20000070
 80004e4:	20000034 	.word	0x20000034

080004e8 <DMA1_Stream2_IRQHandler>:


void DMA1_Stream2_IRQHandler(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 80004ec:	4b4f      	ldr	r3, [pc, #316]	@ (800062c <DMA1_Stream2_IRQHandler+0x144>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a4f      	ldr	r2, [pc, #316]	@ (8000630 <DMA1_Stream2_IRQHandler+0x148>)
 80004f2:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF2)
 80004f4:	4b4e      	ldr	r3, [pc, #312]	@ (8000630 <DMA1_Stream2_IRQHandler+0x148>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d00e      	beq.n	800051e <DMA1_Stream2_IRQHandler+0x36>
	{
	    if (__DMA1_Stream2_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000500:	4b4c      	ldr	r3, [pc, #304]	@ (8000634 <DMA1_Stream2_IRQHandler+0x14c>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000506:	2b00      	cmp	r3, #0
 8000508:	d009      	beq.n	800051e <DMA1_Stream2_IRQHandler+0x36>
	    {
	    	__DMA1_Stream2_Config__ ->ISR_Routines.FIFO_Error_ISR();
 800050a:	4b4a      	ldr	r3, [pc, #296]	@ (8000634 <DMA1_Stream2_IRQHandler+0x14c>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000510:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CFEIF2;
 8000512:	4b46      	ldr	r3, [pc, #280]	@ (800062c <DMA1_Stream2_IRQHandler+0x144>)
 8000514:	689b      	ldr	r3, [r3, #8]
 8000516:	4a45      	ldr	r2, [pc, #276]	@ (800062c <DMA1_Stream2_IRQHandler+0x144>)
 8000518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800051c:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_DMEIF2)
 800051e:	4b44      	ldr	r3, [pc, #272]	@ (8000630 <DMA1_Stream2_IRQHandler+0x148>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000526:	2b00      	cmp	r3, #0
 8000528:	d00e      	beq.n	8000548 <DMA1_Stream2_IRQHandler+0x60>
	{
	    if (__DMA1_Stream2_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800052a:	4b42      	ldr	r3, [pc, #264]	@ (8000634 <DMA1_Stream2_IRQHandler+0x14c>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000530:	2b00      	cmp	r3, #0
 8000532:	d009      	beq.n	8000548 <DMA1_Stream2_IRQHandler+0x60>
	    {
	    	__DMA1_Stream2_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000534:	4b3f      	ldr	r3, [pc, #252]	@ (8000634 <DMA1_Stream2_IRQHandler+0x14c>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800053a:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 800053c:	4b3b      	ldr	r3, [pc, #236]	@ (800062c <DMA1_Stream2_IRQHandler+0x144>)
 800053e:	689b      	ldr	r3, [r3, #8]
 8000540:	4a3a      	ldr	r2, [pc, #232]	@ (800062c <DMA1_Stream2_IRQHandler+0x144>)
 8000542:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000546:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_TEIF2)
 8000548:	4b39      	ldr	r3, [pc, #228]	@ (8000630 <DMA1_Stream2_IRQHandler+0x148>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000550:	2b00      	cmp	r3, #0
 8000552:	d00e      	beq.n	8000572 <DMA1_Stream2_IRQHandler+0x8a>
	{
	    if (__DMA1_Stream2_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000554:	4b37      	ldr	r3, [pc, #220]	@ (8000634 <DMA1_Stream2_IRQHandler+0x14c>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800055a:	2b00      	cmp	r3, #0
 800055c:	d009      	beq.n	8000572 <DMA1_Stream2_IRQHandler+0x8a>
	    {
	    	__DMA1_Stream2_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800055e:	4b35      	ldr	r3, [pc, #212]	@ (8000634 <DMA1_Stream2_IRQHandler+0x14c>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000564:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CTEIF2;
 8000566:	4b31      	ldr	r3, [pc, #196]	@ (800062c <DMA1_Stream2_IRQHandler+0x144>)
 8000568:	689b      	ldr	r3, [r3, #8]
 800056a:	4a30      	ldr	r2, [pc, #192]	@ (800062c <DMA1_Stream2_IRQHandler+0x144>)
 800056c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000570:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_HTIF2)
 8000572:	4b2f      	ldr	r3, [pc, #188]	@ (8000630 <DMA1_Stream2_IRQHandler+0x148>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800057a:	2b00      	cmp	r3, #0
 800057c:	d026      	beq.n	80005cc <DMA1_Stream2_IRQHandler+0xe4>
	{
	    if (__DMA1_Stream2_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800057e:	4b2d      	ldr	r3, [pc, #180]	@ (8000634 <DMA1_Stream2_IRQHandler+0x14c>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000584:	2b00      	cmp	r3, #0
 8000586:	d021      	beq.n	80005cc <DMA1_Stream2_IRQHandler+0xe4>
	    {
	    	__DMA1_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000588:	4b2a      	ldr	r3, [pc, #168]	@ (8000634 <DMA1_Stream2_IRQHandler+0x14c>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800058e:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CHTIF2;
 8000590:	4b26      	ldr	r3, [pc, #152]	@ (800062c <DMA1_Stream2_IRQHandler+0x144>)
 8000592:	689b      	ldr	r3, [r3, #8]
 8000594:	4a25      	ldr	r2, [pc, #148]	@ (800062c <DMA1_Stream2_IRQHandler+0x144>)
 8000596:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800059a:	6093      	str	r3, [r2, #8]

	    	if(__DMA1_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800059c:	4b25      	ldr	r3, [pc, #148]	@ (8000634 <DMA1_Stream2_IRQHandler+0x14c>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80005a2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d110      	bne.n	80005cc <DMA1_Stream2_IRQHandler+0xe4>
	    	{
	    		if((__DMA1_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80005aa:	4b22      	ldr	r3, [pc, #136]	@ (8000634 <DMA1_Stream2_IRQHandler+0x14c>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d004      	beq.n	80005c4 <DMA1_Stream2_IRQHandler+0xdc>
	    		{
	    			__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80005ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000634 <DMA1_Stream2_IRQHandler+0x14c>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80005c0:	4798      	blx	r3
 80005c2:	e003      	b.n	80005cc <DMA1_Stream2_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80005c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000634 <DMA1_Stream2_IRQHandler+0x14c>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80005ca:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_LISR & DMA_LISR_TCIF2)
 80005cc:	4b18      	ldr	r3, [pc, #96]	@ (8000630 <DMA1_Stream2_IRQHandler+0x148>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d026      	beq.n	8000626 <DMA1_Stream2_IRQHandler+0x13e>
	{
	    if (__DMA1_Stream2_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80005d8:	4b16      	ldr	r3, [pc, #88]	@ (8000634 <DMA1_Stream2_IRQHandler+0x14c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d021      	beq.n	8000626 <DMA1_Stream2_IRQHandler+0x13e>
	    {
	    	__DMA1_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80005e2:	4b14      	ldr	r3, [pc, #80]	@ (8000634 <DMA1_Stream2_IRQHandler+0x14c>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005e8:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CTCIF2;
 80005ea:	4b10      	ldr	r3, [pc, #64]	@ (800062c <DMA1_Stream2_IRQHandler+0x144>)
 80005ec:	689b      	ldr	r3, [r3, #8]
 80005ee:	4a0f      	ldr	r2, [pc, #60]	@ (800062c <DMA1_Stream2_IRQHandler+0x144>)
 80005f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005f4:	6093      	str	r3, [r2, #8]

	    	if(__DMA1_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80005f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000634 <DMA1_Stream2_IRQHandler+0x14c>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80005fc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000600:	4293      	cmp	r3, r2
 8000602:	d110      	bne.n	8000626 <DMA1_Stream2_IRQHandler+0x13e>
	    	{
	    		if((__DMA1_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000604:	4b0b      	ldr	r3, [pc, #44]	@ (8000634 <DMA1_Stream2_IRQHandler+0x14c>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	685b      	ldr	r3, [r3, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000610:	2b00      	cmp	r3, #0
 8000612:	d004      	beq.n	800061e <DMA1_Stream2_IRQHandler+0x136>
	    		{
	    			__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000614:	4b07      	ldr	r3, [pc, #28]	@ (8000634 <DMA1_Stream2_IRQHandler+0x14c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800061a:	4798      	blx	r3
	    			__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 800061c:	e003      	b.n	8000626 <DMA1_Stream2_IRQHandler+0x13e>
	    			__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800061e:	4b05      	ldr	r3, [pc, #20]	@ (8000634 <DMA1_Stream2_IRQHandler+0x14c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000624:	4798      	blx	r3
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40026000 	.word	0x40026000
 8000630:	20000070 	.word	0x20000070
 8000634:	20000038 	.word	0x20000038

08000638 <DMA1_Stream3_IRQHandler>:

void DMA1_Stream3_IRQHandler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 800063c:	4b4f      	ldr	r3, [pc, #316]	@ (800077c <DMA1_Stream3_IRQHandler+0x144>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a4f      	ldr	r2, [pc, #316]	@ (8000780 <DMA1_Stream3_IRQHandler+0x148>)
 8000642:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF3)
 8000644:	4b4e      	ldr	r3, [pc, #312]	@ (8000780 <DMA1_Stream3_IRQHandler+0x148>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800064c:	2b00      	cmp	r3, #0
 800064e:	d00e      	beq.n	800066e <DMA1_Stream3_IRQHandler+0x36>
	{
	    if (__DMA1_Stream3_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000650:	4b4c      	ldr	r3, [pc, #304]	@ (8000784 <DMA1_Stream3_IRQHandler+0x14c>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000656:	2b00      	cmp	r3, #0
 8000658:	d009      	beq.n	800066e <DMA1_Stream3_IRQHandler+0x36>
	    {
	    	__DMA1_Stream3_Config__ ->ISR_Routines.FIFO_Error_ISR();
 800065a:	4b4a      	ldr	r3, [pc, #296]	@ (8000784 <DMA1_Stream3_IRQHandler+0x14c>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000660:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CFEIF3;
 8000662:	4b46      	ldr	r3, [pc, #280]	@ (800077c <DMA1_Stream3_IRQHandler+0x144>)
 8000664:	689b      	ldr	r3, [r3, #8]
 8000666:	4a45      	ldr	r2, [pc, #276]	@ (800077c <DMA1_Stream3_IRQHandler+0x144>)
 8000668:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800066c:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_DMEIF3)
 800066e:	4b44      	ldr	r3, [pc, #272]	@ (8000780 <DMA1_Stream3_IRQHandler+0x148>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000676:	2b00      	cmp	r3, #0
 8000678:	d00e      	beq.n	8000698 <DMA1_Stream3_IRQHandler+0x60>
	{
	    if (__DMA1_Stream3_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800067a:	4b42      	ldr	r3, [pc, #264]	@ (8000784 <DMA1_Stream3_IRQHandler+0x14c>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000680:	2b00      	cmp	r3, #0
 8000682:	d009      	beq.n	8000698 <DMA1_Stream3_IRQHandler+0x60>
	    {
	    	__DMA1_Stream3_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000684:	4b3f      	ldr	r3, [pc, #252]	@ (8000784 <DMA1_Stream3_IRQHandler+0x14c>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800068a:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 800068c:	4b3b      	ldr	r3, [pc, #236]	@ (800077c <DMA1_Stream3_IRQHandler+0x144>)
 800068e:	689b      	ldr	r3, [r3, #8]
 8000690:	4a3a      	ldr	r2, [pc, #232]	@ (800077c <DMA1_Stream3_IRQHandler+0x144>)
 8000692:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000696:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_TEIF3)
 8000698:	4b39      	ldr	r3, [pc, #228]	@ (8000780 <DMA1_Stream3_IRQHandler+0x148>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d00e      	beq.n	80006c2 <DMA1_Stream3_IRQHandler+0x8a>
	{
	    if (__DMA1_Stream3_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80006a4:	4b37      	ldr	r3, [pc, #220]	@ (8000784 <DMA1_Stream3_IRQHandler+0x14c>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d009      	beq.n	80006c2 <DMA1_Stream3_IRQHandler+0x8a>
	    {
	    	__DMA1_Stream3_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80006ae:	4b35      	ldr	r3, [pc, #212]	@ (8000784 <DMA1_Stream3_IRQHandler+0x14c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006b4:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CTEIF3;
 80006b6:	4b31      	ldr	r3, [pc, #196]	@ (800077c <DMA1_Stream3_IRQHandler+0x144>)
 80006b8:	689b      	ldr	r3, [r3, #8]
 80006ba:	4a30      	ldr	r2, [pc, #192]	@ (800077c <DMA1_Stream3_IRQHandler+0x144>)
 80006bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006c0:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_HTIF3)
 80006c2:	4b2f      	ldr	r3, [pc, #188]	@ (8000780 <DMA1_Stream3_IRQHandler+0x148>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d026      	beq.n	800071c <DMA1_Stream3_IRQHandler+0xe4>
	{
	    if (__DMA1_Stream3_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80006ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000784 <DMA1_Stream3_IRQHandler+0x14c>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d021      	beq.n	800071c <DMA1_Stream3_IRQHandler+0xe4>
	    {
	    	__DMA1_Stream3_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80006d8:	4b2a      	ldr	r3, [pc, #168]	@ (8000784 <DMA1_Stream3_IRQHandler+0x14c>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006de:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CHTIF3;
 80006e0:	4b26      	ldr	r3, [pc, #152]	@ (800077c <DMA1_Stream3_IRQHandler+0x144>)
 80006e2:	689b      	ldr	r3, [r3, #8]
 80006e4:	4a25      	ldr	r2, [pc, #148]	@ (800077c <DMA1_Stream3_IRQHandler+0x144>)
 80006e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80006ea:	6093      	str	r3, [r2, #8]

	    	if(__DMA1_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80006ec:	4b25      	ldr	r3, [pc, #148]	@ (8000784 <DMA1_Stream3_IRQHandler+0x14c>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80006f2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d110      	bne.n	800071c <DMA1_Stream3_IRQHandler+0xe4>
	    	{
	    		if((__DMA1_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80006fa:	4b22      	ldr	r3, [pc, #136]	@ (8000784 <DMA1_Stream3_IRQHandler+0x14c>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	685b      	ldr	r3, [r3, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000706:	2b00      	cmp	r3, #0
 8000708:	d004      	beq.n	8000714 <DMA1_Stream3_IRQHandler+0xdc>
	    		{
	    			__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800070a:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <DMA1_Stream3_IRQHandler+0x14c>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000710:	4798      	blx	r3
 8000712:	e003      	b.n	800071c <DMA1_Stream3_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000714:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <DMA1_Stream3_IRQHandler+0x14c>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800071a:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_LISR & DMA_LISR_TCIF3)
 800071c:	4b18      	ldr	r3, [pc, #96]	@ (8000780 <DMA1_Stream3_IRQHandler+0x148>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000724:	2b00      	cmp	r3, #0
 8000726:	d026      	beq.n	8000776 <DMA1_Stream3_IRQHandler+0x13e>
	{
	    if (__DMA1_Stream3_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000728:	4b16      	ldr	r3, [pc, #88]	@ (8000784 <DMA1_Stream3_IRQHandler+0x14c>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072e:	2b00      	cmp	r3, #0
 8000730:	d021      	beq.n	8000776 <DMA1_Stream3_IRQHandler+0x13e>
	    {
	    	__DMA1_Stream3_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000732:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <DMA1_Stream3_IRQHandler+0x14c>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000738:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CTCIF3;
 800073a:	4b10      	ldr	r3, [pc, #64]	@ (800077c <DMA1_Stream3_IRQHandler+0x144>)
 800073c:	689b      	ldr	r3, [r3, #8]
 800073e:	4a0f      	ldr	r2, [pc, #60]	@ (800077c <DMA1_Stream3_IRQHandler+0x144>)
 8000740:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000744:	6093      	str	r3, [r2, #8]

	    	if(__DMA1_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000746:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <DMA1_Stream3_IRQHandler+0x14c>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800074c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000750:	4293      	cmp	r3, r2
 8000752:	d110      	bne.n	8000776 <DMA1_Stream3_IRQHandler+0x13e>
	    	{
	    		if((__DMA1_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000754:	4b0b      	ldr	r3, [pc, #44]	@ (8000784 <DMA1_Stream3_IRQHandler+0x14c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000760:	2b00      	cmp	r3, #0
 8000762:	d004      	beq.n	800076e <DMA1_Stream3_IRQHandler+0x136>
	    		{
	    			__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000764:	4b07      	ldr	r3, [pc, #28]	@ (8000784 <DMA1_Stream3_IRQHandler+0x14c>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800076a:	4798      	blx	r3
	    			__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 800076c:	e003      	b.n	8000776 <DMA1_Stream3_IRQHandler+0x13e>
	    			__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800076e:	4b05      	ldr	r3, [pc, #20]	@ (8000784 <DMA1_Stream3_IRQHandler+0x14c>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000774:	4798      	blx	r3
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40026000 	.word	0x40026000
 8000780:	20000070 	.word	0x20000070
 8000784:	2000003c 	.word	0x2000003c

08000788 <DMA1_Stream4_IRQHandler>:

void DMA1_Stream4_IRQHandler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 800078c:	4b4f      	ldr	r3, [pc, #316]	@ (80008cc <DMA1_Stream4_IRQHandler+0x144>)
 800078e:	685b      	ldr	r3, [r3, #4]
 8000790:	4a4f      	ldr	r2, [pc, #316]	@ (80008d0 <DMA1_Stream4_IRQHandler+0x148>)
 8000792:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF4)
 8000794:	4b4e      	ldr	r3, [pc, #312]	@ (80008d0 <DMA1_Stream4_IRQHandler+0x148>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f003 0301 	and.w	r3, r3, #1
 800079c:	2b00      	cmp	r3, #0
 800079e:	d00e      	beq.n	80007be <DMA1_Stream4_IRQHandler+0x36>
	{
	    if (__DMA1_Stream4_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80007a0:	4b4c      	ldr	r3, [pc, #304]	@ (80008d4 <DMA1_Stream4_IRQHandler+0x14c>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d009      	beq.n	80007be <DMA1_Stream4_IRQHandler+0x36>
	    {
	    	__DMA1_Stream4_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80007aa:	4b4a      	ldr	r3, [pc, #296]	@ (80008d4 <DMA1_Stream4_IRQHandler+0x14c>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80007b0:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_HIFCR_CFEIF5;
 80007b2:	4b46      	ldr	r3, [pc, #280]	@ (80008cc <DMA1_Stream4_IRQHandler+0x144>)
 80007b4:	689b      	ldr	r3, [r3, #8]
 80007b6:	4a45      	ldr	r2, [pc, #276]	@ (80008cc <DMA1_Stream4_IRQHandler+0x144>)
 80007b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007bc:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_HISR & DMA_HISR_DMEIF4)
 80007be:	4b44      	ldr	r3, [pc, #272]	@ (80008d0 <DMA1_Stream4_IRQHandler+0x148>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f003 0304 	and.w	r3, r3, #4
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d00e      	beq.n	80007e8 <DMA1_Stream4_IRQHandler+0x60>
	{
	    if (__DMA1_Stream4_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80007ca:	4b42      	ldr	r3, [pc, #264]	@ (80008d4 <DMA1_Stream4_IRQHandler+0x14c>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d009      	beq.n	80007e8 <DMA1_Stream4_IRQHandler+0x60>
	    {
	    	__DMA1_Stream4_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80007d4:	4b3f      	ldr	r3, [pc, #252]	@ (80008d4 <DMA1_Stream4_IRQHandler+0x14c>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007da:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 80007dc:	4b3b      	ldr	r3, [pc, #236]	@ (80008cc <DMA1_Stream4_IRQHandler+0x144>)
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	4a3a      	ldr	r2, [pc, #232]	@ (80008cc <DMA1_Stream4_IRQHandler+0x144>)
 80007e2:	f043 0304 	orr.w	r3, r3, #4
 80007e6:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_TEIF4)
 80007e8:	4b39      	ldr	r3, [pc, #228]	@ (80008d0 <DMA1_Stream4_IRQHandler+0x148>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f003 0308 	and.w	r3, r3, #8
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d00e      	beq.n	8000812 <DMA1_Stream4_IRQHandler+0x8a>
	{
	    if (__DMA1_Stream4_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80007f4:	4b37      	ldr	r3, [pc, #220]	@ (80008d4 <DMA1_Stream4_IRQHandler+0x14c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d009      	beq.n	8000812 <DMA1_Stream4_IRQHandler+0x8a>
	    {
	    	__DMA1_Stream4_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80007fe:	4b35      	ldr	r3, [pc, #212]	@ (80008d4 <DMA1_Stream4_IRQHandler+0x14c>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000804:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CTEIF4;
 8000806:	4b31      	ldr	r3, [pc, #196]	@ (80008cc <DMA1_Stream4_IRQHandler+0x144>)
 8000808:	68db      	ldr	r3, [r3, #12]
 800080a:	4a30      	ldr	r2, [pc, #192]	@ (80008cc <DMA1_Stream4_IRQHandler+0x144>)
 800080c:	f043 0308 	orr.w	r3, r3, #8
 8000810:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_HTIF4)
 8000812:	4b2f      	ldr	r3, [pc, #188]	@ (80008d0 <DMA1_Stream4_IRQHandler+0x148>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f003 0310 	and.w	r3, r3, #16
 800081a:	2b00      	cmp	r3, #0
 800081c:	d026      	beq.n	800086c <DMA1_Stream4_IRQHandler+0xe4>
	{
	    if (__DMA1_Stream4_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800081e:	4b2d      	ldr	r3, [pc, #180]	@ (80008d4 <DMA1_Stream4_IRQHandler+0x14c>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000824:	2b00      	cmp	r3, #0
 8000826:	d021      	beq.n	800086c <DMA1_Stream4_IRQHandler+0xe4>
	    {
	    	__DMA1_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000828:	4b2a      	ldr	r3, [pc, #168]	@ (80008d4 <DMA1_Stream4_IRQHandler+0x14c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800082e:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CHTIF4;
 8000830:	4b26      	ldr	r3, [pc, #152]	@ (80008cc <DMA1_Stream4_IRQHandler+0x144>)
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	4a25      	ldr	r2, [pc, #148]	@ (80008cc <DMA1_Stream4_IRQHandler+0x144>)
 8000836:	f043 0310 	orr.w	r3, r3, #16
 800083a:	60d3      	str	r3, [r2, #12]

	    	if(__DMA1_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800083c:	4b25      	ldr	r3, [pc, #148]	@ (80008d4 <DMA1_Stream4_IRQHandler+0x14c>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000842:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000846:	4293      	cmp	r3, r2
 8000848:	d110      	bne.n	800086c <DMA1_Stream4_IRQHandler+0xe4>
	    	{
	    		if((__DMA1_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800084a:	4b22      	ldr	r3, [pc, #136]	@ (80008d4 <DMA1_Stream4_IRQHandler+0x14c>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000856:	2b00      	cmp	r3, #0
 8000858:	d004      	beq.n	8000864 <DMA1_Stream4_IRQHandler+0xdc>
	    		{
	    			__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800085a:	4b1e      	ldr	r3, [pc, #120]	@ (80008d4 <DMA1_Stream4_IRQHandler+0x14c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000860:	4798      	blx	r3
 8000862:	e003      	b.n	800086c <DMA1_Stream4_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000864:	4b1b      	ldr	r3, [pc, #108]	@ (80008d4 <DMA1_Stream4_IRQHandler+0x14c>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800086a:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_HISR & DMA_HISR_TCIF4)
 800086c:	4b18      	ldr	r3, [pc, #96]	@ (80008d0 <DMA1_Stream4_IRQHandler+0x148>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f003 0320 	and.w	r3, r3, #32
 8000874:	2b00      	cmp	r3, #0
 8000876:	d026      	beq.n	80008c6 <DMA1_Stream4_IRQHandler+0x13e>
	{
	    if (__DMA1_Stream4_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000878:	4b16      	ldr	r3, [pc, #88]	@ (80008d4 <DMA1_Stream4_IRQHandler+0x14c>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087e:	2b00      	cmp	r3, #0
 8000880:	d021      	beq.n	80008c6 <DMA1_Stream4_IRQHandler+0x13e>
	    {
	    	__DMA1_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000882:	4b14      	ldr	r3, [pc, #80]	@ (80008d4 <DMA1_Stream4_IRQHandler+0x14c>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000888:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CTCIF4;
 800088a:	4b10      	ldr	r3, [pc, #64]	@ (80008cc <DMA1_Stream4_IRQHandler+0x144>)
 800088c:	68db      	ldr	r3, [r3, #12]
 800088e:	4a0f      	ldr	r2, [pc, #60]	@ (80008cc <DMA1_Stream4_IRQHandler+0x144>)
 8000890:	f043 0320 	orr.w	r3, r3, #32
 8000894:	60d3      	str	r3, [r2, #12]

	    	if(__DMA1_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000896:	4b0f      	ldr	r3, [pc, #60]	@ (80008d4 <DMA1_Stream4_IRQHandler+0x14c>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800089c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d110      	bne.n	80008c6 <DMA1_Stream4_IRQHandler+0x13e>
	    	{
	    		if((__DMA1_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80008a4:	4b0b      	ldr	r3, [pc, #44]	@ (80008d4 <DMA1_Stream4_IRQHandler+0x14c>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d004      	beq.n	80008be <DMA1_Stream4_IRQHandler+0x136>
	    		{
	    			__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80008b4:	4b07      	ldr	r3, [pc, #28]	@ (80008d4 <DMA1_Stream4_IRQHandler+0x14c>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80008ba:	4798      	blx	r3
	    			__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 80008bc:	e003      	b.n	80008c6 <DMA1_Stream4_IRQHandler+0x13e>
	    			__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80008be:	4b05      	ldr	r3, [pc, #20]	@ (80008d4 <DMA1_Stream4_IRQHandler+0x14c>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80008c4:	4798      	blx	r3
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40026000 	.word	0x40026000
 80008d0:	20000074 	.word	0x20000074
 80008d4:	20000040 	.word	0x20000040

080008d8 <DMA1_Stream5_IRQHandler>:




void DMA1_Stream5_IRQHandler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 80008dc:	4b4f      	ldr	r3, [pc, #316]	@ (8000a1c <DMA1_Stream5_IRQHandler+0x144>)
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	4a4f      	ldr	r2, [pc, #316]	@ (8000a20 <DMA1_Stream5_IRQHandler+0x148>)
 80008e2:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF5)
 80008e4:	4b4e      	ldr	r3, [pc, #312]	@ (8000a20 <DMA1_Stream5_IRQHandler+0x148>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d00e      	beq.n	800090e <DMA1_Stream5_IRQHandler+0x36>
	{
	    if (__DMA1_Stream5_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80008f0:	4b4c      	ldr	r3, [pc, #304]	@ (8000a24 <DMA1_Stream5_IRQHandler+0x14c>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d009      	beq.n	800090e <DMA1_Stream5_IRQHandler+0x36>
	    {
	    	__DMA1_Stream5_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80008fa:	4b4a      	ldr	r3, [pc, #296]	@ (8000a24 <DMA1_Stream5_IRQHandler+0x14c>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000900:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CFEIF5;
 8000902:	4b46      	ldr	r3, [pc, #280]	@ (8000a1c <DMA1_Stream5_IRQHandler+0x144>)
 8000904:	68db      	ldr	r3, [r3, #12]
 8000906:	4a45      	ldr	r2, [pc, #276]	@ (8000a1c <DMA1_Stream5_IRQHandler+0x144>)
 8000908:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800090c:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_DMEIF5)
 800090e:	4b44      	ldr	r3, [pc, #272]	@ (8000a20 <DMA1_Stream5_IRQHandler+0x148>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000916:	2b00      	cmp	r3, #0
 8000918:	d00e      	beq.n	8000938 <DMA1_Stream5_IRQHandler+0x60>
	{
	    if (__DMA1_Stream5_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800091a:	4b42      	ldr	r3, [pc, #264]	@ (8000a24 <DMA1_Stream5_IRQHandler+0x14c>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000920:	2b00      	cmp	r3, #0
 8000922:	d009      	beq.n	8000938 <DMA1_Stream5_IRQHandler+0x60>
	    {
	    	__DMA1_Stream5_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000924:	4b3f      	ldr	r3, [pc, #252]	@ (8000a24 <DMA1_Stream5_IRQHandler+0x14c>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092a:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 800092c:	4b3b      	ldr	r3, [pc, #236]	@ (8000a1c <DMA1_Stream5_IRQHandler+0x144>)
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	4a3a      	ldr	r2, [pc, #232]	@ (8000a1c <DMA1_Stream5_IRQHandler+0x144>)
 8000932:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000936:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_TEIF5)
 8000938:	4b39      	ldr	r3, [pc, #228]	@ (8000a20 <DMA1_Stream5_IRQHandler+0x148>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000940:	2b00      	cmp	r3, #0
 8000942:	d00e      	beq.n	8000962 <DMA1_Stream5_IRQHandler+0x8a>
	{
	    if (__DMA1_Stream5_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000944:	4b37      	ldr	r3, [pc, #220]	@ (8000a24 <DMA1_Stream5_IRQHandler+0x14c>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800094a:	2b00      	cmp	r3, #0
 800094c:	d009      	beq.n	8000962 <DMA1_Stream5_IRQHandler+0x8a>
	    {
	    	__DMA1_Stream5_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800094e:	4b35      	ldr	r3, [pc, #212]	@ (8000a24 <DMA1_Stream5_IRQHandler+0x14c>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000954:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CTEIF5;
 8000956:	4b31      	ldr	r3, [pc, #196]	@ (8000a1c <DMA1_Stream5_IRQHandler+0x144>)
 8000958:	68db      	ldr	r3, [r3, #12]
 800095a:	4a30      	ldr	r2, [pc, #192]	@ (8000a1c <DMA1_Stream5_IRQHandler+0x144>)
 800095c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000960:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_HTIF5)
 8000962:	4b2f      	ldr	r3, [pc, #188]	@ (8000a20 <DMA1_Stream5_IRQHandler+0x148>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800096a:	2b00      	cmp	r3, #0
 800096c:	d026      	beq.n	80009bc <DMA1_Stream5_IRQHandler+0xe4>
	{
	    if (__DMA1_Stream5_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800096e:	4b2d      	ldr	r3, [pc, #180]	@ (8000a24 <DMA1_Stream5_IRQHandler+0x14c>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000974:	2b00      	cmp	r3, #0
 8000976:	d021      	beq.n	80009bc <DMA1_Stream5_IRQHandler+0xe4>
	    {
	    	__DMA1_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000978:	4b2a      	ldr	r3, [pc, #168]	@ (8000a24 <DMA1_Stream5_IRQHandler+0x14c>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800097e:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CHTIF5;
 8000980:	4b26      	ldr	r3, [pc, #152]	@ (8000a1c <DMA1_Stream5_IRQHandler+0x144>)
 8000982:	68db      	ldr	r3, [r3, #12]
 8000984:	4a25      	ldr	r2, [pc, #148]	@ (8000a1c <DMA1_Stream5_IRQHandler+0x144>)
 8000986:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800098a:	60d3      	str	r3, [r2, #12]

	    	if(__DMA1_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800098c:	4b25      	ldr	r3, [pc, #148]	@ (8000a24 <DMA1_Stream5_IRQHandler+0x14c>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000992:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000996:	4293      	cmp	r3, r2
 8000998:	d110      	bne.n	80009bc <DMA1_Stream5_IRQHandler+0xe4>
	    	{
	    		if((__DMA1_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800099a:	4b22      	ldr	r3, [pc, #136]	@ (8000a24 <DMA1_Stream5_IRQHandler+0x14c>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d004      	beq.n	80009b4 <DMA1_Stream5_IRQHandler+0xdc>
	    		{
	    			__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80009aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000a24 <DMA1_Stream5_IRQHandler+0x14c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80009b0:	4798      	blx	r3
 80009b2:	e003      	b.n	80009bc <DMA1_Stream5_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80009b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a24 <DMA1_Stream5_IRQHandler+0x14c>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80009ba:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_HISR & DMA_HISR_TCIF5)
 80009bc:	4b18      	ldr	r3, [pc, #96]	@ (8000a20 <DMA1_Stream5_IRQHandler+0x148>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d026      	beq.n	8000a16 <DMA1_Stream5_IRQHandler+0x13e>
	{
	    if (__DMA1_Stream5_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80009c8:	4b16      	ldr	r3, [pc, #88]	@ (8000a24 <DMA1_Stream5_IRQHandler+0x14c>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d021      	beq.n	8000a16 <DMA1_Stream5_IRQHandler+0x13e>
	    {
	    	__DMA1_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80009d2:	4b14      	ldr	r3, [pc, #80]	@ (8000a24 <DMA1_Stream5_IRQHandler+0x14c>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80009d8:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CTCIF5;
 80009da:	4b10      	ldr	r3, [pc, #64]	@ (8000a1c <DMA1_Stream5_IRQHandler+0x144>)
 80009dc:	68db      	ldr	r3, [r3, #12]
 80009de:	4a0f      	ldr	r2, [pc, #60]	@ (8000a1c <DMA1_Stream5_IRQHandler+0x144>)
 80009e0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009e4:	60d3      	str	r3, [r2, #12]

	    	if(__DMA1_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80009e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a24 <DMA1_Stream5_IRQHandler+0x14c>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80009ec:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d110      	bne.n	8000a16 <DMA1_Stream5_IRQHandler+0x13e>
	    	{
	    		if((__DMA1_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80009f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000a24 <DMA1_Stream5_IRQHandler+0x14c>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d004      	beq.n	8000a0e <DMA1_Stream5_IRQHandler+0x136>
	    		{
	    			__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000a04:	4b07      	ldr	r3, [pc, #28]	@ (8000a24 <DMA1_Stream5_IRQHandler+0x14c>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000a0a:	4798      	blx	r3
	    			__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 8000a0c:	e003      	b.n	8000a16 <DMA1_Stream5_IRQHandler+0x13e>
	    			__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000a0e:	4b05      	ldr	r3, [pc, #20]	@ (8000a24 <DMA1_Stream5_IRQHandler+0x14c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000a14:	4798      	blx	r3
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40026000 	.word	0x40026000
 8000a20:	20000074 	.word	0x20000074
 8000a24:	20000044 	.word	0x20000044

08000a28 <DMA1_Stream6_IRQHandler>:



void DMA1_Stream6_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 8000a2c:	4b4f      	ldr	r3, [pc, #316]	@ (8000b6c <DMA1_Stream6_IRQHandler+0x144>)
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	4a4f      	ldr	r2, [pc, #316]	@ (8000b70 <DMA1_Stream6_IRQHandler+0x148>)
 8000a32:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF6)
 8000a34:	4b4e      	ldr	r3, [pc, #312]	@ (8000b70 <DMA1_Stream6_IRQHandler+0x148>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d00e      	beq.n	8000a5e <DMA1_Stream6_IRQHandler+0x36>
	{
	    if (__DMA1_Stream6_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000a40:	4b4c      	ldr	r3, [pc, #304]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x14c>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d009      	beq.n	8000a5e <DMA1_Stream6_IRQHandler+0x36>
	    {
	    	__DMA1_Stream6_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000a4a:	4b4a      	ldr	r3, [pc, #296]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x14c>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a50:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CFEIF6;
 8000a52:	4b46      	ldr	r3, [pc, #280]	@ (8000b6c <DMA1_Stream6_IRQHandler+0x144>)
 8000a54:	68db      	ldr	r3, [r3, #12]
 8000a56:	4a45      	ldr	r2, [pc, #276]	@ (8000b6c <DMA1_Stream6_IRQHandler+0x144>)
 8000a58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a5c:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_DMEIF6)
 8000a5e:	4b44      	ldr	r3, [pc, #272]	@ (8000b70 <DMA1_Stream6_IRQHandler+0x148>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d00e      	beq.n	8000a88 <DMA1_Stream6_IRQHandler+0x60>
	{
	    if (__DMA1_Stream6_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000a6a:	4b42      	ldr	r3, [pc, #264]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x14c>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d009      	beq.n	8000a88 <DMA1_Stream6_IRQHandler+0x60>
	    {
	    	__DMA1_Stream6_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000a74:	4b3f      	ldr	r3, [pc, #252]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x14c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7a:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 8000a7c:	4b3b      	ldr	r3, [pc, #236]	@ (8000b6c <DMA1_Stream6_IRQHandler+0x144>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	4a3a      	ldr	r2, [pc, #232]	@ (8000b6c <DMA1_Stream6_IRQHandler+0x144>)
 8000a82:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a86:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_TEIF6)
 8000a88:	4b39      	ldr	r3, [pc, #228]	@ (8000b70 <DMA1_Stream6_IRQHandler+0x148>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d00e      	beq.n	8000ab2 <DMA1_Stream6_IRQHandler+0x8a>
	{
	    if (__DMA1_Stream6_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000a94:	4b37      	ldr	r3, [pc, #220]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x14c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d009      	beq.n	8000ab2 <DMA1_Stream6_IRQHandler+0x8a>
	    {
	    	__DMA1_Stream6_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000a9e:	4b35      	ldr	r3, [pc, #212]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x14c>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa4:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CTEIF6;
 8000aa6:	4b31      	ldr	r3, [pc, #196]	@ (8000b6c <DMA1_Stream6_IRQHandler+0x144>)
 8000aa8:	68db      	ldr	r3, [r3, #12]
 8000aaa:	4a30      	ldr	r2, [pc, #192]	@ (8000b6c <DMA1_Stream6_IRQHandler+0x144>)
 8000aac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000ab0:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_HTIF6)
 8000ab2:	4b2f      	ldr	r3, [pc, #188]	@ (8000b70 <DMA1_Stream6_IRQHandler+0x148>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d026      	beq.n	8000b0c <DMA1_Stream6_IRQHandler+0xe4>
	{
	    if (__DMA1_Stream6_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000abe:	4b2d      	ldr	r3, [pc, #180]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x14c>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d021      	beq.n	8000b0c <DMA1_Stream6_IRQHandler+0xe4>
	    {
	    	__DMA1_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000ac8:	4b2a      	ldr	r3, [pc, #168]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x14c>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ace:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CHTIF6;
 8000ad0:	4b26      	ldr	r3, [pc, #152]	@ (8000b6c <DMA1_Stream6_IRQHandler+0x144>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	4a25      	ldr	r2, [pc, #148]	@ (8000b6c <DMA1_Stream6_IRQHandler+0x144>)
 8000ad6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000ada:	60d3      	str	r3, [r2, #12]

	    	if(__DMA1_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000adc:	4b25      	ldr	r3, [pc, #148]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x14c>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ae2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d110      	bne.n	8000b0c <DMA1_Stream6_IRQHandler+0xe4>
	    	{
	    		if((__DMA1_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000aea:	4b22      	ldr	r3, [pc, #136]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x14c>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d004      	beq.n	8000b04 <DMA1_Stream6_IRQHandler+0xdc>
	    		{
	    			__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000afa:	4b1e      	ldr	r3, [pc, #120]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x14c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000b00:	4798      	blx	r3
 8000b02:	e003      	b.n	8000b0c <DMA1_Stream6_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000b04:	4b1b      	ldr	r3, [pc, #108]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x14c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b0a:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_HISR & DMA_HISR_TCIF6)
 8000b0c:	4b18      	ldr	r3, [pc, #96]	@ (8000b70 <DMA1_Stream6_IRQHandler+0x148>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d026      	beq.n	8000b66 <DMA1_Stream6_IRQHandler+0x13e>
	{
	    if (__DMA1_Stream6_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000b18:	4b16      	ldr	r3, [pc, #88]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x14c>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d021      	beq.n	8000b66 <DMA1_Stream6_IRQHandler+0x13e>
	    {
	    	__DMA1_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000b22:	4b14      	ldr	r3, [pc, #80]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x14c>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b28:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CTCIF6;
 8000b2a:	4b10      	ldr	r3, [pc, #64]	@ (8000b6c <DMA1_Stream6_IRQHandler+0x144>)
 8000b2c:	68db      	ldr	r3, [r3, #12]
 8000b2e:	4a0f      	ldr	r2, [pc, #60]	@ (8000b6c <DMA1_Stream6_IRQHandler+0x144>)
 8000b30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b34:	60d3      	str	r3, [r2, #12]

	    	if(__DMA1_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000b36:	4b0f      	ldr	r3, [pc, #60]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x14c>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b3c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d110      	bne.n	8000b66 <DMA1_Stream6_IRQHandler+0x13e>
	    	{
	    		if((__DMA1_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000b44:	4b0b      	ldr	r3, [pc, #44]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x14c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d004      	beq.n	8000b5e <DMA1_Stream6_IRQHandler+0x136>
	    		{
	    			__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000b54:	4b07      	ldr	r3, [pc, #28]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x14c>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000b5a:	4798      	blx	r3
	    			__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 8000b5c:	e003      	b.n	8000b66 <DMA1_Stream6_IRQHandler+0x13e>
	    			__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000b5e:	4b05      	ldr	r3, [pc, #20]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x14c>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b64:	4798      	blx	r3
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40026000 	.word	0x40026000
 8000b70:	20000074 	.word	0x20000074
 8000b74:	20000048 	.word	0x20000048

08000b78 <DMA1_Stream7_IRQHandler>:


void DMA1_Stream7_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 8000b7c:	4b4f      	ldr	r3, [pc, #316]	@ (8000cbc <DMA1_Stream7_IRQHandler+0x144>)
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	4a4f      	ldr	r2, [pc, #316]	@ (8000cc0 <DMA1_Stream7_IRQHandler+0x148>)
 8000b82:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF7)
 8000b84:	4b4e      	ldr	r3, [pc, #312]	@ (8000cc0 <DMA1_Stream7_IRQHandler+0x148>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d00e      	beq.n	8000bae <DMA1_Stream7_IRQHandler+0x36>
	{
	    if (__DMA1_Stream7_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000b90:	4b4c      	ldr	r3, [pc, #304]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x14c>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d009      	beq.n	8000bae <DMA1_Stream7_IRQHandler+0x36>
	    {
	    	__DMA1_Stream7_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000b9a:	4b4a      	ldr	r3, [pc, #296]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x14c>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ba0:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CFEIF7;
 8000ba2:	4b46      	ldr	r3, [pc, #280]	@ (8000cbc <DMA1_Stream7_IRQHandler+0x144>)
 8000ba4:	68db      	ldr	r3, [r3, #12]
 8000ba6:	4a45      	ldr	r2, [pc, #276]	@ (8000cbc <DMA1_Stream7_IRQHandler+0x144>)
 8000ba8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bac:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_DMEIF7)
 8000bae:	4b44      	ldr	r3, [pc, #272]	@ (8000cc0 <DMA1_Stream7_IRQHandler+0x148>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d00e      	beq.n	8000bd8 <DMA1_Stream7_IRQHandler+0x60>
	{
	    if (__DMA1_Stream7_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000bba:	4b42      	ldr	r3, [pc, #264]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x14c>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d009      	beq.n	8000bd8 <DMA1_Stream7_IRQHandler+0x60>
	    {
	    	__DMA1_Stream7_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000bc4:	4b3f      	ldr	r3, [pc, #252]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x14c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bca:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 8000bcc:	4b3b      	ldr	r3, [pc, #236]	@ (8000cbc <DMA1_Stream7_IRQHandler+0x144>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	4a3a      	ldr	r2, [pc, #232]	@ (8000cbc <DMA1_Stream7_IRQHandler+0x144>)
 8000bd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000bd6:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_TEIF7)
 8000bd8:	4b39      	ldr	r3, [pc, #228]	@ (8000cc0 <DMA1_Stream7_IRQHandler+0x148>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d00e      	beq.n	8000c02 <DMA1_Stream7_IRQHandler+0x8a>
	{
	    if (__DMA1_Stream7_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000be4:	4b37      	ldr	r3, [pc, #220]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x14c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d009      	beq.n	8000c02 <DMA1_Stream7_IRQHandler+0x8a>
	    {
	    	__DMA1_Stream7_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000bee:	4b35      	ldr	r3, [pc, #212]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x14c>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bf4:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CTEIF7;
 8000bf6:	4b31      	ldr	r3, [pc, #196]	@ (8000cbc <DMA1_Stream7_IRQHandler+0x144>)
 8000bf8:	68db      	ldr	r3, [r3, #12]
 8000bfa:	4a30      	ldr	r2, [pc, #192]	@ (8000cbc <DMA1_Stream7_IRQHandler+0x144>)
 8000bfc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c00:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_HTIF7)
 8000c02:	4b2f      	ldr	r3, [pc, #188]	@ (8000cc0 <DMA1_Stream7_IRQHandler+0x148>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d026      	beq.n	8000c5c <DMA1_Stream7_IRQHandler+0xe4>
	{
	    if (__DMA1_Stream7_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000c0e:	4b2d      	ldr	r3, [pc, #180]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x14c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d021      	beq.n	8000c5c <DMA1_Stream7_IRQHandler+0xe4>
	    {
	    	__DMA1_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000c18:	4b2a      	ldr	r3, [pc, #168]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x14c>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c1e:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CHTIF7;
 8000c20:	4b26      	ldr	r3, [pc, #152]	@ (8000cbc <DMA1_Stream7_IRQHandler+0x144>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	4a25      	ldr	r2, [pc, #148]	@ (8000cbc <DMA1_Stream7_IRQHandler+0x144>)
 8000c26:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000c2a:	60d3      	str	r3, [r2, #12]

	    	if(__DMA1_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000c2c:	4b25      	ldr	r3, [pc, #148]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x14c>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c32:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d110      	bne.n	8000c5c <DMA1_Stream7_IRQHandler+0xe4>
	    	{
	    		if((__DMA1_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000c3a:	4b22      	ldr	r3, [pc, #136]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x14c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d004      	beq.n	8000c54 <DMA1_Stream7_IRQHandler+0xdc>
	    		{
	    			__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000c4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x14c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000c50:	4798      	blx	r3
 8000c52:	e003      	b.n	8000c5c <DMA1_Stream7_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000c54:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x14c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c5a:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_HISR & DMA_HISR_TCIF7)
 8000c5c:	4b18      	ldr	r3, [pc, #96]	@ (8000cc0 <DMA1_Stream7_IRQHandler+0x148>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d026      	beq.n	8000cb6 <DMA1_Stream7_IRQHandler+0x13e>
	{
	    if (__DMA1_Stream7_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000c68:	4b16      	ldr	r3, [pc, #88]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x14c>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d021      	beq.n	8000cb6 <DMA1_Stream7_IRQHandler+0x13e>
	    {
	    	__DMA1_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000c72:	4b14      	ldr	r3, [pc, #80]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x14c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c78:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CTCIF7;
 8000c7a:	4b10      	ldr	r3, [pc, #64]	@ (8000cbc <DMA1_Stream7_IRQHandler+0x144>)
 8000c7c:	68db      	ldr	r3, [r3, #12]
 8000c7e:	4a0f      	ldr	r2, [pc, #60]	@ (8000cbc <DMA1_Stream7_IRQHandler+0x144>)
 8000c80:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000c84:	60d3      	str	r3, [r2, #12]

	    	if(__DMA1_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000c86:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x14c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c8c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d110      	bne.n	8000cb6 <DMA1_Stream7_IRQHandler+0x13e>
	    	{
	    		if((__DMA1_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000c94:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x14c>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d004      	beq.n	8000cae <DMA1_Stream7_IRQHandler+0x136>
	    		{
	    			__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000ca4:	4b07      	ldr	r3, [pc, #28]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x14c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000caa:	4798      	blx	r3
	    			__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 8000cac:	e003      	b.n	8000cb6 <DMA1_Stream7_IRQHandler+0x13e>
	    			__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000cae:	4b05      	ldr	r3, [pc, #20]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x14c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000cb4:	4798      	blx	r3
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40026000 	.word	0x40026000
 8000cc0:	20000074 	.word	0x20000074
 8000cc4:	2000004c 	.word	0x2000004c

08000cc8 <DMA2_Stream0_IRQHandler>:

void DMA2_Stream0_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8000ccc:	4b60      	ldr	r3, [pc, #384]	@ (8000e50 <DMA2_Stream0_IRQHandler+0x188>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a60      	ldr	r2, [pc, #384]	@ (8000e54 <DMA2_Stream0_IRQHandler+0x18c>)
 8000cd2:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF0)
 8000cd4:	4b5f      	ldr	r3, [pc, #380]	@ (8000e54 <DMA2_Stream0_IRQHandler+0x18c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d015      	beq.n	8000d0c <DMA2_Stream0_IRQHandler+0x44>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8000ce0:	4b5d      	ldr	r3, [pc, #372]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	69db      	ldr	r3, [r3, #28]
 8000ce6:	2280      	movs	r2, #128	@ 0x80
 8000ce8:	4013      	ands	r3, r2
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d00e      	beq.n	8000d0c <DMA2_Stream0_IRQHandler+0x44>
		{
		    if (__DMA2_Stream0_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000cee:	4b5a      	ldr	r3, [pc, #360]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d009      	beq.n	8000d0c <DMA2_Stream0_IRQHandler+0x44>
		    {
		    	__DMA2_Stream0_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000cf8:	4b57      	ldr	r3, [pc, #348]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000cfe:	4798      	blx	r3
		    	DMA2 -> LIFCR |= DMA_LIFCR_CFEIF0;
 8000d00:	4b53      	ldr	r3, [pc, #332]	@ (8000e50 <DMA2_Stream0_IRQHandler+0x188>)
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	4a52      	ldr	r2, [pc, #328]	@ (8000e50 <DMA2_Stream0_IRQHandler+0x188>)
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	6093      	str	r3, [r2, #8]
		    }
		}

	}

	if(DMA_LISR & DMA_LISR_DMEIF0)
 8000d0c:	4b51      	ldr	r3, [pc, #324]	@ (8000e54 <DMA2_Stream0_IRQHandler+0x18c>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f003 0304 	and.w	r3, r3, #4
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d015      	beq.n	8000d44 <DMA2_Stream0_IRQHandler+0x7c>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8000d18:	4b4f      	ldr	r3, [pc, #316]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	69db      	ldr	r3, [r3, #28]
 8000d1e:	2202      	movs	r2, #2
 8000d20:	4013      	ands	r3, r2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d00e      	beq.n	8000d44 <DMA2_Stream0_IRQHandler+0x7c>
		{
		    if (__DMA2_Stream0_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000d26:	4b4c      	ldr	r3, [pc, #304]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d009      	beq.n	8000d44 <DMA2_Stream0_IRQHandler+0x7c>
		    {
		    	__DMA2_Stream0_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000d30:	4b49      	ldr	r3, [pc, #292]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d36:	4798      	blx	r3
		    	DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8000d38:	4b45      	ldr	r3, [pc, #276]	@ (8000e50 <DMA2_Stream0_IRQHandler+0x188>)
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	4a44      	ldr	r2, [pc, #272]	@ (8000e50 <DMA2_Stream0_IRQHandler+0x188>)
 8000d3e:	f043 0304 	orr.w	r3, r3, #4
 8000d42:	6093      	str	r3, [r2, #8]
		    }
		}

	}

	if(DMA_LISR & DMA_LISR_TEIF0)
 8000d44:	4b43      	ldr	r3, [pc, #268]	@ (8000e54 <DMA2_Stream0_IRQHandler+0x18c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f003 0308 	and.w	r3, r3, #8
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d015      	beq.n	8000d7c <DMA2_Stream0_IRQHandler+0xb4>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8000d50:	4b41      	ldr	r3, [pc, #260]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	69db      	ldr	r3, [r3, #28]
 8000d56:	2204      	movs	r2, #4
 8000d58:	4013      	ands	r3, r2
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d00e      	beq.n	8000d7c <DMA2_Stream0_IRQHandler+0xb4>
		{
		    if (__DMA2_Stream0_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000d5e:	4b3e      	ldr	r3, [pc, #248]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d009      	beq.n	8000d7c <DMA2_Stream0_IRQHandler+0xb4>
		    {
		    	__DMA2_Stream0_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000d68:	4b3b      	ldr	r3, [pc, #236]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d6e:	4798      	blx	r3
		    	DMA2 -> LIFCR |= DMA_LIFCR_CTEIF0;
 8000d70:	4b37      	ldr	r3, [pc, #220]	@ (8000e50 <DMA2_Stream0_IRQHandler+0x188>)
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	4a36      	ldr	r2, [pc, #216]	@ (8000e50 <DMA2_Stream0_IRQHandler+0x188>)
 8000d76:	f043 0308 	orr.w	r3, r3, #8
 8000d7a:	6093      	str	r3, [r2, #8]
		    }
		}

	}

	if(DMA_LISR & DMA_LISR_HTIF0)
 8000d7c:	4b35      	ldr	r3, [pc, #212]	@ (8000e54 <DMA2_Stream0_IRQHandler+0x18c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f003 0310 	and.w	r3, r3, #16
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d02d      	beq.n	8000de4 <DMA2_Stream0_IRQHandler+0x11c>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8000d88:	4b33      	ldr	r3, [pc, #204]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	69db      	ldr	r3, [r3, #28]
 8000d8e:	2208      	movs	r2, #8
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d026      	beq.n	8000de4 <DMA2_Stream0_IRQHandler+0x11c>
		{
		    if (__DMA2_Stream0_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000d96:	4b30      	ldr	r3, [pc, #192]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d021      	beq.n	8000de4 <DMA2_Stream0_IRQHandler+0x11c>
		    {
		    	__DMA2_Stream0_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000da0:	4b2d      	ldr	r3, [pc, #180]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000da6:	4798      	blx	r3
		    	DMA2 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8000da8:	4b29      	ldr	r3, [pc, #164]	@ (8000e50 <DMA2_Stream0_IRQHandler+0x188>)
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	4a28      	ldr	r2, [pc, #160]	@ (8000e50 <DMA2_Stream0_IRQHandler+0x188>)
 8000dae:	f043 0310 	orr.w	r3, r3, #16
 8000db2:	6093      	str	r3, [r2, #8]

		    	if(__DMA2_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000db4:	4b28      	ldr	r3, [pc, #160]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000dba:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d110      	bne.n	8000de4 <DMA2_Stream0_IRQHandler+0x11c>
		    	{
		    		if((__DMA2_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000dc2:	4b25      	ldr	r3, [pc, #148]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d004      	beq.n	8000ddc <DMA2_Stream0_IRQHandler+0x114>
		    		{
		    			__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000dd2:	4b21      	ldr	r3, [pc, #132]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000dd8:	4798      	blx	r3
 8000dda:	e003      	b.n	8000de4 <DMA2_Stream0_IRQHandler+0x11c>
		    		}
		    		else
		    		{
		    			__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000ddc:	4b1e      	ldr	r3, [pc, #120]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000de2:	4798      	blx	r3
		    }
		}

	}

	if(DMA_LISR & DMA_LISR_TCIF0)
 8000de4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e54 <DMA2_Stream0_IRQHandler+0x18c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f003 0320 	and.w	r3, r3, #32
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d02d      	beq.n	8000e4c <DMA2_Stream0_IRQHandler+0x184>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8000df0:	4b19      	ldr	r3, [pc, #100]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	2210      	movs	r2, #16
 8000df8:	4013      	ands	r3, r2
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d026      	beq.n	8000e4c <DMA2_Stream0_IRQHandler+0x184>
		{
		    if (__DMA2_Stream0_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000dfe:	4b16      	ldr	r3, [pc, #88]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d021      	beq.n	8000e4c <DMA2_Stream0_IRQHandler+0x184>
		    {
		    	__DMA2_Stream0_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8000e08:	4b13      	ldr	r3, [pc, #76]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0e:	4798      	blx	r3
		    	DMA2 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8000e10:	4b0f      	ldr	r3, [pc, #60]	@ (8000e50 <DMA2_Stream0_IRQHandler+0x188>)
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	4a0e      	ldr	r2, [pc, #56]	@ (8000e50 <DMA2_Stream0_IRQHandler+0x188>)
 8000e16:	f043 0320 	orr.w	r3, r3, #32
 8000e1a:	6093      	str	r3, [r2, #8]

		    	if(__DMA2_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000e1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e22:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d110      	bne.n	8000e4c <DMA2_Stream0_IRQHandler+0x184>
		    	{
		    		if((__DMA2_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d004      	beq.n	8000e44 <DMA2_Stream0_IRQHandler+0x17c>
		    		{
		    			__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000e3a:	4b07      	ldr	r3, [pc, #28]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e40:	4798      	blx	r3
		    	}
		    }
		}

	}
}
 8000e42:	e003      	b.n	8000e4c <DMA2_Stream0_IRQHandler+0x184>
		    			__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000e44:	4b04      	ldr	r3, [pc, #16]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e4a:	4798      	blx	r3
}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40026400 	.word	0x40026400
 8000e54:	20000070 	.word	0x20000070
 8000e58:	20000050 	.word	0x20000050

08000e5c <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8000e60:	4b4f      	ldr	r3, [pc, #316]	@ (8000fa0 <DMA2_Stream1_IRQHandler+0x144>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a4f      	ldr	r2, [pc, #316]	@ (8000fa4 <DMA2_Stream1_IRQHandler+0x148>)
 8000e66:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF1)
 8000e68:	4b4e      	ldr	r3, [pc, #312]	@ (8000fa4 <DMA2_Stream1_IRQHandler+0x148>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d00e      	beq.n	8000e92 <DMA2_Stream1_IRQHandler+0x36>
	{
	    if (__DMA2_Stream1_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000e74:	4b4c      	ldr	r3, [pc, #304]	@ (8000fa8 <DMA2_Stream1_IRQHandler+0x14c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d009      	beq.n	8000e92 <DMA2_Stream1_IRQHandler+0x36>
	    {
	    	__DMA2_Stream1_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000e7e:	4b4a      	ldr	r3, [pc, #296]	@ (8000fa8 <DMA2_Stream1_IRQHandler+0x14c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e84:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CFEIF1;
 8000e86:	4b46      	ldr	r3, [pc, #280]	@ (8000fa0 <DMA2_Stream1_IRQHandler+0x144>)
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	4a45      	ldr	r2, [pc, #276]	@ (8000fa0 <DMA2_Stream1_IRQHandler+0x144>)
 8000e8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e90:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_DMEIF1)
 8000e92:	4b44      	ldr	r3, [pc, #272]	@ (8000fa4 <DMA2_Stream1_IRQHandler+0x148>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d00e      	beq.n	8000ebc <DMA2_Stream1_IRQHandler+0x60>
	{
	    if (__DMA2_Stream1_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000e9e:	4b42      	ldr	r3, [pc, #264]	@ (8000fa8 <DMA2_Stream1_IRQHandler+0x14c>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d009      	beq.n	8000ebc <DMA2_Stream1_IRQHandler+0x60>
	    {
	    	__DMA2_Stream1_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000ea8:	4b3f      	ldr	r3, [pc, #252]	@ (8000fa8 <DMA2_Stream1_IRQHandler+0x14c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eae:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 8000eb0:	4b3b      	ldr	r3, [pc, #236]	@ (8000fa0 <DMA2_Stream1_IRQHandler+0x144>)
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	4a3a      	ldr	r2, [pc, #232]	@ (8000fa0 <DMA2_Stream1_IRQHandler+0x144>)
 8000eb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eba:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_TEIF1)
 8000ebc:	4b39      	ldr	r3, [pc, #228]	@ (8000fa4 <DMA2_Stream1_IRQHandler+0x148>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d00e      	beq.n	8000ee6 <DMA2_Stream1_IRQHandler+0x8a>
	{
	    if (__DMA2_Stream1_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000ec8:	4b37      	ldr	r3, [pc, #220]	@ (8000fa8 <DMA2_Stream1_IRQHandler+0x14c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d009      	beq.n	8000ee6 <DMA2_Stream1_IRQHandler+0x8a>
	    {
	    	__DMA2_Stream1_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000ed2:	4b35      	ldr	r3, [pc, #212]	@ (8000fa8 <DMA2_Stream1_IRQHandler+0x14c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed8:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CTEIF1;
 8000eda:	4b31      	ldr	r3, [pc, #196]	@ (8000fa0 <DMA2_Stream1_IRQHandler+0x144>)
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	4a30      	ldr	r2, [pc, #192]	@ (8000fa0 <DMA2_Stream1_IRQHandler+0x144>)
 8000ee0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ee4:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_HTIF1)
 8000ee6:	4b2f      	ldr	r3, [pc, #188]	@ (8000fa4 <DMA2_Stream1_IRQHandler+0x148>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d026      	beq.n	8000f40 <DMA2_Stream1_IRQHandler+0xe4>
	{
	    if (__DMA2_Stream1_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000ef2:	4b2d      	ldr	r3, [pc, #180]	@ (8000fa8 <DMA2_Stream1_IRQHandler+0x14c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d021      	beq.n	8000f40 <DMA2_Stream1_IRQHandler+0xe4>
	    {
	    	__DMA2_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000efc:	4b2a      	ldr	r3, [pc, #168]	@ (8000fa8 <DMA2_Stream1_IRQHandler+0x14c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f02:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CHTIF1;
 8000f04:	4b26      	ldr	r3, [pc, #152]	@ (8000fa0 <DMA2_Stream1_IRQHandler+0x144>)
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	4a25      	ldr	r2, [pc, #148]	@ (8000fa0 <DMA2_Stream1_IRQHandler+0x144>)
 8000f0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f0e:	6093      	str	r3, [r2, #8]

	    	if(__DMA2_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000f10:	4b25      	ldr	r3, [pc, #148]	@ (8000fa8 <DMA2_Stream1_IRQHandler+0x14c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f16:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d110      	bne.n	8000f40 <DMA2_Stream1_IRQHandler+0xe4>
	    	{
	    		if((__DMA2_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000f1e:	4b22      	ldr	r3, [pc, #136]	@ (8000fa8 <DMA2_Stream1_IRQHandler+0x14c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d004      	beq.n	8000f38 <DMA2_Stream1_IRQHandler+0xdc>
	    		{
	    			__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000f2e:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa8 <DMA2_Stream1_IRQHandler+0x14c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f34:	4798      	blx	r3
 8000f36:	e003      	b.n	8000f40 <DMA2_Stream1_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000f38:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa8 <DMA2_Stream1_IRQHandler+0x14c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f3e:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_LISR & DMA_LISR_TCIF1)
 8000f40:	4b18      	ldr	r3, [pc, #96]	@ (8000fa4 <DMA2_Stream1_IRQHandler+0x148>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d026      	beq.n	8000f9a <DMA2_Stream1_IRQHandler+0x13e>
	{
	    if (__DMA2_Stream1_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000f4c:	4b16      	ldr	r3, [pc, #88]	@ (8000fa8 <DMA2_Stream1_IRQHandler+0x14c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d021      	beq.n	8000f9a <DMA2_Stream1_IRQHandler+0x13e>
	    {
	    	__DMA2_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000f56:	4b14      	ldr	r3, [pc, #80]	@ (8000fa8 <DMA2_Stream1_IRQHandler+0x14c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f5c:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CTCIF1;
 8000f5e:	4b10      	ldr	r3, [pc, #64]	@ (8000fa0 <DMA2_Stream1_IRQHandler+0x144>)
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	4a0f      	ldr	r2, [pc, #60]	@ (8000fa0 <DMA2_Stream1_IRQHandler+0x144>)
 8000f64:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f68:	6093      	str	r3, [r2, #8]

	    	if(__DMA2_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa8 <DMA2_Stream1_IRQHandler+0x14c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f70:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d110      	bne.n	8000f9a <DMA2_Stream1_IRQHandler+0x13e>
	    	{
	    		if((__DMA2_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000f78:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa8 <DMA2_Stream1_IRQHandler+0x14c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d004      	beq.n	8000f92 <DMA2_Stream1_IRQHandler+0x136>
	    		{
	    			__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000f88:	4b07      	ldr	r3, [pc, #28]	@ (8000fa8 <DMA2_Stream1_IRQHandler+0x14c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f8e:	4798      	blx	r3
	    			__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 8000f90:	e003      	b.n	8000f9a <DMA2_Stream1_IRQHandler+0x13e>
	    			__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000f92:	4b05      	ldr	r3, [pc, #20]	@ (8000fa8 <DMA2_Stream1_IRQHandler+0x14c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f98:	4798      	blx	r3
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40026400 	.word	0x40026400
 8000fa4:	20000070 	.word	0x20000070
 8000fa8:	20000054 	.word	0x20000054

08000fac <DMA2_Stream2_IRQHandler>:


void DMA2_Stream2_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8000fb0:	4b4f      	ldr	r3, [pc, #316]	@ (80010f0 <DMA2_Stream2_IRQHandler+0x144>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a4f      	ldr	r2, [pc, #316]	@ (80010f4 <DMA2_Stream2_IRQHandler+0x148>)
 8000fb6:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF2)
 8000fb8:	4b4e      	ldr	r3, [pc, #312]	@ (80010f4 <DMA2_Stream2_IRQHandler+0x148>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d00e      	beq.n	8000fe2 <DMA2_Stream2_IRQHandler+0x36>
	{
	    if (__DMA2_Stream2_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000fc4:	4b4c      	ldr	r3, [pc, #304]	@ (80010f8 <DMA2_Stream2_IRQHandler+0x14c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d009      	beq.n	8000fe2 <DMA2_Stream2_IRQHandler+0x36>
	    {
	    	__DMA2_Stream2_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000fce:	4b4a      	ldr	r3, [pc, #296]	@ (80010f8 <DMA2_Stream2_IRQHandler+0x14c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fd4:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CFEIF2;
 8000fd6:	4b46      	ldr	r3, [pc, #280]	@ (80010f0 <DMA2_Stream2_IRQHandler+0x144>)
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	4a45      	ldr	r2, [pc, #276]	@ (80010f0 <DMA2_Stream2_IRQHandler+0x144>)
 8000fdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fe0:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_DMEIF2)
 8000fe2:	4b44      	ldr	r3, [pc, #272]	@ (80010f4 <DMA2_Stream2_IRQHandler+0x148>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d00e      	beq.n	800100c <DMA2_Stream2_IRQHandler+0x60>
	{
	    if (__DMA2_Stream2_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000fee:	4b42      	ldr	r3, [pc, #264]	@ (80010f8 <DMA2_Stream2_IRQHandler+0x14c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d009      	beq.n	800100c <DMA2_Stream2_IRQHandler+0x60>
	    {
	    	__DMA2_Stream2_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000ff8:	4b3f      	ldr	r3, [pc, #252]	@ (80010f8 <DMA2_Stream2_IRQHandler+0x14c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffe:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 8001000:	4b3b      	ldr	r3, [pc, #236]	@ (80010f0 <DMA2_Stream2_IRQHandler+0x144>)
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	4a3a      	ldr	r2, [pc, #232]	@ (80010f0 <DMA2_Stream2_IRQHandler+0x144>)
 8001006:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800100a:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_TEIF2)
 800100c:	4b39      	ldr	r3, [pc, #228]	@ (80010f4 <DMA2_Stream2_IRQHandler+0x148>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d00e      	beq.n	8001036 <DMA2_Stream2_IRQHandler+0x8a>
	{
	    if (__DMA2_Stream2_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001018:	4b37      	ldr	r3, [pc, #220]	@ (80010f8 <DMA2_Stream2_IRQHandler+0x14c>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800101e:	2b00      	cmp	r3, #0
 8001020:	d009      	beq.n	8001036 <DMA2_Stream2_IRQHandler+0x8a>
	    {
	    	__DMA2_Stream2_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001022:	4b35      	ldr	r3, [pc, #212]	@ (80010f8 <DMA2_Stream2_IRQHandler+0x14c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001028:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CTEIF2;
 800102a:	4b31      	ldr	r3, [pc, #196]	@ (80010f0 <DMA2_Stream2_IRQHandler+0x144>)
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	4a30      	ldr	r2, [pc, #192]	@ (80010f0 <DMA2_Stream2_IRQHandler+0x144>)
 8001030:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001034:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_HTIF2)
 8001036:	4b2f      	ldr	r3, [pc, #188]	@ (80010f4 <DMA2_Stream2_IRQHandler+0x148>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d026      	beq.n	8001090 <DMA2_Stream2_IRQHandler+0xe4>
	{
	    if (__DMA2_Stream2_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001042:	4b2d      	ldr	r3, [pc, #180]	@ (80010f8 <DMA2_Stream2_IRQHandler+0x14c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001048:	2b00      	cmp	r3, #0
 800104a:	d021      	beq.n	8001090 <DMA2_Stream2_IRQHandler+0xe4>
	    {
	    	__DMA2_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800104c:	4b2a      	ldr	r3, [pc, #168]	@ (80010f8 <DMA2_Stream2_IRQHandler+0x14c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001052:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CHTIF2;
 8001054:	4b26      	ldr	r3, [pc, #152]	@ (80010f0 <DMA2_Stream2_IRQHandler+0x144>)
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	4a25      	ldr	r2, [pc, #148]	@ (80010f0 <DMA2_Stream2_IRQHandler+0x144>)
 800105a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800105e:	6093      	str	r3, [r2, #8]

	    	if(__DMA2_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001060:	4b25      	ldr	r3, [pc, #148]	@ (80010f8 <DMA2_Stream2_IRQHandler+0x14c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001066:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800106a:	4293      	cmp	r3, r2
 800106c:	d110      	bne.n	8001090 <DMA2_Stream2_IRQHandler+0xe4>
	    	{
	    		if((__DMA2_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800106e:	4b22      	ldr	r3, [pc, #136]	@ (80010f8 <DMA2_Stream2_IRQHandler+0x14c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d004      	beq.n	8001088 <DMA2_Stream2_IRQHandler+0xdc>
	    		{
	    			__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800107e:	4b1e      	ldr	r3, [pc, #120]	@ (80010f8 <DMA2_Stream2_IRQHandler+0x14c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001084:	4798      	blx	r3
 8001086:	e003      	b.n	8001090 <DMA2_Stream2_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001088:	4b1b      	ldr	r3, [pc, #108]	@ (80010f8 <DMA2_Stream2_IRQHandler+0x14c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800108e:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_LISR & DMA_LISR_TCIF2)
 8001090:	4b18      	ldr	r3, [pc, #96]	@ (80010f4 <DMA2_Stream2_IRQHandler+0x148>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d026      	beq.n	80010ea <DMA2_Stream2_IRQHandler+0x13e>
	{
	    if (__DMA2_Stream2_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 800109c:	4b16      	ldr	r3, [pc, #88]	@ (80010f8 <DMA2_Stream2_IRQHandler+0x14c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d021      	beq.n	80010ea <DMA2_Stream2_IRQHandler+0x13e>
	    {
	    	__DMA2_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80010a6:	4b14      	ldr	r3, [pc, #80]	@ (80010f8 <DMA2_Stream2_IRQHandler+0x14c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010ac:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CTCIF2;
 80010ae:	4b10      	ldr	r3, [pc, #64]	@ (80010f0 <DMA2_Stream2_IRQHandler+0x144>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	4a0f      	ldr	r2, [pc, #60]	@ (80010f0 <DMA2_Stream2_IRQHandler+0x144>)
 80010b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010b8:	6093      	str	r3, [r2, #8]

	    	if(__DMA2_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80010ba:	4b0f      	ldr	r3, [pc, #60]	@ (80010f8 <DMA2_Stream2_IRQHandler+0x14c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010c0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d110      	bne.n	80010ea <DMA2_Stream2_IRQHandler+0x13e>
	    	{
	    		if((__DMA2_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80010c8:	4b0b      	ldr	r3, [pc, #44]	@ (80010f8 <DMA2_Stream2_IRQHandler+0x14c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d004      	beq.n	80010e2 <DMA2_Stream2_IRQHandler+0x136>
	    		{
	    			__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80010d8:	4b07      	ldr	r3, [pc, #28]	@ (80010f8 <DMA2_Stream2_IRQHandler+0x14c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80010de:	4798      	blx	r3
	    			__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 80010e0:	e003      	b.n	80010ea <DMA2_Stream2_IRQHandler+0x13e>
	    			__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80010e2:	4b05      	ldr	r3, [pc, #20]	@ (80010f8 <DMA2_Stream2_IRQHandler+0x14c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010e8:	4798      	blx	r3
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40026400 	.word	0x40026400
 80010f4:	20000070 	.word	0x20000070
 80010f8:	20000058 	.word	0x20000058

080010fc <DMA2_Stream3_IRQHandler>:

void DMA2_Stream3_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8001100:	4b60      	ldr	r3, [pc, #384]	@ (8001284 <DMA2_Stream3_IRQHandler+0x188>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a60      	ldr	r2, [pc, #384]	@ (8001288 <DMA2_Stream3_IRQHandler+0x18c>)
 8001106:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF3)
 8001108:	4b5f      	ldr	r3, [pc, #380]	@ (8001288 <DMA2_Stream3_IRQHandler+0x18c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d015      	beq.n	8001140 <DMA2_Stream3_IRQHandler+0x44>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8001114:	4b5d      	ldr	r3, [pc, #372]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	2280      	movs	r2, #128	@ 0x80
 800111c:	4013      	ands	r3, r2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d00e      	beq.n	8001140 <DMA2_Stream3_IRQHandler+0x44>
		{
		    if (__DMA2_Stream3_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001122:	4b5a      	ldr	r3, [pc, #360]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001128:	2b00      	cmp	r3, #0
 800112a:	d009      	beq.n	8001140 <DMA2_Stream3_IRQHandler+0x44>
		    {
		    	__DMA2_Stream3_Config__ ->ISR_Routines.FIFO_Error_ISR();
 800112c:	4b57      	ldr	r3, [pc, #348]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001132:	4798      	blx	r3
		    	DMA2 -> LIFCR |= DMA_LIFCR_CFEIF3;
 8001134:	4b53      	ldr	r3, [pc, #332]	@ (8001284 <DMA2_Stream3_IRQHandler+0x188>)
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	4a52      	ldr	r2, [pc, #328]	@ (8001284 <DMA2_Stream3_IRQHandler+0x188>)
 800113a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800113e:	6093      	str	r3, [r2, #8]
		    }
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF3)
 8001140:	4b51      	ldr	r3, [pc, #324]	@ (8001288 <DMA2_Stream3_IRQHandler+0x18c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d015      	beq.n	8001178 <DMA2_Stream3_IRQHandler+0x7c>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 800114c:	4b4f      	ldr	r3, [pc, #316]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	2202      	movs	r2, #2
 8001154:	4013      	ands	r3, r2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00e      	beq.n	8001178 <DMA2_Stream3_IRQHandler+0x7c>
		{
		    if (__DMA2_Stream3_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800115a:	4b4c      	ldr	r3, [pc, #304]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001160:	2b00      	cmp	r3, #0
 8001162:	d009      	beq.n	8001178 <DMA2_Stream3_IRQHandler+0x7c>
		    {
		    	__DMA2_Stream3_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001164:	4b49      	ldr	r3, [pc, #292]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116a:	4798      	blx	r3
		    	DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 800116c:	4b45      	ldr	r3, [pc, #276]	@ (8001284 <DMA2_Stream3_IRQHandler+0x188>)
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	4a44      	ldr	r2, [pc, #272]	@ (8001284 <DMA2_Stream3_IRQHandler+0x188>)
 8001172:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001176:	6093      	str	r3, [r2, #8]
		    }
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF3)
 8001178:	4b43      	ldr	r3, [pc, #268]	@ (8001288 <DMA2_Stream3_IRQHandler+0x18c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d015      	beq.n	80011b0 <DMA2_Stream3_IRQHandler+0xb4>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8001184:	4b41      	ldr	r3, [pc, #260]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	2204      	movs	r2, #4
 800118c:	4013      	ands	r3, r2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d00e      	beq.n	80011b0 <DMA2_Stream3_IRQHandler+0xb4>
		{
		    if (__DMA2_Stream3_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001192:	4b3e      	ldr	r3, [pc, #248]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001198:	2b00      	cmp	r3, #0
 800119a:	d009      	beq.n	80011b0 <DMA2_Stream3_IRQHandler+0xb4>
		    {
		    	__DMA2_Stream3_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800119c:	4b3b      	ldr	r3, [pc, #236]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a2:	4798      	blx	r3
		    	DMA2 -> LIFCR |= DMA_LIFCR_CTEIF3;
 80011a4:	4b37      	ldr	r3, [pc, #220]	@ (8001284 <DMA2_Stream3_IRQHandler+0x188>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	4a36      	ldr	r2, [pc, #216]	@ (8001284 <DMA2_Stream3_IRQHandler+0x188>)
 80011aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011ae:	6093      	str	r3, [r2, #8]
		    }
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF3)
 80011b0:	4b35      	ldr	r3, [pc, #212]	@ (8001288 <DMA2_Stream3_IRQHandler+0x18c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d02d      	beq.n	8001218 <DMA2_Stream3_IRQHandler+0x11c>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 80011bc:	4b33      	ldr	r3, [pc, #204]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	2208      	movs	r2, #8
 80011c4:	4013      	ands	r3, r2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d026      	beq.n	8001218 <DMA2_Stream3_IRQHandler+0x11c>
		{
		    if (__DMA2_Stream3_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80011ca:	4b30      	ldr	r3, [pc, #192]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d021      	beq.n	8001218 <DMA2_Stream3_IRQHandler+0x11c>
		    {
		    	__DMA2_Stream3_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80011d4:	4b2d      	ldr	r3, [pc, #180]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011da:	4798      	blx	r3
		    	DMA2 -> LIFCR |= DMA_LIFCR_CHTIF3;
 80011dc:	4b29      	ldr	r3, [pc, #164]	@ (8001284 <DMA2_Stream3_IRQHandler+0x188>)
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	4a28      	ldr	r2, [pc, #160]	@ (8001284 <DMA2_Stream3_IRQHandler+0x188>)
 80011e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80011e6:	6093      	str	r3, [r2, #8]

		    	if(__DMA2_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80011e8:	4b28      	ldr	r3, [pc, #160]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011ee:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d110      	bne.n	8001218 <DMA2_Stream3_IRQHandler+0x11c>
		    	{
		    		if((__DMA2_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80011f6:	4b25      	ldr	r3, [pc, #148]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d004      	beq.n	8001210 <DMA2_Stream3_IRQHandler+0x114>
		    		{
		    			__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001206:	4b21      	ldr	r3, [pc, #132]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800120c:	4798      	blx	r3
 800120e:	e003      	b.n	8001218 <DMA2_Stream3_IRQHandler+0x11c>
		    		}
		    		else
		    		{
		    			__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001210:	4b1e      	ldr	r3, [pc, #120]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001216:	4798      	blx	r3
		    }
		}

	}

	if(DMA_LISR & DMA_LISR_TCIF3)
 8001218:	4b1b      	ldr	r3, [pc, #108]	@ (8001288 <DMA2_Stream3_IRQHandler+0x18c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d02d      	beq.n	8001280 <DMA2_Stream3_IRQHandler+0x184>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8001224:	4b19      	ldr	r3, [pc, #100]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	2210      	movs	r2, #16
 800122c:	4013      	ands	r3, r2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d026      	beq.n	8001280 <DMA2_Stream3_IRQHandler+0x184>
		{
		    if (__DMA2_Stream3_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001232:	4b16      	ldr	r3, [pc, #88]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001238:	2b00      	cmp	r3, #0
 800123a:	d021      	beq.n	8001280 <DMA2_Stream3_IRQHandler+0x184>
		    {
		    	__DMA2_Stream3_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 800123c:	4b13      	ldr	r3, [pc, #76]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001242:	4798      	blx	r3
		    	DMA2 -> LIFCR |= DMA_LIFCR_CTCIF3;
 8001244:	4b0f      	ldr	r3, [pc, #60]	@ (8001284 <DMA2_Stream3_IRQHandler+0x188>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	4a0e      	ldr	r2, [pc, #56]	@ (8001284 <DMA2_Stream3_IRQHandler+0x188>)
 800124a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800124e:	6093      	str	r3, [r2, #8]

		    	if(__DMA2_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001250:	4b0e      	ldr	r3, [pc, #56]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001256:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800125a:	4293      	cmp	r3, r2
 800125c:	d110      	bne.n	8001280 <DMA2_Stream3_IRQHandler+0x184>
		    	{
		    		if((__DMA2_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800125e:	4b0b      	ldr	r3, [pc, #44]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d004      	beq.n	8001278 <DMA2_Stream3_IRQHandler+0x17c>
		    		{
		    			__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800126e:	4b07      	ldr	r3, [pc, #28]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001274:	4798      	blx	r3
		    		}
		    	}
		    }
		}
	}
}
 8001276:	e003      	b.n	8001280 <DMA2_Stream3_IRQHandler+0x184>
		    			__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001278:	4b04      	ldr	r3, [pc, #16]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800127e:	4798      	blx	r3
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40026400 	.word	0x40026400
 8001288:	20000070 	.word	0x20000070
 800128c:	2000005c 	.word	0x2000005c

08001290 <DMA2_Stream4_IRQHandler>:

void DMA2_Stream4_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 8001294:	4b4f      	ldr	r3, [pc, #316]	@ (80013d4 <DMA2_Stream4_IRQHandler+0x144>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	4a4f      	ldr	r2, [pc, #316]	@ (80013d8 <DMA2_Stream4_IRQHandler+0x148>)
 800129a:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF4)
 800129c:	4b4e      	ldr	r3, [pc, #312]	@ (80013d8 <DMA2_Stream4_IRQHandler+0x148>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d00e      	beq.n	80012c6 <DMA2_Stream4_IRQHandler+0x36>
	{
	    if (__DMA2_Stream4_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80012a8:	4b4c      	ldr	r3, [pc, #304]	@ (80013dc <DMA2_Stream4_IRQHandler+0x14c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d009      	beq.n	80012c6 <DMA2_Stream4_IRQHandler+0x36>
	    {
	    	__DMA2_Stream4_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80012b2:	4b4a      	ldr	r3, [pc, #296]	@ (80013dc <DMA2_Stream4_IRQHandler+0x14c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012b8:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_HIFCR_CFEIF5;
 80012ba:	4b46      	ldr	r3, [pc, #280]	@ (80013d4 <DMA2_Stream4_IRQHandler+0x144>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	4a45      	ldr	r2, [pc, #276]	@ (80013d4 <DMA2_Stream4_IRQHandler+0x144>)
 80012c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012c4:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_HISR & DMA_HISR_DMEIF4)
 80012c6:	4b44      	ldr	r3, [pc, #272]	@ (80013d8 <DMA2_Stream4_IRQHandler+0x148>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0304 	and.w	r3, r3, #4
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d00e      	beq.n	80012f0 <DMA2_Stream4_IRQHandler+0x60>
	{
	    if (__DMA2_Stream4_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80012d2:	4b42      	ldr	r3, [pc, #264]	@ (80013dc <DMA2_Stream4_IRQHandler+0x14c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d009      	beq.n	80012f0 <DMA2_Stream4_IRQHandler+0x60>
	    {
	    	__DMA2_Stream4_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80012dc:	4b3f      	ldr	r3, [pc, #252]	@ (80013dc <DMA2_Stream4_IRQHandler+0x14c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e2:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 80012e4:	4b3b      	ldr	r3, [pc, #236]	@ (80013d4 <DMA2_Stream4_IRQHandler+0x144>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	4a3a      	ldr	r2, [pc, #232]	@ (80013d4 <DMA2_Stream4_IRQHandler+0x144>)
 80012ea:	f043 0304 	orr.w	r3, r3, #4
 80012ee:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_TEIF4)
 80012f0:	4b39      	ldr	r3, [pc, #228]	@ (80013d8 <DMA2_Stream4_IRQHandler+0x148>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0308 	and.w	r3, r3, #8
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d00e      	beq.n	800131a <DMA2_Stream4_IRQHandler+0x8a>
	{
	    if (__DMA2_Stream4_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80012fc:	4b37      	ldr	r3, [pc, #220]	@ (80013dc <DMA2_Stream4_IRQHandler+0x14c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001302:	2b00      	cmp	r3, #0
 8001304:	d009      	beq.n	800131a <DMA2_Stream4_IRQHandler+0x8a>
	    {
	    	__DMA2_Stream4_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001306:	4b35      	ldr	r3, [pc, #212]	@ (80013dc <DMA2_Stream4_IRQHandler+0x14c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130c:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CTEIF4;
 800130e:	4b31      	ldr	r3, [pc, #196]	@ (80013d4 <DMA2_Stream4_IRQHandler+0x144>)
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	4a30      	ldr	r2, [pc, #192]	@ (80013d4 <DMA2_Stream4_IRQHandler+0x144>)
 8001314:	f043 0308 	orr.w	r3, r3, #8
 8001318:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_HTIF4)
 800131a:	4b2f      	ldr	r3, [pc, #188]	@ (80013d8 <DMA2_Stream4_IRQHandler+0x148>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0310 	and.w	r3, r3, #16
 8001322:	2b00      	cmp	r3, #0
 8001324:	d026      	beq.n	8001374 <DMA2_Stream4_IRQHandler+0xe4>
	{
	    if (__DMA2_Stream4_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001326:	4b2d      	ldr	r3, [pc, #180]	@ (80013dc <DMA2_Stream4_IRQHandler+0x14c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800132c:	2b00      	cmp	r3, #0
 800132e:	d021      	beq.n	8001374 <DMA2_Stream4_IRQHandler+0xe4>
	    {
	    	__DMA2_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001330:	4b2a      	ldr	r3, [pc, #168]	@ (80013dc <DMA2_Stream4_IRQHandler+0x14c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001336:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CHTIF4;
 8001338:	4b26      	ldr	r3, [pc, #152]	@ (80013d4 <DMA2_Stream4_IRQHandler+0x144>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	4a25      	ldr	r2, [pc, #148]	@ (80013d4 <DMA2_Stream4_IRQHandler+0x144>)
 800133e:	f043 0310 	orr.w	r3, r3, #16
 8001342:	60d3      	str	r3, [r2, #12]

	    	if(__DMA2_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001344:	4b25      	ldr	r3, [pc, #148]	@ (80013dc <DMA2_Stream4_IRQHandler+0x14c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800134a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800134e:	4293      	cmp	r3, r2
 8001350:	d110      	bne.n	8001374 <DMA2_Stream4_IRQHandler+0xe4>
	    	{
	    		if((__DMA2_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001352:	4b22      	ldr	r3, [pc, #136]	@ (80013dc <DMA2_Stream4_IRQHandler+0x14c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d004      	beq.n	800136c <DMA2_Stream4_IRQHandler+0xdc>
	    		{
	    			__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001362:	4b1e      	ldr	r3, [pc, #120]	@ (80013dc <DMA2_Stream4_IRQHandler+0x14c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001368:	4798      	blx	r3
 800136a:	e003      	b.n	8001374 <DMA2_Stream4_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800136c:	4b1b      	ldr	r3, [pc, #108]	@ (80013dc <DMA2_Stream4_IRQHandler+0x14c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001372:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_HISR & DMA_HISR_TCIF4)
 8001374:	4b18      	ldr	r3, [pc, #96]	@ (80013d8 <DMA2_Stream4_IRQHandler+0x148>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0320 	and.w	r3, r3, #32
 800137c:	2b00      	cmp	r3, #0
 800137e:	d026      	beq.n	80013ce <DMA2_Stream4_IRQHandler+0x13e>
	{
	    if (__DMA2_Stream4_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001380:	4b16      	ldr	r3, [pc, #88]	@ (80013dc <DMA2_Stream4_IRQHandler+0x14c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001386:	2b00      	cmp	r3, #0
 8001388:	d021      	beq.n	80013ce <DMA2_Stream4_IRQHandler+0x13e>
	    {
	    	__DMA2_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800138a:	4b14      	ldr	r3, [pc, #80]	@ (80013dc <DMA2_Stream4_IRQHandler+0x14c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001390:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CTCIF4;
 8001392:	4b10      	ldr	r3, [pc, #64]	@ (80013d4 <DMA2_Stream4_IRQHandler+0x144>)
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	4a0f      	ldr	r2, [pc, #60]	@ (80013d4 <DMA2_Stream4_IRQHandler+0x144>)
 8001398:	f043 0320 	orr.w	r3, r3, #32
 800139c:	60d3      	str	r3, [r2, #12]

	    	if(__DMA2_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800139e:	4b0f      	ldr	r3, [pc, #60]	@ (80013dc <DMA2_Stream4_IRQHandler+0x14c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013a4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d110      	bne.n	80013ce <DMA2_Stream4_IRQHandler+0x13e>
	    	{
	    		if((__DMA2_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80013ac:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <DMA2_Stream4_IRQHandler+0x14c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d004      	beq.n	80013c6 <DMA2_Stream4_IRQHandler+0x136>
	    		{
	    			__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80013bc:	4b07      	ldr	r3, [pc, #28]	@ (80013dc <DMA2_Stream4_IRQHandler+0x14c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013c2:	4798      	blx	r3
	    			__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 80013c4:	e003      	b.n	80013ce <DMA2_Stream4_IRQHandler+0x13e>
	    			__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80013c6:	4b05      	ldr	r3, [pc, #20]	@ (80013dc <DMA2_Stream4_IRQHandler+0x14c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013cc:	4798      	blx	r3
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40026400 	.word	0x40026400
 80013d8:	20000074 	.word	0x20000074
 80013dc:	20000060 	.word	0x20000060

080013e0 <DMA2_Stream5_IRQHandler>:




void DMA2_Stream5_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 80013e4:	4b4f      	ldr	r3, [pc, #316]	@ (8001524 <DMA2_Stream5_IRQHandler+0x144>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	4a4f      	ldr	r2, [pc, #316]	@ (8001528 <DMA2_Stream5_IRQHandler+0x148>)
 80013ea:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF5)
 80013ec:	4b4e      	ldr	r3, [pc, #312]	@ (8001528 <DMA2_Stream5_IRQHandler+0x148>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d00e      	beq.n	8001416 <DMA2_Stream5_IRQHandler+0x36>
	{
	    if (__DMA2_Stream5_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80013f8:	4b4c      	ldr	r3, [pc, #304]	@ (800152c <DMA2_Stream5_IRQHandler+0x14c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d009      	beq.n	8001416 <DMA2_Stream5_IRQHandler+0x36>
	    {
	    	__DMA2_Stream5_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001402:	4b4a      	ldr	r3, [pc, #296]	@ (800152c <DMA2_Stream5_IRQHandler+0x14c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001408:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CFEIF5;
 800140a:	4b46      	ldr	r3, [pc, #280]	@ (8001524 <DMA2_Stream5_IRQHandler+0x144>)
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	4a45      	ldr	r2, [pc, #276]	@ (8001524 <DMA2_Stream5_IRQHandler+0x144>)
 8001410:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001414:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_DMEIF5)
 8001416:	4b44      	ldr	r3, [pc, #272]	@ (8001528 <DMA2_Stream5_IRQHandler+0x148>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800141e:	2b00      	cmp	r3, #0
 8001420:	d00e      	beq.n	8001440 <DMA2_Stream5_IRQHandler+0x60>
	{
	    if (__DMA2_Stream5_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001422:	4b42      	ldr	r3, [pc, #264]	@ (800152c <DMA2_Stream5_IRQHandler+0x14c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001428:	2b00      	cmp	r3, #0
 800142a:	d009      	beq.n	8001440 <DMA2_Stream5_IRQHandler+0x60>
	    {
	    	__DMA2_Stream5_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 800142c:	4b3f      	ldr	r3, [pc, #252]	@ (800152c <DMA2_Stream5_IRQHandler+0x14c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001432:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 8001434:	4b3b      	ldr	r3, [pc, #236]	@ (8001524 <DMA2_Stream5_IRQHandler+0x144>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	4a3a      	ldr	r2, [pc, #232]	@ (8001524 <DMA2_Stream5_IRQHandler+0x144>)
 800143a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800143e:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_TEIF5)
 8001440:	4b39      	ldr	r3, [pc, #228]	@ (8001528 <DMA2_Stream5_IRQHandler+0x148>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001448:	2b00      	cmp	r3, #0
 800144a:	d00e      	beq.n	800146a <DMA2_Stream5_IRQHandler+0x8a>
	{
	    if (__DMA2_Stream5_Config__ -> ISR_Routines.Transfer_Error_ISR)
 800144c:	4b37      	ldr	r3, [pc, #220]	@ (800152c <DMA2_Stream5_IRQHandler+0x14c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001452:	2b00      	cmp	r3, #0
 8001454:	d009      	beq.n	800146a <DMA2_Stream5_IRQHandler+0x8a>
	    {
	    	__DMA2_Stream5_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001456:	4b35      	ldr	r3, [pc, #212]	@ (800152c <DMA2_Stream5_IRQHandler+0x14c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800145c:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CTEIF5;
 800145e:	4b31      	ldr	r3, [pc, #196]	@ (8001524 <DMA2_Stream5_IRQHandler+0x144>)
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	4a30      	ldr	r2, [pc, #192]	@ (8001524 <DMA2_Stream5_IRQHandler+0x144>)
 8001464:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001468:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_HTIF5)
 800146a:	4b2f      	ldr	r3, [pc, #188]	@ (8001528 <DMA2_Stream5_IRQHandler+0x148>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001472:	2b00      	cmp	r3, #0
 8001474:	d026      	beq.n	80014c4 <DMA2_Stream5_IRQHandler+0xe4>
	{
	    if (__DMA2_Stream5_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001476:	4b2d      	ldr	r3, [pc, #180]	@ (800152c <DMA2_Stream5_IRQHandler+0x14c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800147c:	2b00      	cmp	r3, #0
 800147e:	d021      	beq.n	80014c4 <DMA2_Stream5_IRQHandler+0xe4>
	    {
	    	__DMA2_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001480:	4b2a      	ldr	r3, [pc, #168]	@ (800152c <DMA2_Stream5_IRQHandler+0x14c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001486:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CHTIF5;
 8001488:	4b26      	ldr	r3, [pc, #152]	@ (8001524 <DMA2_Stream5_IRQHandler+0x144>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	4a25      	ldr	r2, [pc, #148]	@ (8001524 <DMA2_Stream5_IRQHandler+0x144>)
 800148e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001492:	60d3      	str	r3, [r2, #12]

	    	if(__DMA2_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001494:	4b25      	ldr	r3, [pc, #148]	@ (800152c <DMA2_Stream5_IRQHandler+0x14c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800149a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800149e:	4293      	cmp	r3, r2
 80014a0:	d110      	bne.n	80014c4 <DMA2_Stream5_IRQHandler+0xe4>
	    	{
	    		if((__DMA2_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80014a2:	4b22      	ldr	r3, [pc, #136]	@ (800152c <DMA2_Stream5_IRQHandler+0x14c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d004      	beq.n	80014bc <DMA2_Stream5_IRQHandler+0xdc>
	    		{
	    			__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80014b2:	4b1e      	ldr	r3, [pc, #120]	@ (800152c <DMA2_Stream5_IRQHandler+0x14c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014b8:	4798      	blx	r3
 80014ba:	e003      	b.n	80014c4 <DMA2_Stream5_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80014bc:	4b1b      	ldr	r3, [pc, #108]	@ (800152c <DMA2_Stream5_IRQHandler+0x14c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014c2:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_HISR & DMA_HISR_TCIF5)
 80014c4:	4b18      	ldr	r3, [pc, #96]	@ (8001528 <DMA2_Stream5_IRQHandler+0x148>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d026      	beq.n	800151e <DMA2_Stream5_IRQHandler+0x13e>
	{
	    if (__DMA2_Stream5_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80014d0:	4b16      	ldr	r3, [pc, #88]	@ (800152c <DMA2_Stream5_IRQHandler+0x14c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d021      	beq.n	800151e <DMA2_Stream5_IRQHandler+0x13e>
	    {
	    	__DMA2_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80014da:	4b14      	ldr	r3, [pc, #80]	@ (800152c <DMA2_Stream5_IRQHandler+0x14c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014e0:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CTCIF5;
 80014e2:	4b10      	ldr	r3, [pc, #64]	@ (8001524 <DMA2_Stream5_IRQHandler+0x144>)
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001524 <DMA2_Stream5_IRQHandler+0x144>)
 80014e8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80014ec:	60d3      	str	r3, [r2, #12]

	    	if(__DMA2_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80014ee:	4b0f      	ldr	r3, [pc, #60]	@ (800152c <DMA2_Stream5_IRQHandler+0x14c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014f4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d110      	bne.n	800151e <DMA2_Stream5_IRQHandler+0x13e>
	    	{
	    		if((__DMA2_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80014fc:	4b0b      	ldr	r3, [pc, #44]	@ (800152c <DMA2_Stream5_IRQHandler+0x14c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d004      	beq.n	8001516 <DMA2_Stream5_IRQHandler+0x136>
	    		{
	    			__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800150c:	4b07      	ldr	r3, [pc, #28]	@ (800152c <DMA2_Stream5_IRQHandler+0x14c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001512:	4798      	blx	r3
	    			__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 8001514:	e003      	b.n	800151e <DMA2_Stream5_IRQHandler+0x13e>
	    			__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001516:	4b05      	ldr	r3, [pc, #20]	@ (800152c <DMA2_Stream5_IRQHandler+0x14c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800151c:	4798      	blx	r3
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40026400 	.word	0x40026400
 8001528:	20000074 	.word	0x20000074
 800152c:	20000064 	.word	0x20000064

08001530 <DMA2_Stream6_IRQHandler>:



void DMA2_Stream6_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 8001534:	4b4f      	ldr	r3, [pc, #316]	@ (8001674 <DMA2_Stream6_IRQHandler+0x144>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	4a4f      	ldr	r2, [pc, #316]	@ (8001678 <DMA2_Stream6_IRQHandler+0x148>)
 800153a:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF6)
 800153c:	4b4e      	ldr	r3, [pc, #312]	@ (8001678 <DMA2_Stream6_IRQHandler+0x148>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d00e      	beq.n	8001566 <DMA2_Stream6_IRQHandler+0x36>
	{
	    if (__DMA2_Stream6_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001548:	4b4c      	ldr	r3, [pc, #304]	@ (800167c <DMA2_Stream6_IRQHandler+0x14c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800154e:	2b00      	cmp	r3, #0
 8001550:	d009      	beq.n	8001566 <DMA2_Stream6_IRQHandler+0x36>
	    {
	    	__DMA2_Stream6_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001552:	4b4a      	ldr	r3, [pc, #296]	@ (800167c <DMA2_Stream6_IRQHandler+0x14c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001558:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CFEIF6;
 800155a:	4b46      	ldr	r3, [pc, #280]	@ (8001674 <DMA2_Stream6_IRQHandler+0x144>)
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	4a45      	ldr	r2, [pc, #276]	@ (8001674 <DMA2_Stream6_IRQHandler+0x144>)
 8001560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001564:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_DMEIF6)
 8001566:	4b44      	ldr	r3, [pc, #272]	@ (8001678 <DMA2_Stream6_IRQHandler+0x148>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d00e      	beq.n	8001590 <DMA2_Stream6_IRQHandler+0x60>
	{
	    if (__DMA2_Stream6_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001572:	4b42      	ldr	r3, [pc, #264]	@ (800167c <DMA2_Stream6_IRQHandler+0x14c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001578:	2b00      	cmp	r3, #0
 800157a:	d009      	beq.n	8001590 <DMA2_Stream6_IRQHandler+0x60>
	    {
	    	__DMA2_Stream6_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 800157c:	4b3f      	ldr	r3, [pc, #252]	@ (800167c <DMA2_Stream6_IRQHandler+0x14c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001582:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 8001584:	4b3b      	ldr	r3, [pc, #236]	@ (8001674 <DMA2_Stream6_IRQHandler+0x144>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	4a3a      	ldr	r2, [pc, #232]	@ (8001674 <DMA2_Stream6_IRQHandler+0x144>)
 800158a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800158e:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_TEIF6)
 8001590:	4b39      	ldr	r3, [pc, #228]	@ (8001678 <DMA2_Stream6_IRQHandler+0x148>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d00e      	beq.n	80015ba <DMA2_Stream6_IRQHandler+0x8a>
	{
	    if (__DMA2_Stream6_Config__ -> ISR_Routines.Transfer_Error_ISR)
 800159c:	4b37      	ldr	r3, [pc, #220]	@ (800167c <DMA2_Stream6_IRQHandler+0x14c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d009      	beq.n	80015ba <DMA2_Stream6_IRQHandler+0x8a>
	    {
	    	__DMA2_Stream6_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80015a6:	4b35      	ldr	r3, [pc, #212]	@ (800167c <DMA2_Stream6_IRQHandler+0x14c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ac:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CTEIF6;
 80015ae:	4b31      	ldr	r3, [pc, #196]	@ (8001674 <DMA2_Stream6_IRQHandler+0x144>)
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	4a30      	ldr	r2, [pc, #192]	@ (8001674 <DMA2_Stream6_IRQHandler+0x144>)
 80015b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80015b8:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_HTIF6)
 80015ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001678 <DMA2_Stream6_IRQHandler+0x148>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d026      	beq.n	8001614 <DMA2_Stream6_IRQHandler+0xe4>
	{
	    if (__DMA2_Stream6_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80015c6:	4b2d      	ldr	r3, [pc, #180]	@ (800167c <DMA2_Stream6_IRQHandler+0x14c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d021      	beq.n	8001614 <DMA2_Stream6_IRQHandler+0xe4>
	    {
	    	__DMA2_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80015d0:	4b2a      	ldr	r3, [pc, #168]	@ (800167c <DMA2_Stream6_IRQHandler+0x14c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015d6:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CHTIF6;
 80015d8:	4b26      	ldr	r3, [pc, #152]	@ (8001674 <DMA2_Stream6_IRQHandler+0x144>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	4a25      	ldr	r2, [pc, #148]	@ (8001674 <DMA2_Stream6_IRQHandler+0x144>)
 80015de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80015e2:	60d3      	str	r3, [r2, #12]

	    	if(__DMA2_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80015e4:	4b25      	ldr	r3, [pc, #148]	@ (800167c <DMA2_Stream6_IRQHandler+0x14c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015ea:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d110      	bne.n	8001614 <DMA2_Stream6_IRQHandler+0xe4>
	    	{
	    		if((__DMA2_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80015f2:	4b22      	ldr	r3, [pc, #136]	@ (800167c <DMA2_Stream6_IRQHandler+0x14c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d004      	beq.n	800160c <DMA2_Stream6_IRQHandler+0xdc>
	    		{
	    			__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001602:	4b1e      	ldr	r3, [pc, #120]	@ (800167c <DMA2_Stream6_IRQHandler+0x14c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001608:	4798      	blx	r3
 800160a:	e003      	b.n	8001614 <DMA2_Stream6_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800160c:	4b1b      	ldr	r3, [pc, #108]	@ (800167c <DMA2_Stream6_IRQHandler+0x14c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001612:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_HISR & DMA_HISR_TCIF6)
 8001614:	4b18      	ldr	r3, [pc, #96]	@ (8001678 <DMA2_Stream6_IRQHandler+0x148>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d026      	beq.n	800166e <DMA2_Stream6_IRQHandler+0x13e>
	{
	    if (__DMA2_Stream6_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001620:	4b16      	ldr	r3, [pc, #88]	@ (800167c <DMA2_Stream6_IRQHandler+0x14c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001626:	2b00      	cmp	r3, #0
 8001628:	d021      	beq.n	800166e <DMA2_Stream6_IRQHandler+0x13e>
	    {
	    	__DMA2_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800162a:	4b14      	ldr	r3, [pc, #80]	@ (800167c <DMA2_Stream6_IRQHandler+0x14c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001630:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CTCIF6;
 8001632:	4b10      	ldr	r3, [pc, #64]	@ (8001674 <DMA2_Stream6_IRQHandler+0x144>)
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	4a0f      	ldr	r2, [pc, #60]	@ (8001674 <DMA2_Stream6_IRQHandler+0x144>)
 8001638:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800163c:	60d3      	str	r3, [r2, #12]

	    	if(__DMA2_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800163e:	4b0f      	ldr	r3, [pc, #60]	@ (800167c <DMA2_Stream6_IRQHandler+0x14c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001644:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001648:	4293      	cmp	r3, r2
 800164a:	d110      	bne.n	800166e <DMA2_Stream6_IRQHandler+0x13e>
	    	{
	    		if((__DMA2_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800164c:	4b0b      	ldr	r3, [pc, #44]	@ (800167c <DMA2_Stream6_IRQHandler+0x14c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d004      	beq.n	8001666 <DMA2_Stream6_IRQHandler+0x136>
	    		{
	    			__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800165c:	4b07      	ldr	r3, [pc, #28]	@ (800167c <DMA2_Stream6_IRQHandler+0x14c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001662:	4798      	blx	r3
	    			__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 8001664:	e003      	b.n	800166e <DMA2_Stream6_IRQHandler+0x13e>
	    			__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001666:	4b05      	ldr	r3, [pc, #20]	@ (800167c <DMA2_Stream6_IRQHandler+0x14c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800166c:	4798      	blx	r3
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40026400 	.word	0x40026400
 8001678:	20000074 	.word	0x20000074
 800167c:	20000068 	.word	0x20000068

08001680 <DMA2_Stream7_IRQHandler>:


void DMA2_Stream7_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 8001684:	4b4f      	ldr	r3, [pc, #316]	@ (80017c4 <DMA2_Stream7_IRQHandler+0x144>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	4a4f      	ldr	r2, [pc, #316]	@ (80017c8 <DMA2_Stream7_IRQHandler+0x148>)
 800168a:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF7)
 800168c:	4b4e      	ldr	r3, [pc, #312]	@ (80017c8 <DMA2_Stream7_IRQHandler+0x148>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d00e      	beq.n	80016b6 <DMA2_Stream7_IRQHandler+0x36>
	{
	    if (__DMA2_Stream7_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001698:	4b4c      	ldr	r3, [pc, #304]	@ (80017cc <DMA2_Stream7_IRQHandler+0x14c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d009      	beq.n	80016b6 <DMA2_Stream7_IRQHandler+0x36>
	    {
	    	__DMA2_Stream7_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80016a2:	4b4a      	ldr	r3, [pc, #296]	@ (80017cc <DMA2_Stream7_IRQHandler+0x14c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016a8:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CFEIF7;
 80016aa:	4b46      	ldr	r3, [pc, #280]	@ (80017c4 <DMA2_Stream7_IRQHandler+0x144>)
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	4a45      	ldr	r2, [pc, #276]	@ (80017c4 <DMA2_Stream7_IRQHandler+0x144>)
 80016b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016b4:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_DMEIF7)
 80016b6:	4b44      	ldr	r3, [pc, #272]	@ (80017c8 <DMA2_Stream7_IRQHandler+0x148>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00e      	beq.n	80016e0 <DMA2_Stream7_IRQHandler+0x60>
	{
	    if (__DMA2_Stream7_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80016c2:	4b42      	ldr	r3, [pc, #264]	@ (80017cc <DMA2_Stream7_IRQHandler+0x14c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d009      	beq.n	80016e0 <DMA2_Stream7_IRQHandler+0x60>
	    {
	    	__DMA2_Stream7_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80016cc:	4b3f      	ldr	r3, [pc, #252]	@ (80017cc <DMA2_Stream7_IRQHandler+0x14c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d2:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 80016d4:	4b3b      	ldr	r3, [pc, #236]	@ (80017c4 <DMA2_Stream7_IRQHandler+0x144>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	4a3a      	ldr	r2, [pc, #232]	@ (80017c4 <DMA2_Stream7_IRQHandler+0x144>)
 80016da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016de:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_TEIF7)
 80016e0:	4b39      	ldr	r3, [pc, #228]	@ (80017c8 <DMA2_Stream7_IRQHandler+0x148>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d00e      	beq.n	800170a <DMA2_Stream7_IRQHandler+0x8a>
	{
	    if (__DMA2_Stream7_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80016ec:	4b37      	ldr	r3, [pc, #220]	@ (80017cc <DMA2_Stream7_IRQHandler+0x14c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d009      	beq.n	800170a <DMA2_Stream7_IRQHandler+0x8a>
	    {
	    	__DMA2_Stream7_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80016f6:	4b35      	ldr	r3, [pc, #212]	@ (80017cc <DMA2_Stream7_IRQHandler+0x14c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fc:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CTEIF7;
 80016fe:	4b31      	ldr	r3, [pc, #196]	@ (80017c4 <DMA2_Stream7_IRQHandler+0x144>)
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	4a30      	ldr	r2, [pc, #192]	@ (80017c4 <DMA2_Stream7_IRQHandler+0x144>)
 8001704:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001708:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_HTIF7)
 800170a:	4b2f      	ldr	r3, [pc, #188]	@ (80017c8 <DMA2_Stream7_IRQHandler+0x148>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d026      	beq.n	8001764 <DMA2_Stream7_IRQHandler+0xe4>
	{
	    if (__DMA2_Stream7_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001716:	4b2d      	ldr	r3, [pc, #180]	@ (80017cc <DMA2_Stream7_IRQHandler+0x14c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800171c:	2b00      	cmp	r3, #0
 800171e:	d021      	beq.n	8001764 <DMA2_Stream7_IRQHandler+0xe4>
	    {
	    	__DMA2_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001720:	4b2a      	ldr	r3, [pc, #168]	@ (80017cc <DMA2_Stream7_IRQHandler+0x14c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001726:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CHTIF7;
 8001728:	4b26      	ldr	r3, [pc, #152]	@ (80017c4 <DMA2_Stream7_IRQHandler+0x144>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	4a25      	ldr	r2, [pc, #148]	@ (80017c4 <DMA2_Stream7_IRQHandler+0x144>)
 800172e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001732:	60d3      	str	r3, [r2, #12]

	    	if(__DMA2_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001734:	4b25      	ldr	r3, [pc, #148]	@ (80017cc <DMA2_Stream7_IRQHandler+0x14c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800173a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800173e:	4293      	cmp	r3, r2
 8001740:	d110      	bne.n	8001764 <DMA2_Stream7_IRQHandler+0xe4>
	    	{
	    		if((__DMA2_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001742:	4b22      	ldr	r3, [pc, #136]	@ (80017cc <DMA2_Stream7_IRQHandler+0x14c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d004      	beq.n	800175c <DMA2_Stream7_IRQHandler+0xdc>
	    		{
	    			__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001752:	4b1e      	ldr	r3, [pc, #120]	@ (80017cc <DMA2_Stream7_IRQHandler+0x14c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001758:	4798      	blx	r3
 800175a:	e003      	b.n	8001764 <DMA2_Stream7_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800175c:	4b1b      	ldr	r3, [pc, #108]	@ (80017cc <DMA2_Stream7_IRQHandler+0x14c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001762:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_HISR & DMA_HISR_TCIF7)
 8001764:	4b18      	ldr	r3, [pc, #96]	@ (80017c8 <DMA2_Stream7_IRQHandler+0x148>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d026      	beq.n	80017be <DMA2_Stream7_IRQHandler+0x13e>
	{
	    if (__DMA2_Stream7_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001770:	4b16      	ldr	r3, [pc, #88]	@ (80017cc <DMA2_Stream7_IRQHandler+0x14c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001776:	2b00      	cmp	r3, #0
 8001778:	d021      	beq.n	80017be <DMA2_Stream7_IRQHandler+0x13e>
	    {
	    	__DMA2_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800177a:	4b14      	ldr	r3, [pc, #80]	@ (80017cc <DMA2_Stream7_IRQHandler+0x14c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001780:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CTCIF7;
 8001782:	4b10      	ldr	r3, [pc, #64]	@ (80017c4 <DMA2_Stream7_IRQHandler+0x144>)
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	4a0f      	ldr	r2, [pc, #60]	@ (80017c4 <DMA2_Stream7_IRQHandler+0x144>)
 8001788:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800178c:	60d3      	str	r3, [r2, #12]

	    	if(__DMA2_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800178e:	4b0f      	ldr	r3, [pc, #60]	@ (80017cc <DMA2_Stream7_IRQHandler+0x14c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001794:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001798:	4293      	cmp	r3, r2
 800179a:	d110      	bne.n	80017be <DMA2_Stream7_IRQHandler+0x13e>
	    	{
	    		if((__DMA2_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800179c:	4b0b      	ldr	r3, [pc, #44]	@ (80017cc <DMA2_Stream7_IRQHandler+0x14c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d004      	beq.n	80017b6 <DMA2_Stream7_IRQHandler+0x136>
	    		{
	    			__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80017ac:	4b07      	ldr	r3, [pc, #28]	@ (80017cc <DMA2_Stream7_IRQHandler+0x14c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017b2:	4798      	blx	r3
	    			__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 80017b4:	e003      	b.n	80017be <DMA2_Stream7_IRQHandler+0x13e>
	    			__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80017b6:	4b05      	ldr	r3, [pc, #20]	@ (80017cc <DMA2_Stream7_IRQHandler+0x14c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017bc:	4798      	blx	r3
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40026400 	.word	0x40026400
 80017c8:	20000074 	.word	0x20000074
 80017cc:	2000006c 	.word	0x2000006c

080017d0 <DMA_Clock_Enable>:
 * the RCC AHB1 peripheral clock enable register.
 *
 * @param[in] config Pointer to the `DMA_Config` structure that contains the DMA controller configuration.
 */
void DMA_Clock_Enable(DMA_Config *config)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	if(config -> Request.Controller == DMA1){
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0c      	ldr	r2, [pc, #48]	@ (8001810 <DMA_Clock_Enable+0x40>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d105      	bne.n	80017ee <DMA_Clock_Enable+0x1e>
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 80017e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001814 <DMA_Clock_Enable+0x44>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001814 <DMA_Clock_Enable+0x44>)
 80017e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017ec:	6313      	str	r3, [r2, #48]	@ 0x30
	}
	if(config -> Request.Controller == DMA2)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a09      	ldr	r2, [pc, #36]	@ (8001818 <DMA_Clock_Enable+0x48>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d105      	bne.n	8001804 <DMA_Clock_Enable+0x34>
		{
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 80017f8:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <DMA_Clock_Enable+0x44>)
 80017fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fc:	4a05      	ldr	r2, [pc, #20]	@ (8001814 <DMA_Clock_Enable+0x44>)
 80017fe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001802:	6313      	str	r3, [r2, #48]	@ 0x30
		}
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	40026000 	.word	0x40026000
 8001814:	40023800 	.word	0x40023800
 8001818:	40026400 	.word	0x40026400

0800181c <DMA_Init>:
 * @param[in] config Pointer to the `DMA_Config` structure containing the configuration parameters.
 *
 * @return int8_t Returns 1 on successful initialization, or -1 if an error occurs.
 */
int8_t DMA_Init(DMA_Config *config)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
//	DMA_Clock_Disable(config);
    DMA_Clock_Enable(config);  // Enable the clock for the specified DMA controller
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff ffd3 	bl	80017d0 <DMA_Clock_Enable>

    if (config->Request.Stream->CR & DMA_SxCR_EN)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	2b00      	cmp	r3, #0
 8001836:	d00f      	beq.n	8001858 <DMA_Init+0x3c>
    {
    	config->Request.Stream->CR &= ~DMA_SxCR_EN;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f022 0201 	bic.w	r2, r2, #1
 8001846:	601a      	str	r2, [r3, #0]
        while (config->Request.Stream->CR & DMA_SxCR_EN);  // Wait until disabled
 8001848:	bf00      	nop
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1f8      	bne.n	800184a <DMA_Init+0x2e>
    }


    config->Request.Stream->CR |= config->Request.channel << DMA_SxCR_CHSEL_Pos;  // Set the DMA channel
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	6819      	ldr	r1, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	7a1b      	ldrb	r3, [r3, #8]
 8001862:	065a      	lsls	r2, r3, #25
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	430a      	orrs	r2, r1
 800186a:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->circular_mode;  // Configure circular mode
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	6819      	ldr	r1, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	699a      	ldr	r2, [r3, #24]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	430a      	orrs	r2, r1
 800187c:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->flow_control;  // Set flow control
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	6819      	ldr	r1, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68da      	ldr	r2, [r3, #12]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	430a      	orrs	r2, r1
 800188e:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->priority_level;  // Set priority level
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	6819      	ldr	r1, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	695a      	ldr	r2, [r3, #20]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	430a      	orrs	r2, r1
 80018a0:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->memory_data_size;  // Set memory data size
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	6819      	ldr	r1, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	430a      	orrs	r2, r1
 80018b2:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->peripheral_data_size;  // Set peripheral data size
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	6819      	ldr	r1, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->transfer_direction;  // Set transfer direction
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	6819      	ldr	r1, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	691a      	ldr	r2, [r3, #16]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	601a      	str	r2, [r3, #0]

    // Configure DMA interrupts if enabled


     if(config->interrupts != DMA_Configuration.DMA_Interrupts.Disable)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	69db      	ldr	r3, [r3, #28]
 80018dc:	2200      	movs	r2, #0
 80018de:	4293      	cmp	r3, r2
 80018e0:	f000 8110 	beq.w	8001b04 <DMA_Init+0x2e8>
    {

        if(config->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69db      	ldr	r3, [r3, #28]
 80018e8:	2280      	movs	r2, #128	@ 0x80
 80018ea:	4013      	ands	r3, r2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d008      	beq.n	8001902 <DMA_Init+0xe6>
        {
        	config->Request.Stream->FCR |= config->interrupts;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	6959      	ldr	r1, [r3, #20]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69da      	ldr	r2, [r3, #28]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	430a      	orrs	r2, r1
 8001900:	615a      	str	r2, [r3, #20]
        }

        if(config->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	2210      	movs	r2, #16
 8001908:	4013      	ands	r3, r2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d007      	beq.n	800191e <DMA_Init+0x102>
        {
        	config->Request.Stream->CR |= DMA_SxCR_TCIE;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f042 0210 	orr.w	r2, r2, #16
 800191c:	601a      	str	r2, [r3, #0]
        }

        if(config->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	2208      	movs	r2, #8
 8001924:	4013      	ands	r3, r2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d007      	beq.n	800193a <DMA_Init+0x11e>
        {
        	config->Request.Stream->CR |= DMA_SxCR_HTIE;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f042 0208 	orr.w	r2, r2, #8
 8001938:	601a      	str	r2, [r3, #0]
        }

        if(config->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	2204      	movs	r2, #4
 8001940:	4013      	ands	r3, r2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d007      	beq.n	8001956 <DMA_Init+0x13a>
        {
        	config->Request.Stream->CR |= DMA_SxCR_TEIE;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f042 0204 	orr.w	r2, r2, #4
 8001954:	601a      	str	r2, [r3, #0]
        }
        if(config->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	2202      	movs	r2, #2
 800195c:	4013      	ands	r3, r2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d007      	beq.n	8001972 <DMA_Init+0x156>
        {
        	config->Request.Stream->CR |= DMA_SxCR_DMEIE;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f042 0202 	orr.w	r2, r2, #2
 8001970:	601a      	str	r2, [r3, #0]
        }

        // Enable the corresponding NVIC interrupt for the DMA stream
        if(config->Request.Controller == DMA1)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a80      	ldr	r2, [pc, #512]	@ (8001b78 <DMA_Init+0x35c>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d15f      	bne.n	8001a3c <DMA_Init+0x220>
        {
            if(config->Request.Stream == DMA1_Stream0){
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	4a7e      	ldr	r2, [pc, #504]	@ (8001b7c <DMA_Init+0x360>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d106      	bne.n	8001994 <DMA_Init+0x178>
            	__DMA1_Stream0_Config__ = config;
 8001986:	4a7e      	ldr	r2, [pc, #504]	@ (8001b80 <DMA_Init+0x364>)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800198c:	200b      	movs	r0, #11
 800198e:	f7fe fc1b 	bl	80001c8 <__NVIC_EnableIRQ>
 8001992:	e0b7      	b.n	8001b04 <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA1_Stream1){
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	4a7a      	ldr	r2, [pc, #488]	@ (8001b84 <DMA_Init+0x368>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d106      	bne.n	80019ac <DMA_Init+0x190>
            	__DMA1_Stream1_Config__ = config;
 800199e:	4a7a      	ldr	r2, [pc, #488]	@ (8001b88 <DMA_Init+0x36c>)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80019a4:	200c      	movs	r0, #12
 80019a6:	f7fe fc0f 	bl	80001c8 <__NVIC_EnableIRQ>
 80019aa:	e0ab      	b.n	8001b04 <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA1_Stream2){
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	4a76      	ldr	r2, [pc, #472]	@ (8001b8c <DMA_Init+0x370>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d106      	bne.n	80019c4 <DMA_Init+0x1a8>
            	__DMA1_Stream2_Config__ = config;
 80019b6:	4a76      	ldr	r2, [pc, #472]	@ (8001b90 <DMA_Init+0x374>)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80019bc:	200d      	movs	r0, #13
 80019be:	f7fe fc03 	bl	80001c8 <__NVIC_EnableIRQ>
 80019c2:	e09f      	b.n	8001b04 <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA1_Stream3){
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	4a72      	ldr	r2, [pc, #456]	@ (8001b94 <DMA_Init+0x378>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d106      	bne.n	80019dc <DMA_Init+0x1c0>
            	__DMA1_Stream3_Config__ = config;
 80019ce:	4a72      	ldr	r2, [pc, #456]	@ (8001b98 <DMA_Init+0x37c>)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80019d4:	200e      	movs	r0, #14
 80019d6:	f7fe fbf7 	bl	80001c8 <__NVIC_EnableIRQ>
 80019da:	e093      	b.n	8001b04 <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA1_Stream4){
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	4a6e      	ldr	r2, [pc, #440]	@ (8001b9c <DMA_Init+0x380>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d106      	bne.n	80019f4 <DMA_Init+0x1d8>
            	__DMA1_Stream4_Config__ = config;
 80019e6:	4a6e      	ldr	r2, [pc, #440]	@ (8001ba0 <DMA_Init+0x384>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80019ec:	200f      	movs	r0, #15
 80019ee:	f7fe fbeb 	bl	80001c8 <__NVIC_EnableIRQ>
 80019f2:	e087      	b.n	8001b04 <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA1_Stream5){
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	4a6a      	ldr	r2, [pc, #424]	@ (8001ba4 <DMA_Init+0x388>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d106      	bne.n	8001a0c <DMA_Init+0x1f0>
            	__DMA1_Stream5_Config__ = config;
 80019fe:	4a6a      	ldr	r2, [pc, #424]	@ (8001ba8 <DMA_Init+0x38c>)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001a04:	2010      	movs	r0, #16
 8001a06:	f7fe fbdf 	bl	80001c8 <__NVIC_EnableIRQ>
 8001a0a:	e07b      	b.n	8001b04 <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA1_Stream6) {
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	4a66      	ldr	r2, [pc, #408]	@ (8001bac <DMA_Init+0x390>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d106      	bne.n	8001a24 <DMA_Init+0x208>
            	__DMA1_Stream6_Config__ = config;
 8001a16:	4a66      	ldr	r2, [pc, #408]	@ (8001bb0 <DMA_Init+0x394>)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001a1c:	2011      	movs	r0, #17
 8001a1e:	f7fe fbd3 	bl	80001c8 <__NVIC_EnableIRQ>
 8001a22:	e06f      	b.n	8001b04 <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA1_Stream7){
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	4a62      	ldr	r2, [pc, #392]	@ (8001bb4 <DMA_Init+0x398>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d16a      	bne.n	8001b04 <DMA_Init+0x2e8>
            	__DMA1_Stream7_Config__ = config;
 8001a2e:	4a62      	ldr	r2, [pc, #392]	@ (8001bb8 <DMA_Init+0x39c>)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001a34:	202f      	movs	r0, #47	@ 0x2f
 8001a36:	f7fe fbc7 	bl	80001c8 <__NVIC_EnableIRQ>
 8001a3a:	e063      	b.n	8001b04 <DMA_Init+0x2e8>
            }
        }
        else if(config->Request.Controller == DMA2)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a5e      	ldr	r2, [pc, #376]	@ (8001bbc <DMA_Init+0x3a0>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d15e      	bne.n	8001b04 <DMA_Init+0x2e8>
        {
            if(config->Request.Stream == DMA2_Stream0){
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	4a5d      	ldr	r2, [pc, #372]	@ (8001bc0 <DMA_Init+0x3a4>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d106      	bne.n	8001a5e <DMA_Init+0x242>
            	__DMA2_Stream0_Config__ = config;
 8001a50:	4a5c      	ldr	r2, [pc, #368]	@ (8001bc4 <DMA_Init+0x3a8>)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001a56:	2038      	movs	r0, #56	@ 0x38
 8001a58:	f7fe fbb6 	bl	80001c8 <__NVIC_EnableIRQ>
 8001a5c:	e052      	b.n	8001b04 <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA2_Stream1){
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	4a59      	ldr	r2, [pc, #356]	@ (8001bc8 <DMA_Init+0x3ac>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d106      	bne.n	8001a76 <DMA_Init+0x25a>
            	__DMA2_Stream1_Config__ = config;
 8001a68:	4a58      	ldr	r2, [pc, #352]	@ (8001bcc <DMA_Init+0x3b0>)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001a6e:	2039      	movs	r0, #57	@ 0x39
 8001a70:	f7fe fbaa 	bl	80001c8 <__NVIC_EnableIRQ>
 8001a74:	e046      	b.n	8001b04 <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA2_Stream2){
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	4a55      	ldr	r2, [pc, #340]	@ (8001bd0 <DMA_Init+0x3b4>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d106      	bne.n	8001a8e <DMA_Init+0x272>
            	__DMA2_Stream2_Config__ = config;
 8001a80:	4a54      	ldr	r2, [pc, #336]	@ (8001bd4 <DMA_Init+0x3b8>)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001a86:	203a      	movs	r0, #58	@ 0x3a
 8001a88:	f7fe fb9e 	bl	80001c8 <__NVIC_EnableIRQ>
 8001a8c:	e03a      	b.n	8001b04 <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA2_Stream3){
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	4a51      	ldr	r2, [pc, #324]	@ (8001bd8 <DMA_Init+0x3bc>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d106      	bne.n	8001aa6 <DMA_Init+0x28a>
            	__DMA2_Stream3_Config__ = config;
 8001a98:	4a50      	ldr	r2, [pc, #320]	@ (8001bdc <DMA_Init+0x3c0>)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001a9e:	203b      	movs	r0, #59	@ 0x3b
 8001aa0:	f7fe fb92 	bl	80001c8 <__NVIC_EnableIRQ>
 8001aa4:	e02e      	b.n	8001b04 <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA2_Stream4){
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	4a4d      	ldr	r2, [pc, #308]	@ (8001be0 <DMA_Init+0x3c4>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d106      	bne.n	8001abe <DMA_Init+0x2a2>
            	__DMA2_Stream4_Config__ = config;
 8001ab0:	4a4c      	ldr	r2, [pc, #304]	@ (8001be4 <DMA_Init+0x3c8>)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001ab6:	203c      	movs	r0, #60	@ 0x3c
 8001ab8:	f7fe fb86 	bl	80001c8 <__NVIC_EnableIRQ>
 8001abc:	e022      	b.n	8001b04 <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA2_Stream5){
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	4a49      	ldr	r2, [pc, #292]	@ (8001be8 <DMA_Init+0x3cc>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d106      	bne.n	8001ad6 <DMA_Init+0x2ba>
            	__DMA2_Stream5_Config__ = config;
 8001ac8:	4a48      	ldr	r2, [pc, #288]	@ (8001bec <DMA_Init+0x3d0>)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001ace:	2044      	movs	r0, #68	@ 0x44
 8001ad0:	f7fe fb7a 	bl	80001c8 <__NVIC_EnableIRQ>
 8001ad4:	e016      	b.n	8001b04 <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA2_Stream6){
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	4a45      	ldr	r2, [pc, #276]	@ (8001bf0 <DMA_Init+0x3d4>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d106      	bne.n	8001aee <DMA_Init+0x2d2>
            	__DMA2_Stream6_Config__ = config;
 8001ae0:	4a44      	ldr	r2, [pc, #272]	@ (8001bf4 <DMA_Init+0x3d8>)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001ae6:	2045      	movs	r0, #69	@ 0x45
 8001ae8:	f7fe fb6e 	bl	80001c8 <__NVIC_EnableIRQ>
 8001aec:	e00a      	b.n	8001b04 <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA2_Stream7){
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	4a41      	ldr	r2, [pc, #260]	@ (8001bf8 <DMA_Init+0x3dc>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d105      	bne.n	8001b04 <DMA_Init+0x2e8>
            	__DMA2_Stream7_Config__ = config;
 8001af8:	4a40      	ldr	r2, [pc, #256]	@ (8001bfc <DMA_Init+0x3e0>)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6013      	str	r3, [r2, #0]
//            	NVIC_SetPriority(DMA2_Stream7_IRQn,0);
            	NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001afe:	2046      	movs	r0, #70	@ 0x46
 8001b00:	f7fe fb62 	bl	80001c8 <__NVIC_EnableIRQ>
            }
        }
    }

    // Configure memory and peripheral pointer increments
    config->Request.Stream->CR |= config->memory_pointer_increment;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	8c1b      	ldrh	r3, [r3, #32]
 8001b0e:	4619      	mov	r1, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	430a      	orrs	r2, r1
 8001b16:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->peripheral_pointer_increment;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001b22:	4619      	mov	r1, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	601a      	str	r2, [r3, #0]

    // Configure circular mode
    if(config->circular_mode == DMA_Configuration.Circular_Mode.Enable)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d108      	bne.n	8001b4a <DMA_Init+0x32e>
    {
        config->Request.Stream->CR |= DMA_SxCR_CIRC;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	e010      	b.n	8001b6c <DMA_Init+0x350>
    }
    else if(config->circular_mode == DMA_Configuration.Circular_Mode.Disable)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d108      	bne.n	8001b66 <DMA_Init+0x34a>
    {
        config->Request.Stream->CR &= ~DMA_SxCR_CIRC;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	e002      	b.n	8001b6c <DMA_Init+0x350>
    }
    else
    {
        return -1;  // Return -1 if circular mode configuration is invalid
 8001b66:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6a:	e000      	b.n	8001b6e <DMA_Init+0x352>
    }

    return 1;  // Return 1 on successful initialization
 8001b6c:	2301      	movs	r3, #1
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40026000 	.word	0x40026000
 8001b7c:	40026010 	.word	0x40026010
 8001b80:	20000030 	.word	0x20000030
 8001b84:	40026028 	.word	0x40026028
 8001b88:	20000034 	.word	0x20000034
 8001b8c:	40026040 	.word	0x40026040
 8001b90:	20000038 	.word	0x20000038
 8001b94:	40026058 	.word	0x40026058
 8001b98:	2000003c 	.word	0x2000003c
 8001b9c:	40026070 	.word	0x40026070
 8001ba0:	20000040 	.word	0x20000040
 8001ba4:	40026088 	.word	0x40026088
 8001ba8:	20000044 	.word	0x20000044
 8001bac:	400260a0 	.word	0x400260a0
 8001bb0:	20000048 	.word	0x20000048
 8001bb4:	400260b8 	.word	0x400260b8
 8001bb8:	2000004c 	.word	0x2000004c
 8001bbc:	40026400 	.word	0x40026400
 8001bc0:	40026410 	.word	0x40026410
 8001bc4:	20000050 	.word	0x20000050
 8001bc8:	40026428 	.word	0x40026428
 8001bcc:	20000054 	.word	0x20000054
 8001bd0:	40026440 	.word	0x40026440
 8001bd4:	20000058 	.word	0x20000058
 8001bd8:	40026458 	.word	0x40026458
 8001bdc:	2000005c 	.word	0x2000005c
 8001be0:	40026470 	.word	0x40026470
 8001be4:	20000060 	.word	0x20000060
 8001be8:	40026488 	.word	0x40026488
 8001bec:	20000064 	.word	0x20000064
 8001bf0:	400264a0 	.word	0x400264a0
 8001bf4:	20000068 	.word	0x20000068
 8001bf8:	400264b8 	.word	0x400264b8
 8001bfc:	2000006c 	.word	0x2000006c

08001c00 <EXTI0_IRQHandler>:
 * @brief Interrupt handler for EXTI line 0.
 *
 * This ISR handles interrupts for pin 0, invoking the associated callback
 * function if one is registered.
 */
void EXTI0_IRQHandler(void) {
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
    if (EXTI_ISR[0]) EXTI_ISR[0](); // Invoke registered callback
 8001c04:	4b07      	ldr	r3, [pc, #28]	@ (8001c24 <EXTI0_IRQHandler+0x24>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d002      	beq.n	8001c12 <EXTI0_IRQHandler+0x12>
 8001c0c:	4b05      	ldr	r3, [pc, #20]	@ (8001c24 <EXTI0_IRQHandler+0x24>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR0;        // Clear interrupt flag
 8001c12:	4b05      	ldr	r3, [pc, #20]	@ (8001c28 <EXTI0_IRQHandler+0x28>)
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	4a04      	ldr	r2, [pc, #16]	@ (8001c28 <EXTI0_IRQHandler+0x28>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	6153      	str	r3, [r2, #20]
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000078 	.word	0x20000078
 8001c28:	40013c00 	.word	0x40013c00

08001c2c <EXTI1_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 1.
 */
void EXTI1_IRQHandler(void) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
    if (EXTI_ISR[1]) EXTI_ISR[1]();
 8001c30:	4b07      	ldr	r3, [pc, #28]	@ (8001c50 <EXTI1_IRQHandler+0x24>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d002      	beq.n	8001c3e <EXTI1_IRQHandler+0x12>
 8001c38:	4b05      	ldr	r3, [pc, #20]	@ (8001c50 <EXTI1_IRQHandler+0x24>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR1;
 8001c3e:	4b05      	ldr	r3, [pc, #20]	@ (8001c54 <EXTI1_IRQHandler+0x28>)
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	4a04      	ldr	r2, [pc, #16]	@ (8001c54 <EXTI1_IRQHandler+0x28>)
 8001c44:	f043 0302 	orr.w	r3, r3, #2
 8001c48:	6153      	str	r3, [r2, #20]
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000078 	.word	0x20000078
 8001c54:	40013c00 	.word	0x40013c00

08001c58 <EXTI2_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 2.
 */
void EXTI2_IRQHandler(void) {
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
    if (EXTI_ISR[2]) EXTI_ISR[2]();
 8001c5c:	4b07      	ldr	r3, [pc, #28]	@ (8001c7c <EXTI2_IRQHandler+0x24>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d002      	beq.n	8001c6a <EXTI2_IRQHandler+0x12>
 8001c64:	4b05      	ldr	r3, [pc, #20]	@ (8001c7c <EXTI2_IRQHandler+0x24>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR2;
 8001c6a:	4b05      	ldr	r3, [pc, #20]	@ (8001c80 <EXTI2_IRQHandler+0x28>)
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	4a04      	ldr	r2, [pc, #16]	@ (8001c80 <EXTI2_IRQHandler+0x28>)
 8001c70:	f043 0304 	orr.w	r3, r3, #4
 8001c74:	6153      	str	r3, [r2, #20]
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000078 	.word	0x20000078
 8001c80:	40013c00 	.word	0x40013c00

08001c84 <EXTI3_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 3.
 */
void EXTI3_IRQHandler(void) {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
    if (EXTI_ISR[3]) EXTI_ISR[3]();
 8001c88:	4b07      	ldr	r3, [pc, #28]	@ (8001ca8 <EXTI3_IRQHandler+0x24>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d002      	beq.n	8001c96 <EXTI3_IRQHandler+0x12>
 8001c90:	4b05      	ldr	r3, [pc, #20]	@ (8001ca8 <EXTI3_IRQHandler+0x24>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR3;
 8001c96:	4b05      	ldr	r3, [pc, #20]	@ (8001cac <EXTI3_IRQHandler+0x28>)
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	4a04      	ldr	r2, [pc, #16]	@ (8001cac <EXTI3_IRQHandler+0x28>)
 8001c9c:	f043 0308 	orr.w	r3, r3, #8
 8001ca0:	6153      	str	r3, [r2, #20]
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000078 	.word	0x20000078
 8001cac:	40013c00 	.word	0x40013c00

08001cb0 <EXTI4_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 4.
 */
void EXTI4_IRQHandler(void) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
    if (EXTI_ISR[4]) EXTI_ISR[4]();
 8001cb4:	4b07      	ldr	r3, [pc, #28]	@ (8001cd4 <EXTI4_IRQHandler+0x24>)
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d002      	beq.n	8001cc2 <EXTI4_IRQHandler+0x12>
 8001cbc:	4b05      	ldr	r3, [pc, #20]	@ (8001cd4 <EXTI4_IRQHandler+0x24>)
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR4;
 8001cc2:	4b05      	ldr	r3, [pc, #20]	@ (8001cd8 <EXTI4_IRQHandler+0x28>)
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	4a04      	ldr	r2, [pc, #16]	@ (8001cd8 <EXTI4_IRQHandler+0x28>)
 8001cc8:	f043 0310 	orr.w	r3, r3, #16
 8001ccc:	6153      	str	r3, [r2, #20]
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000078 	.word	0x20000078
 8001cd8:	40013c00 	.word	0x40013c00

08001cdc <EXTI9_5_IRQHandler>:
/**
 * @brief Interrupt handler for EXTI lines 5 to 9.
 *
 * Handles interrupts for pins 5 to 9, checking each pin for active flags.
 */
void EXTI9_5_IRQHandler(void) {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
    for (int i = 5; i <= 9; ++i) {
 8001ce2:	2305      	movs	r3, #5
 8001ce4:	607b      	str	r3, [r7, #4]
 8001ce6:	e020      	b.n	8001d2a <EXTI9_5_IRQHandler+0x4e>
        if ((EXTI->PR & (1 << i)) && EXTI_ISR[i]) {
 8001ce8:	4b14      	ldr	r3, [pc, #80]	@ (8001d3c <EXTI9_5_IRQHandler+0x60>)
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	2101      	movs	r1, #1
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d014      	beq.n	8001d24 <EXTI9_5_IRQHandler+0x48>
 8001cfa:	4a11      	ldr	r2, [pc, #68]	@ (8001d40 <EXTI9_5_IRQHandler+0x64>)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00e      	beq.n	8001d24 <EXTI9_5_IRQHandler+0x48>
            EXTI_ISR[i]();        // Invoke callback for pin `i`
 8001d06:	4a0e      	ldr	r2, [pc, #56]	@ (8001d40 <EXTI9_5_IRQHandler+0x64>)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d0e:	4798      	blx	r3
            EXTI->PR |= (1 << i); // Clear interrupt flag
 8001d10:	4b0a      	ldr	r3, [pc, #40]	@ (8001d3c <EXTI9_5_IRQHandler+0x60>)
 8001d12:	695b      	ldr	r3, [r3, #20]
 8001d14:	2101      	movs	r1, #1
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	fa01 f202 	lsl.w	r2, r1, r2
 8001d1c:	4611      	mov	r1, r2
 8001d1e:	4a07      	ldr	r2, [pc, #28]	@ (8001d3c <EXTI9_5_IRQHandler+0x60>)
 8001d20:	430b      	orrs	r3, r1
 8001d22:	6153      	str	r3, [r2, #20]
    for (int i = 5; i <= 9; ++i) {
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3301      	adds	r3, #1
 8001d28:	607b      	str	r3, [r7, #4]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b09      	cmp	r3, #9
 8001d2e:	dddb      	ble.n	8001ce8 <EXTI9_5_IRQHandler+0xc>
        }
    }
}
 8001d30:	bf00      	nop
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40013c00 	.word	0x40013c00
 8001d40:	20000078 	.word	0x20000078

08001d44 <EXTI15_10_IRQHandler>:
/**
 * @brief Interrupt handler for EXTI lines 10 to 15.
 *
 * Handles interrupts for pins 10 to 15, checking each pin for active flags.
 */
void EXTI15_10_IRQHandler(void) {
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
    for (int i = 10; i <= 15; ++i) {
 8001d4a:	230a      	movs	r3, #10
 8001d4c:	607b      	str	r3, [r7, #4]
 8001d4e:	e020      	b.n	8001d92 <EXTI15_10_IRQHandler+0x4e>
        if ((EXTI->PR & (1 << i)) && EXTI_ISR[i]) {
 8001d50:	4b14      	ldr	r3, [pc, #80]	@ (8001da4 <EXTI15_10_IRQHandler+0x60>)
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	2101      	movs	r1, #1
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	fa01 f202 	lsl.w	r2, r1, r2
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d014      	beq.n	8001d8c <EXTI15_10_IRQHandler+0x48>
 8001d62:	4a11      	ldr	r2, [pc, #68]	@ (8001da8 <EXTI15_10_IRQHandler+0x64>)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d00e      	beq.n	8001d8c <EXTI15_10_IRQHandler+0x48>
            EXTI_ISR[i]();        // Invoke callback for pin `i`
 8001d6e:	4a0e      	ldr	r2, [pc, #56]	@ (8001da8 <EXTI15_10_IRQHandler+0x64>)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d76:	4798      	blx	r3
            EXTI->PR |= (1 << i); // Clear interrupt flag
 8001d78:	4b0a      	ldr	r3, [pc, #40]	@ (8001da4 <EXTI15_10_IRQHandler+0x60>)
 8001d7a:	695b      	ldr	r3, [r3, #20]
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	fa01 f202 	lsl.w	r2, r1, r2
 8001d84:	4611      	mov	r1, r2
 8001d86:	4a07      	ldr	r2, [pc, #28]	@ (8001da4 <EXTI15_10_IRQHandler+0x60>)
 8001d88:	430b      	orrs	r3, r1
 8001d8a:	6153      	str	r3, [r2, #20]
    for (int i = 10; i <= 15; ++i) {
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	607b      	str	r3, [r7, #4]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b0f      	cmp	r3, #15
 8001d96:	dddb      	ble.n	8001d50 <EXTI15_10_IRQHandler+0xc>
        }
    }
}
 8001d98:	bf00      	nop
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40013c00 	.word	0x40013c00
 8001da8:	20000078 	.word	0x20000078

08001dac <GPIO_Clock_Enable>:
 * @brief Enables the clock for a specific GPIO port.
 *
 * @param PORT Pointer to GPIO port base address.
 * @return GPIO_SUCCESS on success, GPIO_INVALID_PORT on failure.
 */
int GPIO_Clock_Enable(GPIO_TypeDef *PORT) {
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)PORT) {
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a30      	ldr	r2, [pc, #192]	@ (8001e78 <GPIO_Clock_Enable+0xcc>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d04b      	beq.n	8001e54 <GPIO_Clock_Enable+0xa8>
 8001dbc:	4a2e      	ldr	r2, [pc, #184]	@ (8001e78 <GPIO_Clock_Enable+0xcc>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d84f      	bhi.n	8001e62 <GPIO_Clock_Enable+0xb6>
 8001dc2:	4a2e      	ldr	r2, [pc, #184]	@ (8001e7c <GPIO_Clock_Enable+0xd0>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d03e      	beq.n	8001e46 <GPIO_Clock_Enable+0x9a>
 8001dc8:	4a2c      	ldr	r2, [pc, #176]	@ (8001e7c <GPIO_Clock_Enable+0xd0>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d849      	bhi.n	8001e62 <GPIO_Clock_Enable+0xb6>
 8001dce:	4a2c      	ldr	r2, [pc, #176]	@ (8001e80 <GPIO_Clock_Enable+0xd4>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d031      	beq.n	8001e38 <GPIO_Clock_Enable+0x8c>
 8001dd4:	4a2a      	ldr	r2, [pc, #168]	@ (8001e80 <GPIO_Clock_Enable+0xd4>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d843      	bhi.n	8001e62 <GPIO_Clock_Enable+0xb6>
 8001dda:	4a2a      	ldr	r2, [pc, #168]	@ (8001e84 <GPIO_Clock_Enable+0xd8>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d024      	beq.n	8001e2a <GPIO_Clock_Enable+0x7e>
 8001de0:	4a28      	ldr	r2, [pc, #160]	@ (8001e84 <GPIO_Clock_Enable+0xd8>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d83d      	bhi.n	8001e62 <GPIO_Clock_Enable+0xb6>
 8001de6:	4a28      	ldr	r2, [pc, #160]	@ (8001e88 <GPIO_Clock_Enable+0xdc>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d017      	beq.n	8001e1c <GPIO_Clock_Enable+0x70>
 8001dec:	4a26      	ldr	r2, [pc, #152]	@ (8001e88 <GPIO_Clock_Enable+0xdc>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d837      	bhi.n	8001e62 <GPIO_Clock_Enable+0xb6>
 8001df2:	4a26      	ldr	r2, [pc, #152]	@ (8001e8c <GPIO_Clock_Enable+0xe0>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d003      	beq.n	8001e00 <GPIO_Clock_Enable+0x54>
 8001df8:	4a25      	ldr	r2, [pc, #148]	@ (8001e90 <GPIO_Clock_Enable+0xe4>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d007      	beq.n	8001e0e <GPIO_Clock_Enable+0x62>
 8001dfe:	e030      	b.n	8001e62 <GPIO_Clock_Enable+0xb6>
        case (uint32_t)GPIOA: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; break;
 8001e00:	4b24      	ldr	r3, [pc, #144]	@ (8001e94 <GPIO_Clock_Enable+0xe8>)
 8001e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e04:	4a23      	ldr	r2, [pc, #140]	@ (8001e94 <GPIO_Clock_Enable+0xe8>)
 8001e06:	f043 0301 	orr.w	r3, r3, #1
 8001e0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e0c:	e02c      	b.n	8001e68 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOB: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; break;
 8001e0e:	4b21      	ldr	r3, [pc, #132]	@ (8001e94 <GPIO_Clock_Enable+0xe8>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e12:	4a20      	ldr	r2, [pc, #128]	@ (8001e94 <GPIO_Clock_Enable+0xe8>)
 8001e14:	f043 0302 	orr.w	r3, r3, #2
 8001e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e1a:	e025      	b.n	8001e68 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOC: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN; break;
 8001e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8001e94 <GPIO_Clock_Enable+0xe8>)
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e20:	4a1c      	ldr	r2, [pc, #112]	@ (8001e94 <GPIO_Clock_Enable+0xe8>)
 8001e22:	f043 0304 	orr.w	r3, r3, #4
 8001e26:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e28:	e01e      	b.n	8001e68 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOD: RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN; break;
 8001e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001e94 <GPIO_Clock_Enable+0xe8>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2e:	4a19      	ldr	r2, [pc, #100]	@ (8001e94 <GPIO_Clock_Enable+0xe8>)
 8001e30:	f043 0308 	orr.w	r3, r3, #8
 8001e34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e36:	e017      	b.n	8001e68 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOE: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN; break;
 8001e38:	4b16      	ldr	r3, [pc, #88]	@ (8001e94 <GPIO_Clock_Enable+0xe8>)
 8001e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3c:	4a15      	ldr	r2, [pc, #84]	@ (8001e94 <GPIO_Clock_Enable+0xe8>)
 8001e3e:	f043 0310 	orr.w	r3, r3, #16
 8001e42:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e44:	e010      	b.n	8001e68 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOF: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN; break;
 8001e46:	4b13      	ldr	r3, [pc, #76]	@ (8001e94 <GPIO_Clock_Enable+0xe8>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4a:	4a12      	ldr	r2, [pc, #72]	@ (8001e94 <GPIO_Clock_Enable+0xe8>)
 8001e4c:	f043 0320 	orr.w	r3, r3, #32
 8001e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e52:	e009      	b.n	8001e68 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOH: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN; break;
 8001e54:	4b0f      	ldr	r3, [pc, #60]	@ (8001e94 <GPIO_Clock_Enable+0xe8>)
 8001e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e58:	4a0e      	ldr	r2, [pc, #56]	@ (8001e94 <GPIO_Clock_Enable+0xe8>)
 8001e5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e60:	e002      	b.n	8001e68 <GPIO_Clock_Enable+0xbc>
        default: return GPIO_INVALID_PORT;
 8001e62:	f04f 33ff 	mov.w	r3, #4294967295
 8001e66:	e000      	b.n	8001e6a <GPIO_Clock_Enable+0xbe>
    }
    return GPIO_SUCCESS;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	40021c00 	.word	0x40021c00
 8001e7c:	40021400 	.word	0x40021400
 8001e80:	40021000 	.word	0x40021000
 8001e84:	40020c00 	.word	0x40020c00
 8001e88:	40020800 	.word	0x40020800
 8001e8c:	40020000 	.word	0x40020000
 8001e90:	40020400 	.word	0x40020400
 8001e94:	40023800 	.word	0x40023800

08001e98 <GPIO_Pin_Init>:


GPIO_Status GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function) {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	4608      	mov	r0, r1
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	70fb      	strb	r3, [r7, #3]
 8001eaa:	460b      	mov	r3, r1
 8001eac:	70bb      	strb	r3, [r7, #2]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	707b      	strb	r3, [r7, #1]
//    if (pin > 15 || mode > 3 || speed > 3 || pull > 2) return GPIO_INVALID_PIN;

    GPIO_Clock_Enable(Port);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff ff7a 	bl	8001dac <GPIO_Clock_Enable>

    // Reset and set mode
    Port->MODER &= ~(3 << PIN_POS(pin));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	78fa      	ldrb	r2, [r7, #3]
 8001ebe:	0052      	lsls	r2, r2, #1
 8001ec0:	2103      	movs	r1, #3
 8001ec2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec6:	43d2      	mvns	r2, r2
 8001ec8:	401a      	ands	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	601a      	str	r2, [r3, #0]
    Port->MODER |= mode << PIN_POS(pin);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	78b9      	ldrb	r1, [r7, #2]
 8001ed4:	78fa      	ldrb	r2, [r7, #3]
 8001ed6:	0052      	lsls	r2, r2, #1
 8001ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8001edc:	431a      	orrs	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	601a      	str	r2, [r3, #0]

    // Reset and set output type
    Port->OTYPER &= ~(1 << pin);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	78fa      	ldrb	r2, [r7, #3]
 8001ee8:	2101      	movs	r1, #1
 8001eea:	fa01 f202 	lsl.w	r2, r1, r2
 8001eee:	43d2      	mvns	r2, r2
 8001ef0:	401a      	ands	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	605a      	str	r2, [r3, #4]
    if (output_type != GPIO_Configuration.Output_Type.None) {
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	787b      	ldrb	r3, [r7, #1]
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d008      	beq.n	8001f10 <GPIO_Pin_Init+0x78>
        Port->OTYPER |= output_type << pin;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	7879      	ldrb	r1, [r7, #1]
 8001f04:	78fa      	ldrb	r2, [r7, #3]
 8001f06:	fa01 f202 	lsl.w	r2, r1, r2
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	605a      	str	r2, [r3, #4]
    }

    // Reset and set speed
    Port->OSPEEDR &= ~(3 << PIN_POS(pin));
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	78fa      	ldrb	r2, [r7, #3]
 8001f16:	0052      	lsls	r2, r2, #1
 8001f18:	2103      	movs	r1, #3
 8001f1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f1e:	43d2      	mvns	r2, r2
 8001f20:	401a      	ands	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	609a      	str	r2, [r3, #8]
    if (speed != GPIO_Configuration.Speed.None) {
 8001f26:	2204      	movs	r2, #4
 8001f28:	7c3b      	ldrb	r3, [r7, #16]
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d009      	beq.n	8001f42 <GPIO_Pin_Init+0xaa>
        Port->OSPEEDR |= speed << PIN_POS(pin);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	7c39      	ldrb	r1, [r7, #16]
 8001f34:	78fa      	ldrb	r2, [r7, #3]
 8001f36:	0052      	lsls	r2, r2, #1
 8001f38:	fa01 f202 	lsl.w	r2, r1, r2
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	609a      	str	r2, [r3, #8]
    }

    // Reset and set pull-up/pull-down
    Port->PUPDR &= ~(3 << PIN_POS(pin));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	78fa      	ldrb	r2, [r7, #3]
 8001f48:	0052      	lsls	r2, r2, #1
 8001f4a:	2103      	movs	r1, #3
 8001f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f50:	43d2      	mvns	r2, r2
 8001f52:	401a      	ands	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	60da      	str	r2, [r3, #12]
    if (pull != GPIO_Configuration.Pull.None) {
 8001f58:	2204      	movs	r2, #4
 8001f5a:	7d3b      	ldrb	r3, [r7, #20]
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d009      	beq.n	8001f74 <GPIO_Pin_Init+0xdc>
        Port->PUPDR |= pull << PIN_POS(pin);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	7d39      	ldrb	r1, [r7, #20]
 8001f66:	78fa      	ldrb	r2, [r7, #3]
 8001f68:	0052      	lsls	r2, r2, #1
 8001f6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	60da      	str	r2, [r3, #12]
    }

    // Set alternate function
    if (mode == GPIO_Configuration.Mode.Alternate_Function) {
 8001f74:	2202      	movs	r2, #2
 8001f76:	78bb      	ldrb	r3, [r7, #2]
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d12f      	bne.n	8001fdc <GPIO_Pin_Init+0x144>
        if (pin < GPIO_AF_SPLIT_POINT) {
 8001f7c:	78fb      	ldrb	r3, [r7, #3]
 8001f7e:	2b07      	cmp	r3, #7
 8001f80:	d815      	bhi.n	8001fae <GPIO_Pin_Init+0x116>
            Port->AFR[0] &= ~(0xF << (pin * 4));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	78fa      	ldrb	r2, [r7, #3]
 8001f88:	0092      	lsls	r2, r2, #2
 8001f8a:	210f      	movs	r1, #15
 8001f8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f90:	43d2      	mvns	r2, r2
 8001f92:	401a      	ands	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	621a      	str	r2, [r3, #32]
            Port->AFR[0] |= alternate_function << (pin * 4);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	7e39      	ldrb	r1, [r7, #24]
 8001f9e:	78fa      	ldrb	r2, [r7, #3]
 8001fa0:	0092      	lsls	r2, r2, #2
 8001fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	621a      	str	r2, [r3, #32]
 8001fac:	e016      	b.n	8001fdc <GPIO_Pin_Init+0x144>
        } else {
            Port->AFR[1] &= ~(0xF << ((pin - GPIO_AF_SPLIT_POINT) * 4));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb2:	78fa      	ldrb	r2, [r7, #3]
 8001fb4:	3a08      	subs	r2, #8
 8001fb6:	0092      	lsls	r2, r2, #2
 8001fb8:	210f      	movs	r1, #15
 8001fba:	fa01 f202 	lsl.w	r2, r1, r2
 8001fbe:	43d2      	mvns	r2, r2
 8001fc0:	401a      	ands	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	625a      	str	r2, [r3, #36]	@ 0x24
            Port->AFR[1] |= alternate_function << ((pin - GPIO_AF_SPLIT_POINT) * 4);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fca:	7e39      	ldrb	r1, [r7, #24]
 8001fcc:	78fa      	ldrb	r2, [r7, #3]
 8001fce:	3a08      	subs	r2, #8
 8001fd0:	0092      	lsls	r2, r2, #2
 8001fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    }

    return GPIO_SUCCESS;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <__NVIC_EnableIRQ>:
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	db0b      	blt.n	8002012 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	f003 021f 	and.w	r2, r3, #31
 8002000:	4907      	ldr	r1, [pc, #28]	@ (8002020 <__NVIC_EnableIRQ+0x38>)
 8002002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002006:	095b      	lsrs	r3, r3, #5
 8002008:	2001      	movs	r0, #1
 800200a:	fa00 f202 	lsl.w	r2, r0, r2
 800200e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	e000e100 	.word	0xe000e100

08002024 <TIM1_BRK_TIM9_IRQHandler>:
Timer_Config *__timer_13_config__;
Timer_Config *__timer_14_config__;



void TIM1_BRK_TIM9_IRQHandler(void) {
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
    if (__timer_1_config__ ->ISR_Routines.Break_ISR) {
 8002028:	4b2b      	ldr	r3, [pc, #172]	@ (80020d8 <TIM1_BRK_TIM9_IRQHandler+0xb4>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00a      	beq.n	800204a <TIM1_BRK_TIM9_IRQHandler+0x26>
    	__timer_1_config__ ->ISR_Routines.Break_ISR();
 8002034:	4b28      	ldr	r3, [pc, #160]	@ (80020d8 <TIM1_BRK_TIM9_IRQHandler+0xb4>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800203c:	4798      	blx	r3
    	TIM1->SR &= ~TIM_SR_BIF;  // Clear the Break interrupt flag
 800203e:	4b27      	ldr	r3, [pc, #156]	@ (80020dc <TIM1_BRK_TIM9_IRQHandler+0xb8>)
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	4a26      	ldr	r2, [pc, #152]	@ (80020dc <TIM1_BRK_TIM9_IRQHandler+0xb8>)
 8002044:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002048:	6113      	str	r3, [r2, #16]
    }

    if (__timer_9_config__ ->ISR_Routines.Capture_Compare_1_ISR){
 800204a:	4b25      	ldr	r3, [pc, #148]	@ (80020e0 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00a      	beq.n	800206c <TIM1_BRK_TIM9_IRQHandler+0x48>
    	__timer_9_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8002056:	4b22      	ldr	r3, [pc, #136]	@ (80020e0 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800205e:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_CC1IF;  // Clear the Break interrupt flag
 8002060:	4b20      	ldr	r3, [pc, #128]	@ (80020e4 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	4a1f      	ldr	r2, [pc, #124]	@ (80020e4 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8002066:	f023 0302 	bic.w	r3, r3, #2
 800206a:	6113      	str	r3, [r2, #16]
    }

    if (__timer_9_config__ ->ISR_Routines.Capture_Compare_2_ISR){
 800206c:	4b1c      	ldr	r3, [pc, #112]	@ (80020e0 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00a      	beq.n	800208e <TIM1_BRK_TIM9_IRQHandler+0x6a>
    	__timer_9_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 8002078:	4b19      	ldr	r3, [pc, #100]	@ (80020e0 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002080:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_CC2IF;  // Clear the Break interrupt flag
 8002082:	4b18      	ldr	r3, [pc, #96]	@ (80020e4 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	4a17      	ldr	r2, [pc, #92]	@ (80020e4 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8002088:	f023 0304 	bic.w	r3, r3, #4
 800208c:	6113      	str	r3, [r2, #16]
    }

    if (__timer_9_config__ ->ISR_Routines.Update_ISR){
 800208e:	4b14      	ldr	r3, [pc, #80]	@ (80020e0 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00a      	beq.n	80020b0 <TIM1_BRK_TIM9_IRQHandler+0x8c>
    	__timer_9_config__ ->ISR_Routines.Update_ISR();
 800209a:	4b11      	ldr	r3, [pc, #68]	@ (80020e0 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020a2:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_UIF;  // Clear the Break interrupt flag
 80020a4:	4b0f      	ldr	r3, [pc, #60]	@ (80020e4 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	4a0e      	ldr	r2, [pc, #56]	@ (80020e4 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 80020aa:	f023 0301 	bic.w	r3, r3, #1
 80020ae:	6113      	str	r3, [r2, #16]
    }

    if (__timer_9_config__ ->ISR_Routines.Trigger_ISR){
 80020b0:	4b0b      	ldr	r3, [pc, #44]	@ (80020e0 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00a      	beq.n	80020d2 <TIM1_BRK_TIM9_IRQHandler+0xae>
    	__timer_9_config__ ->ISR_Routines.Trigger_ISR();
 80020bc:	4b08      	ldr	r3, [pc, #32]	@ (80020e0 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80020c4:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_TIF;  // Clear the Break interrupt flag
 80020c6:	4b07      	ldr	r3, [pc, #28]	@ (80020e4 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	4a06      	ldr	r2, [pc, #24]	@ (80020e4 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 80020cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80020d0:	6113      	str	r3, [r2, #16]
    }

}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	200000b8 	.word	0x200000b8
 80020dc:	40010000 	.word	0x40010000
 80020e0:	200000d8 	.word	0x200000d8
 80020e4:	40014000 	.word	0x40014000

080020e8 <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler(void) {
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
    if (__timer_1_config__ ->ISR_Routines.Update_ISR) {
 80020ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002158 <TIM1_UP_TIM10_IRQHandler+0x70>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00a      	beq.n	800210e <TIM1_UP_TIM10_IRQHandler+0x26>
    	__timer_1_config__ ->ISR_Routines.Update_ISR();
 80020f8:	4b17      	ldr	r3, [pc, #92]	@ (8002158 <TIM1_UP_TIM10_IRQHandler+0x70>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002100:	4798      	blx	r3
    	TIM1->SR &= ~TIM_SR_UIF;  // Clear the Update interrupt flag
 8002102:	4b16      	ldr	r3, [pc, #88]	@ (800215c <TIM1_UP_TIM10_IRQHandler+0x74>)
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	4a15      	ldr	r2, [pc, #84]	@ (800215c <TIM1_UP_TIM10_IRQHandler+0x74>)
 8002108:	f023 0301 	bic.w	r3, r3, #1
 800210c:	6113      	str	r3, [r2, #16]
    }

    if (__timer_10_config__ ->ISR_Routines.Update_ISR) {
 800210e:	4b14      	ldr	r3, [pc, #80]	@ (8002160 <TIM1_UP_TIM10_IRQHandler+0x78>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00a      	beq.n	8002130 <TIM1_UP_TIM10_IRQHandler+0x48>
    	__timer_10_config__ ->ISR_Routines.Update_ISR();
 800211a:	4b11      	ldr	r3, [pc, #68]	@ (8002160 <TIM1_UP_TIM10_IRQHandler+0x78>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002122:	4798      	blx	r3
    	TIM10->SR &= ~TIM_SR_UIF;  // Clear the Update interrupt flag
 8002124:	4b0f      	ldr	r3, [pc, #60]	@ (8002164 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	4a0e      	ldr	r2, [pc, #56]	@ (8002164 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 800212a:	f023 0301 	bic.w	r3, r3, #1
 800212e:	6113      	str	r3, [r2, #16]
    }

    if (__timer_10_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8002130:	4b0b      	ldr	r3, [pc, #44]	@ (8002160 <TIM1_UP_TIM10_IRQHandler+0x78>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002138:	2b00      	cmp	r3, #0
 800213a:	d00a      	beq.n	8002152 <TIM1_UP_TIM10_IRQHandler+0x6a>
    	__timer_10_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 800213c:	4b08      	ldr	r3, [pc, #32]	@ (8002160 <TIM1_UP_TIM10_IRQHandler+0x78>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002144:	4798      	blx	r3
    	TIM10->SR &= ~TIM_SR_CC1IF;  // Clear the Update interrupt flag
 8002146:	4b07      	ldr	r3, [pc, #28]	@ (8002164 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	4a06      	ldr	r2, [pc, #24]	@ (8002164 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 800214c:	f023 0302 	bic.w	r3, r3, #2
 8002150:	6113      	str	r3, [r2, #16]
    }

}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	200000b8 	.word	0x200000b8
 800215c:	40010000 	.word	0x40010000
 8002160:	200000dc 	.word	0x200000dc
 8002164:	40014400 	.word	0x40014400

08002168 <TIM1_TRG_COM_TIM11_IRQHandler>:

void TIM1_TRG_COM_TIM11_IRQHandler(void) {
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
    if (__timer_1_config__ ->ISR_Routines.Trigger_ISR) {
 800216c:	4b22      	ldr	r3, [pc, #136]	@ (80021f8 <TIM1_TRG_COM_TIM11_IRQHandler+0x90>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00a      	beq.n	800218e <TIM1_TRG_COM_TIM11_IRQHandler+0x26>
    	__timer_1_config__ ->ISR_Routines.Trigger_ISR();
 8002178:	4b1f      	ldr	r3, [pc, #124]	@ (80021f8 <TIM1_TRG_COM_TIM11_IRQHandler+0x90>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002180:	4798      	blx	r3

    	TIM1->SR &= ~TIM_SR_TIF;  // Clear the Trigger interrupt flag
 8002182:	4b1e      	ldr	r3, [pc, #120]	@ (80021fc <TIM1_TRG_COM_TIM11_IRQHandler+0x94>)
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	4a1d      	ldr	r2, [pc, #116]	@ (80021fc <TIM1_TRG_COM_TIM11_IRQHandler+0x94>)
 8002188:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800218c:	6113      	str	r3, [r2, #16]
    }

    if (__timer_1_config__ ->ISR_Routines.Commutation_ISR) {
 800218e:	4b1a      	ldr	r3, [pc, #104]	@ (80021f8 <TIM1_TRG_COM_TIM11_IRQHandler+0x90>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00a      	beq.n	80021b0 <TIM1_TRG_COM_TIM11_IRQHandler+0x48>
    	__timer_1_config__ ->ISR_Routines.Commutation_ISR();
 800219a:	4b17      	ldr	r3, [pc, #92]	@ (80021f8 <TIM1_TRG_COM_TIM11_IRQHandler+0x90>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80021a2:	4798      	blx	r3

    	TIM1->SR &= ~TIM_SR_COMIF;  // Clear the Trigger interrupt flag
 80021a4:	4b15      	ldr	r3, [pc, #84]	@ (80021fc <TIM1_TRG_COM_TIM11_IRQHandler+0x94>)
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	4a14      	ldr	r2, [pc, #80]	@ (80021fc <TIM1_TRG_COM_TIM11_IRQHandler+0x94>)
 80021aa:	f023 0320 	bic.w	r3, r3, #32
 80021ae:	6113      	str	r3, [r2, #16]
    }

    if (__timer_11_config__ ->ISR_Routines.Update_ISR) {
 80021b0:	4b13      	ldr	r3, [pc, #76]	@ (8002200 <TIM1_TRG_COM_TIM11_IRQHandler+0x98>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00a      	beq.n	80021d2 <TIM1_TRG_COM_TIM11_IRQHandler+0x6a>
    	__timer_11_config__ ->ISR_Routines.Update_ISR();
 80021bc:	4b10      	ldr	r3, [pc, #64]	@ (8002200 <TIM1_TRG_COM_TIM11_IRQHandler+0x98>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021c4:	4798      	blx	r3
    	TIM11->SR &= ~TIM_SR_UIF;  // Clear the Update interrupt flag
 80021c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002204 <TIM1_TRG_COM_TIM11_IRQHandler+0x9c>)
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	4a0e      	ldr	r2, [pc, #56]	@ (8002204 <TIM1_TRG_COM_TIM11_IRQHandler+0x9c>)
 80021cc:	f023 0301 	bic.w	r3, r3, #1
 80021d0:	6113      	str	r3, [r2, #16]
    }

    if (__timer_11_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 80021d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002200 <TIM1_TRG_COM_TIM11_IRQHandler+0x98>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00a      	beq.n	80021f4 <TIM1_TRG_COM_TIM11_IRQHandler+0x8c>
    	__timer_11_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 80021de:	4b08      	ldr	r3, [pc, #32]	@ (8002200 <TIM1_TRG_COM_TIM11_IRQHandler+0x98>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021e6:	4798      	blx	r3
    	TIM11->SR &= ~TIM_SR_CC1IF;  // Clear the Update interrupt flag
 80021e8:	4b06      	ldr	r3, [pc, #24]	@ (8002204 <TIM1_TRG_COM_TIM11_IRQHandler+0x9c>)
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	4a05      	ldr	r2, [pc, #20]	@ (8002204 <TIM1_TRG_COM_TIM11_IRQHandler+0x9c>)
 80021ee:	f023 0302 	bic.w	r3, r3, #2
 80021f2:	6113      	str	r3, [r2, #16]
    }

}
 80021f4:	bf00      	nop
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	200000b8 	.word	0x200000b8
 80021fc:	40010000 	.word	0x40010000
 8002200:	200000e0 	.word	0x200000e0
 8002204:	40014800 	.word	0x40014800

08002208 <TIM1_CC_IRQHandler>:

void TIM1_CC_IRQHandler(void) {
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
    if (__timer_1_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 800220c:	4b22      	ldr	r3, [pc, #136]	@ (8002298 <TIM1_CC_IRQHandler+0x90>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00a      	beq.n	800222e <TIM1_CC_IRQHandler+0x26>
    	__timer_1_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8002218:	4b1f      	ldr	r3, [pc, #124]	@ (8002298 <TIM1_CC_IRQHandler+0x90>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002220:	4798      	blx	r3

    	TIM1->SR &= ~TIM_SR_CC1IF;  // Clear the Capture Compare interrupt flag
 8002222:	4b1e      	ldr	r3, [pc, #120]	@ (800229c <TIM1_CC_IRQHandler+0x94>)
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	4a1d      	ldr	r2, [pc, #116]	@ (800229c <TIM1_CC_IRQHandler+0x94>)
 8002228:	f023 0302 	bic.w	r3, r3, #2
 800222c:	6113      	str	r3, [r2, #16]
    }

    if (__timer_1_config__ ->ISR_Routines.Capture_Compare_2_ISR) {
 800222e:	4b1a      	ldr	r3, [pc, #104]	@ (8002298 <TIM1_CC_IRQHandler+0x90>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00a      	beq.n	8002250 <TIM1_CC_IRQHandler+0x48>
    	__timer_1_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 800223a:	4b17      	ldr	r3, [pc, #92]	@ (8002298 <TIM1_CC_IRQHandler+0x90>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002242:	4798      	blx	r3

    	TIM1->SR &= ~TIM_SR_CC2IF;  // Clear the Capture Compare interrupt flag
 8002244:	4b15      	ldr	r3, [pc, #84]	@ (800229c <TIM1_CC_IRQHandler+0x94>)
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	4a14      	ldr	r2, [pc, #80]	@ (800229c <TIM1_CC_IRQHandler+0x94>)
 800224a:	f023 0304 	bic.w	r3, r3, #4
 800224e:	6113      	str	r3, [r2, #16]
    }

    if (__timer_1_config__ ->ISR_Routines.Capture_Compare_3_ISR) {
 8002250:	4b11      	ldr	r3, [pc, #68]	@ (8002298 <TIM1_CC_IRQHandler+0x90>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00a      	beq.n	8002272 <TIM1_CC_IRQHandler+0x6a>
    	__timer_1_config__ ->ISR_Routines.Capture_Compare_3_ISR();
 800225c:	4b0e      	ldr	r3, [pc, #56]	@ (8002298 <TIM1_CC_IRQHandler+0x90>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002264:	4798      	blx	r3

    	TIM1->SR &= ~TIM_SR_CC3IF;  // Clear the Capture Compare interrupt flag
 8002266:	4b0d      	ldr	r3, [pc, #52]	@ (800229c <TIM1_CC_IRQHandler+0x94>)
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	4a0c      	ldr	r2, [pc, #48]	@ (800229c <TIM1_CC_IRQHandler+0x94>)
 800226c:	f023 0308 	bic.w	r3, r3, #8
 8002270:	6113      	str	r3, [r2, #16]
    }

    if (__timer_1_config__ ->ISR_Routines.Capture_Compare_4_ISR) {
 8002272:	4b09      	ldr	r3, [pc, #36]	@ (8002298 <TIM1_CC_IRQHandler+0x90>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00a      	beq.n	8002294 <TIM1_CC_IRQHandler+0x8c>
    	__timer_1_config__ ->ISR_Routines.Capture_Compare_4_ISR();
 800227e:	4b06      	ldr	r3, [pc, #24]	@ (8002298 <TIM1_CC_IRQHandler+0x90>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002286:	4798      	blx	r3

    	TIM1->SR &= ~TIM_SR_CC4IF;  // Clear the Capture Compare interrupt flag
 8002288:	4b04      	ldr	r3, [pc, #16]	@ (800229c <TIM1_CC_IRQHandler+0x94>)
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	4a03      	ldr	r2, [pc, #12]	@ (800229c <TIM1_CC_IRQHandler+0x94>)
 800228e:	f023 0310 	bic.w	r3, r3, #16
 8002292:	6113      	str	r3, [r2, #16]
    }
}
 8002294:	bf00      	nop
 8002296:	bd80      	pop	{r7, pc}
 8002298:	200000b8 	.word	0x200000b8
 800229c:	40010000 	.word	0x40010000

080022a0 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
    if (__timer_2_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 80022a4:	4b39      	ldr	r3, [pc, #228]	@ (800238c <TIM2_IRQHandler+0xec>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00c      	beq.n	80022ca <TIM2_IRQHandler+0x2a>
    	__timer_2_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 80022b0:	4b36      	ldr	r3, [pc, #216]	@ (800238c <TIM2_IRQHandler+0xec>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022b8:	4798      	blx	r3

    	TIM2->SR &= ~TIM_SR_CC1IF;  // Clear the Capture Compare interrupt flag
 80022ba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80022c4:	f023 0302 	bic.w	r3, r3, #2
 80022c8:	6113      	str	r3, [r2, #16]
    }
    if (__timer_2_config__ ->ISR_Routines.Capture_Compare_2_ISR) {
 80022ca:	4b30      	ldr	r3, [pc, #192]	@ (800238c <TIM2_IRQHandler+0xec>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00c      	beq.n	80022f0 <TIM2_IRQHandler+0x50>
    	__timer_2_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 80022d6:	4b2d      	ldr	r3, [pc, #180]	@ (800238c <TIM2_IRQHandler+0xec>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022de:	4798      	blx	r3

    	TIM2->SR &= ~TIM_SR_CC2IF;  // Clear the Capture Compare interrupt flag
 80022e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80022ea:	f023 0304 	bic.w	r3, r3, #4
 80022ee:	6113      	str	r3, [r2, #16]
    }
    if (__timer_2_config__ ->ISR_Routines.Capture_Compare_3_ISR) {
 80022f0:	4b26      	ldr	r3, [pc, #152]	@ (800238c <TIM2_IRQHandler+0xec>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00c      	beq.n	8002316 <TIM2_IRQHandler+0x76>
    	__timer_2_config__ ->ISR_Routines.Capture_Compare_3_ISR();
 80022fc:	4b23      	ldr	r3, [pc, #140]	@ (800238c <TIM2_IRQHandler+0xec>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002304:	4798      	blx	r3

    	TIM2->SR &= ~TIM_SR_CC3IF;  // Clear the Capture Compare interrupt flag
 8002306:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002310:	f023 0308 	bic.w	r3, r3, #8
 8002314:	6113      	str	r3, [r2, #16]
    }
    if (__timer_2_config__ ->ISR_Routines.Capture_Compare_4_ISR) {
 8002316:	4b1d      	ldr	r3, [pc, #116]	@ (800238c <TIM2_IRQHandler+0xec>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00c      	beq.n	800233c <TIM2_IRQHandler+0x9c>
    	__timer_2_config__ ->ISR_Routines.Capture_Compare_4_ISR();
 8002322:	4b1a      	ldr	r3, [pc, #104]	@ (800238c <TIM2_IRQHandler+0xec>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800232a:	4798      	blx	r3

    	TIM2->SR &= ~TIM_SR_CC4IF;  // Clear the Capture Compare interrupt flag
 800232c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002336:	f023 0310 	bic.w	r3, r3, #16
 800233a:	6113      	str	r3, [r2, #16]
    }
    if (__timer_2_config__ ->ISR_Routines.Update_ISR) {
 800233c:	4b13      	ldr	r3, [pc, #76]	@ (800238c <TIM2_IRQHandler+0xec>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00c      	beq.n	8002362 <TIM2_IRQHandler+0xc2>
    	__timer_2_config__ ->ISR_Routines.Update_ISR();
 8002348:	4b10      	ldr	r3, [pc, #64]	@ (800238c <TIM2_IRQHandler+0xec>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002350:	4798      	blx	r3

    	TIM2->SR &= ~TIM_SR_UIF;  // Clear the Capture Compare interrupt flag
 8002352:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800235c:	f023 0301 	bic.w	r3, r3, #1
 8002360:	6113      	str	r3, [r2, #16]
    }
    if (__timer_2_config__ ->ISR_Routines.Trigger_ISR) {
 8002362:	4b0a      	ldr	r3, [pc, #40]	@ (800238c <TIM2_IRQHandler+0xec>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00c      	beq.n	8002388 <TIM2_IRQHandler+0xe8>
    	__timer_2_config__ ->ISR_Routines.Trigger_ISR();
 800236e:	4b07      	ldr	r3, [pc, #28]	@ (800238c <TIM2_IRQHandler+0xec>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002376:	4798      	blx	r3

    	TIM2->SR &= ~TIM_SR_TIF;  // Clear the Capture Compare interrupt flag
 8002378:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002382:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002386:	6113      	str	r3, [r2, #16]
    }
}
 8002388:	bf00      	nop
 800238a:	bd80      	pop	{r7, pc}
 800238c:	200000bc 	.word	0x200000bc

08002390 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
    if (__timer_3_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8002394:	4b33      	ldr	r3, [pc, #204]	@ (8002464 <TIM3_IRQHandler+0xd4>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00a      	beq.n	80023b6 <TIM3_IRQHandler+0x26>
    	__timer_3_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 80023a0:	4b30      	ldr	r3, [pc, #192]	@ (8002464 <TIM3_IRQHandler+0xd4>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023a8:	4798      	blx	r3

    	TIM3->SR &= ~TIM_SR_CC1IF;  // Clear the Capture Compare interrupt flag
 80023aa:	4b2f      	ldr	r3, [pc, #188]	@ (8002468 <TIM3_IRQHandler+0xd8>)
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	4a2e      	ldr	r2, [pc, #184]	@ (8002468 <TIM3_IRQHandler+0xd8>)
 80023b0:	f023 0302 	bic.w	r3, r3, #2
 80023b4:	6113      	str	r3, [r2, #16]
    }
    if (__timer_3_config__ ->ISR_Routines.Capture_Compare_2_ISR) {
 80023b6:	4b2b      	ldr	r3, [pc, #172]	@ (8002464 <TIM3_IRQHandler+0xd4>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00a      	beq.n	80023d8 <TIM3_IRQHandler+0x48>
    	__timer_3_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 80023c2:	4b28      	ldr	r3, [pc, #160]	@ (8002464 <TIM3_IRQHandler+0xd4>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023ca:	4798      	blx	r3

    	TIM3->SR &= ~TIM_SR_CC2IF;  // Clear the Capture Compare interrupt flag
 80023cc:	4b26      	ldr	r3, [pc, #152]	@ (8002468 <TIM3_IRQHandler+0xd8>)
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	4a25      	ldr	r2, [pc, #148]	@ (8002468 <TIM3_IRQHandler+0xd8>)
 80023d2:	f023 0304 	bic.w	r3, r3, #4
 80023d6:	6113      	str	r3, [r2, #16]
    }
    if (__timer_3_config__ ->ISR_Routines.Capture_Compare_3_ISR) {
 80023d8:	4b22      	ldr	r3, [pc, #136]	@ (8002464 <TIM3_IRQHandler+0xd4>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00a      	beq.n	80023fa <TIM3_IRQHandler+0x6a>
    	__timer_3_config__ ->ISR_Routines.Capture_Compare_3_ISR();
 80023e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002464 <TIM3_IRQHandler+0xd4>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023ec:	4798      	blx	r3

    	TIM3->SR &= ~TIM_SR_CC3IF;  // Clear the Capture Compare interrupt flag
 80023ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002468 <TIM3_IRQHandler+0xd8>)
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	4a1d      	ldr	r2, [pc, #116]	@ (8002468 <TIM3_IRQHandler+0xd8>)
 80023f4:	f023 0308 	bic.w	r3, r3, #8
 80023f8:	6113      	str	r3, [r2, #16]
    }
    if (__timer_3_config__ ->ISR_Routines.Capture_Compare_4_ISR) {
 80023fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002464 <TIM3_IRQHandler+0xd4>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00a      	beq.n	800241c <TIM3_IRQHandler+0x8c>
    	__timer_3_config__ ->ISR_Routines.Capture_Compare_4_ISR();
 8002406:	4b17      	ldr	r3, [pc, #92]	@ (8002464 <TIM3_IRQHandler+0xd4>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800240e:	4798      	blx	r3

    	TIM3->SR &= ~TIM_SR_CC4IF;  // Clear the Capture Compare interrupt flag
 8002410:	4b15      	ldr	r3, [pc, #84]	@ (8002468 <TIM3_IRQHandler+0xd8>)
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	4a14      	ldr	r2, [pc, #80]	@ (8002468 <TIM3_IRQHandler+0xd8>)
 8002416:	f023 0310 	bic.w	r3, r3, #16
 800241a:	6113      	str	r3, [r2, #16]
    }
    if (__timer_3_config__ ->ISR_Routines.Update_ISR) {
 800241c:	4b11      	ldr	r3, [pc, #68]	@ (8002464 <TIM3_IRQHandler+0xd4>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00a      	beq.n	800243e <TIM3_IRQHandler+0xae>
    	__timer_3_config__ ->ISR_Routines.Update_ISR();
 8002428:	4b0e      	ldr	r3, [pc, #56]	@ (8002464 <TIM3_IRQHandler+0xd4>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002430:	4798      	blx	r3

    	TIM3->SR &= ~TIM_SR_UIF;  // Clear the Capture Compare interrupt flag
 8002432:	4b0d      	ldr	r3, [pc, #52]	@ (8002468 <TIM3_IRQHandler+0xd8>)
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	4a0c      	ldr	r2, [pc, #48]	@ (8002468 <TIM3_IRQHandler+0xd8>)
 8002438:	f023 0301 	bic.w	r3, r3, #1
 800243c:	6113      	str	r3, [r2, #16]
    }
    if (__timer_3_config__ ->ISR_Routines.Trigger_ISR) {
 800243e:	4b09      	ldr	r3, [pc, #36]	@ (8002464 <TIM3_IRQHandler+0xd4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00a      	beq.n	8002460 <TIM3_IRQHandler+0xd0>
    	__timer_3_config__ ->ISR_Routines.Trigger_ISR();
 800244a:	4b06      	ldr	r3, [pc, #24]	@ (8002464 <TIM3_IRQHandler+0xd4>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002452:	4798      	blx	r3

    	TIM3->SR &= ~TIM_SR_TIF;  // Clear the Capture Compare interrupt flag
 8002454:	4b04      	ldr	r3, [pc, #16]	@ (8002468 <TIM3_IRQHandler+0xd8>)
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	4a03      	ldr	r2, [pc, #12]	@ (8002468 <TIM3_IRQHandler+0xd8>)
 800245a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800245e:	6113      	str	r3, [r2, #16]
    }
}
 8002460:	bf00      	nop
 8002462:	bd80      	pop	{r7, pc}
 8002464:	200000c0 	.word	0x200000c0
 8002468:	40000400 	.word	0x40000400

0800246c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
    if (__timer_4_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8002470:	4b33      	ldr	r3, [pc, #204]	@ (8002540 <TIM4_IRQHandler+0xd4>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00a      	beq.n	8002492 <TIM4_IRQHandler+0x26>
    	__timer_4_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 800247c:	4b30      	ldr	r3, [pc, #192]	@ (8002540 <TIM4_IRQHandler+0xd4>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002484:	4798      	blx	r3

    	TIM4->SR &= ~TIM_SR_CC1IF;  // Clear the Capture Compare interrupt flag
 8002486:	4b2f      	ldr	r3, [pc, #188]	@ (8002544 <TIM4_IRQHandler+0xd8>)
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	4a2e      	ldr	r2, [pc, #184]	@ (8002544 <TIM4_IRQHandler+0xd8>)
 800248c:	f023 0302 	bic.w	r3, r3, #2
 8002490:	6113      	str	r3, [r2, #16]
    }
    if (__timer_4_config__ ->ISR_Routines.Capture_Compare_2_ISR) {
 8002492:	4b2b      	ldr	r3, [pc, #172]	@ (8002540 <TIM4_IRQHandler+0xd4>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00a      	beq.n	80024b4 <TIM4_IRQHandler+0x48>
    	__timer_4_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 800249e:	4b28      	ldr	r3, [pc, #160]	@ (8002540 <TIM4_IRQHandler+0xd4>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024a6:	4798      	blx	r3

    	TIM4->SR &= ~TIM_SR_CC2IF;  // Clear the Capture Compare interrupt flag
 80024a8:	4b26      	ldr	r3, [pc, #152]	@ (8002544 <TIM4_IRQHandler+0xd8>)
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	4a25      	ldr	r2, [pc, #148]	@ (8002544 <TIM4_IRQHandler+0xd8>)
 80024ae:	f023 0304 	bic.w	r3, r3, #4
 80024b2:	6113      	str	r3, [r2, #16]
    }
    if (__timer_4_config__ ->ISR_Routines.Capture_Compare_3_ISR) {
 80024b4:	4b22      	ldr	r3, [pc, #136]	@ (8002540 <TIM4_IRQHandler+0xd4>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00a      	beq.n	80024d6 <TIM4_IRQHandler+0x6a>
    	__timer_4_config__ ->ISR_Routines.Capture_Compare_3_ISR();
 80024c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002540 <TIM4_IRQHandler+0xd4>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024c8:	4798      	blx	r3

    	TIM4->SR &= ~TIM_SR_CC3IF;  // Clear the Capture Compare interrupt flag
 80024ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002544 <TIM4_IRQHandler+0xd8>)
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002544 <TIM4_IRQHandler+0xd8>)
 80024d0:	f023 0308 	bic.w	r3, r3, #8
 80024d4:	6113      	str	r3, [r2, #16]
    }
    if (__timer_4_config__ ->ISR_Routines.Capture_Compare_4_ISR) {
 80024d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002540 <TIM4_IRQHandler+0xd4>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00a      	beq.n	80024f8 <TIM4_IRQHandler+0x8c>
    	__timer_4_config__ ->ISR_Routines.Capture_Compare_4_ISR();
 80024e2:	4b17      	ldr	r3, [pc, #92]	@ (8002540 <TIM4_IRQHandler+0xd4>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80024ea:	4798      	blx	r3

    	TIM4->SR &= ~TIM_SR_CC4IF;  // Clear the Capture Compare interrupt flag
 80024ec:	4b15      	ldr	r3, [pc, #84]	@ (8002544 <TIM4_IRQHandler+0xd8>)
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	4a14      	ldr	r2, [pc, #80]	@ (8002544 <TIM4_IRQHandler+0xd8>)
 80024f2:	f023 0310 	bic.w	r3, r3, #16
 80024f6:	6113      	str	r3, [r2, #16]
    }
    if (__timer_4_config__ ->ISR_Routines.Update_ISR) {
 80024f8:	4b11      	ldr	r3, [pc, #68]	@ (8002540 <TIM4_IRQHandler+0xd4>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00a      	beq.n	800251a <TIM4_IRQHandler+0xae>
    	__timer_4_config__ ->ISR_Routines.Update_ISR();
 8002504:	4b0e      	ldr	r3, [pc, #56]	@ (8002540 <TIM4_IRQHandler+0xd4>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800250c:	4798      	blx	r3

    	TIM4->SR &= ~TIM_SR_UIF;  // Clear the Capture Compare interrupt flag
 800250e:	4b0d      	ldr	r3, [pc, #52]	@ (8002544 <TIM4_IRQHandler+0xd8>)
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	4a0c      	ldr	r2, [pc, #48]	@ (8002544 <TIM4_IRQHandler+0xd8>)
 8002514:	f023 0301 	bic.w	r3, r3, #1
 8002518:	6113      	str	r3, [r2, #16]
    }
    if (__timer_4_config__ ->ISR_Routines.Trigger_ISR) {
 800251a:	4b09      	ldr	r3, [pc, #36]	@ (8002540 <TIM4_IRQHandler+0xd4>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00a      	beq.n	800253c <TIM4_IRQHandler+0xd0>
    	__timer_4_config__ ->ISR_Routines.Trigger_ISR();
 8002526:	4b06      	ldr	r3, [pc, #24]	@ (8002540 <TIM4_IRQHandler+0xd4>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800252e:	4798      	blx	r3

    	TIM4->SR &= ~TIM_SR_TIF;  // Clear the Capture Compare interrupt flag
 8002530:	4b04      	ldr	r3, [pc, #16]	@ (8002544 <TIM4_IRQHandler+0xd8>)
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	4a03      	ldr	r2, [pc, #12]	@ (8002544 <TIM4_IRQHandler+0xd8>)
 8002536:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800253a:	6113      	str	r3, [r2, #16]
    }
}
 800253c:	bf00      	nop
 800253e:	bd80      	pop	{r7, pc}
 8002540:	200000c4 	.word	0x200000c4
 8002544:	40000800 	.word	0x40000800

08002548 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
    if (__timer_5_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 800254c:	4b33      	ldr	r3, [pc, #204]	@ (800261c <TIM5_IRQHandler+0xd4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00a      	beq.n	800256e <TIM5_IRQHandler+0x26>
    	__timer_5_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8002558:	4b30      	ldr	r3, [pc, #192]	@ (800261c <TIM5_IRQHandler+0xd4>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002560:	4798      	blx	r3

    	TIM5->SR &= ~TIM_SR_CC1IF;  // Clear the Capture Compare interrupt flag
 8002562:	4b2f      	ldr	r3, [pc, #188]	@ (8002620 <TIM5_IRQHandler+0xd8>)
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	4a2e      	ldr	r2, [pc, #184]	@ (8002620 <TIM5_IRQHandler+0xd8>)
 8002568:	f023 0302 	bic.w	r3, r3, #2
 800256c:	6113      	str	r3, [r2, #16]
    }
    if (__timer_5_config__ ->ISR_Routines.Capture_Compare_2_ISR) {
 800256e:	4b2b      	ldr	r3, [pc, #172]	@ (800261c <TIM5_IRQHandler+0xd4>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00a      	beq.n	8002590 <TIM5_IRQHandler+0x48>
    	__timer_5_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 800257a:	4b28      	ldr	r3, [pc, #160]	@ (800261c <TIM5_IRQHandler+0xd4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002582:	4798      	blx	r3

    	TIM5->SR &= ~TIM_SR_CC2IF;  // Clear the Capture Compare interrupt flag
 8002584:	4b26      	ldr	r3, [pc, #152]	@ (8002620 <TIM5_IRQHandler+0xd8>)
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	4a25      	ldr	r2, [pc, #148]	@ (8002620 <TIM5_IRQHandler+0xd8>)
 800258a:	f023 0304 	bic.w	r3, r3, #4
 800258e:	6113      	str	r3, [r2, #16]
    }
    if (__timer_5_config__ ->ISR_Routines.Capture_Compare_3_ISR) {
 8002590:	4b22      	ldr	r3, [pc, #136]	@ (800261c <TIM5_IRQHandler+0xd4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00a      	beq.n	80025b2 <TIM5_IRQHandler+0x6a>
    	__timer_5_config__ ->ISR_Routines.Capture_Compare_3_ISR();
 800259c:	4b1f      	ldr	r3, [pc, #124]	@ (800261c <TIM5_IRQHandler+0xd4>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025a4:	4798      	blx	r3

    	TIM5->SR &= ~TIM_SR_CC3IF;  // Clear the Capture Compare interrupt flag
 80025a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002620 <TIM5_IRQHandler+0xd8>)
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	4a1d      	ldr	r2, [pc, #116]	@ (8002620 <TIM5_IRQHandler+0xd8>)
 80025ac:	f023 0308 	bic.w	r3, r3, #8
 80025b0:	6113      	str	r3, [r2, #16]
    }
    if (__timer_5_config__ ->ISR_Routines.Capture_Compare_4_ISR) {
 80025b2:	4b1a      	ldr	r3, [pc, #104]	@ (800261c <TIM5_IRQHandler+0xd4>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00a      	beq.n	80025d4 <TIM5_IRQHandler+0x8c>
    	__timer_5_config__ ->ISR_Routines.Capture_Compare_4_ISR();
 80025be:	4b17      	ldr	r3, [pc, #92]	@ (800261c <TIM5_IRQHandler+0xd4>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80025c6:	4798      	blx	r3

    	TIM5->SR &= ~TIM_SR_CC4IF;  // Clear the Capture Compare interrupt flag
 80025c8:	4b15      	ldr	r3, [pc, #84]	@ (8002620 <TIM5_IRQHandler+0xd8>)
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	4a14      	ldr	r2, [pc, #80]	@ (8002620 <TIM5_IRQHandler+0xd8>)
 80025ce:	f023 0310 	bic.w	r3, r3, #16
 80025d2:	6113      	str	r3, [r2, #16]
    }
    if (__timer_5_config__ ->ISR_Routines.Update_ISR) {
 80025d4:	4b11      	ldr	r3, [pc, #68]	@ (800261c <TIM5_IRQHandler+0xd4>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00a      	beq.n	80025f6 <TIM5_IRQHandler+0xae>
    	__timer_5_config__ ->ISR_Routines.Update_ISR();
 80025e0:	4b0e      	ldr	r3, [pc, #56]	@ (800261c <TIM5_IRQHandler+0xd4>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025e8:	4798      	blx	r3

    	TIM5->SR &= ~TIM_SR_UIF;  // Clear the Capture Compare interrupt flag
 80025ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002620 <TIM5_IRQHandler+0xd8>)
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	4a0c      	ldr	r2, [pc, #48]	@ (8002620 <TIM5_IRQHandler+0xd8>)
 80025f0:	f023 0301 	bic.w	r3, r3, #1
 80025f4:	6113      	str	r3, [r2, #16]
    }
    if (__timer_5_config__ ->ISR_Routines.Trigger_ISR) {
 80025f6:	4b09      	ldr	r3, [pc, #36]	@ (800261c <TIM5_IRQHandler+0xd4>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00a      	beq.n	8002618 <TIM5_IRQHandler+0xd0>
    	__timer_5_config__ ->ISR_Routines.Trigger_ISR();
 8002602:	4b06      	ldr	r3, [pc, #24]	@ (800261c <TIM5_IRQHandler+0xd4>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800260a:	4798      	blx	r3

    	TIM5->SR &= ~TIM_SR_TIF;  // Clear the Capture Compare interrupt flag
 800260c:	4b04      	ldr	r3, [pc, #16]	@ (8002620 <TIM5_IRQHandler+0xd8>)
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	4a03      	ldr	r2, [pc, #12]	@ (8002620 <TIM5_IRQHandler+0xd8>)
 8002612:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002616:	6113      	str	r3, [r2, #16]
    }
}
 8002618:	bf00      	nop
 800261a:	bd80      	pop	{r7, pc}
 800261c:	200000c8 	.word	0x200000c8
 8002620:	40000c00 	.word	0x40000c00

08002624 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
    if (__timer_6_config__->ISR_Routines.Update_ISR) {
 8002628:	4b09      	ldr	r3, [pc, #36]	@ (8002650 <TIM6_DAC_IRQHandler+0x2c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00a      	beq.n	800264a <TIM6_DAC_IRQHandler+0x26>
  	  TIM6->SR &= ~TIM_SR_UIF;  // Clear the Capture Compare interrupt flag
 8002634:	4b07      	ldr	r3, [pc, #28]	@ (8002654 <TIM6_DAC_IRQHandler+0x30>)
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	4a06      	ldr	r2, [pc, #24]	@ (8002654 <TIM6_DAC_IRQHandler+0x30>)
 800263a:	f023 0301 	bic.w	r3, r3, #1
 800263e:	6113      	str	r3, [r2, #16]
    	__timer_6_config__->ISR_Routines.Update_ISR();
 8002640:	4b03      	ldr	r3, [pc, #12]	@ (8002650 <TIM6_DAC_IRQHandler+0x2c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002648:	4798      	blx	r3


    }

}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	200000cc 	.word	0x200000cc
 8002654:	40001000 	.word	0x40001000

08002658 <TIM7_IRQHandler>:

void TIM7_IRQHandler(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
    if (__timer_7_config__->ISR_Routines.Update_ISR) {
 800265c:	4b09      	ldr	r3, [pc, #36]	@ (8002684 <TIM7_IRQHandler+0x2c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00a      	beq.n	800267e <TIM7_IRQHandler+0x26>
    	__timer_7_config__->ISR_Routines.Update_ISR();
 8002668:	4b06      	ldr	r3, [pc, #24]	@ (8002684 <TIM7_IRQHandler+0x2c>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002670:	4798      	blx	r3

    	TIM7->SR &= ~TIM_SR_UIF;  // Clear the Capture Compare interrupt flag
 8002672:	4b05      	ldr	r3, [pc, #20]	@ (8002688 <TIM7_IRQHandler+0x30>)
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	4a04      	ldr	r2, [pc, #16]	@ (8002688 <TIM7_IRQHandler+0x30>)
 8002678:	f023 0301 	bic.w	r3, r3, #1
 800267c:	6113      	str	r3, [r2, #16]
    }
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	200000d0 	.word	0x200000d0
 8002688:	40001400 	.word	0x40001400

0800268c <TIM8_BRK_TIM12_IRQHandler>:
//		(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_4))
//{
//	NVIC_EnableIRQ(TIM8_CC_IRQn);
//}

void TIM8_BRK_TIM12_IRQHandler(void) {
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
    if (__timer_8_config__ ->ISR_Routines.Break_ISR) {
 8002690:	4b2b      	ldr	r3, [pc, #172]	@ (8002740 <TIM8_BRK_TIM12_IRQHandler+0xb4>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00a      	beq.n	80026b2 <TIM8_BRK_TIM12_IRQHandler+0x26>
    	__timer_8_config__ ->ISR_Routines.Break_ISR();
 800269c:	4b28      	ldr	r3, [pc, #160]	@ (8002740 <TIM8_BRK_TIM12_IRQHandler+0xb4>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80026a4:	4798      	blx	r3
    	TIM1->SR &= ~TIM_SR_BIF;  // Clear the Break interrupt flag
 80026a6:	4b27      	ldr	r3, [pc, #156]	@ (8002744 <TIM8_BRK_TIM12_IRQHandler+0xb8>)
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	4a26      	ldr	r2, [pc, #152]	@ (8002744 <TIM8_BRK_TIM12_IRQHandler+0xb8>)
 80026ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026b0:	6113      	str	r3, [r2, #16]
    }

    if (__timer_12_config__ ->ISR_Routines.Capture_Compare_1_ISR){
 80026b2:	4b25      	ldr	r3, [pc, #148]	@ (8002748 <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00a      	beq.n	80026d4 <TIM8_BRK_TIM12_IRQHandler+0x48>
    	__timer_12_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 80026be:	4b22      	ldr	r3, [pc, #136]	@ (8002748 <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026c6:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_CC1IF;  // Clear the Break interrupt flag
 80026c8:	4b20      	ldr	r3, [pc, #128]	@ (800274c <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	4a1f      	ldr	r2, [pc, #124]	@ (800274c <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 80026ce:	f023 0302 	bic.w	r3, r3, #2
 80026d2:	6113      	str	r3, [r2, #16]
    }

    if (__timer_12_config__ ->ISR_Routines.Capture_Compare_2_ISR){
 80026d4:	4b1c      	ldr	r3, [pc, #112]	@ (8002748 <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00a      	beq.n	80026f6 <TIM8_BRK_TIM12_IRQHandler+0x6a>
    	__timer_12_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 80026e0:	4b19      	ldr	r3, [pc, #100]	@ (8002748 <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026e8:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_CC2IF;  // Clear the Break interrupt flag
 80026ea:	4b18      	ldr	r3, [pc, #96]	@ (800274c <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	4a17      	ldr	r2, [pc, #92]	@ (800274c <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 80026f0:	f023 0304 	bic.w	r3, r3, #4
 80026f4:	6113      	str	r3, [r2, #16]
    }

    if (__timer_12_config__ ->ISR_Routines.Update_ISR){
 80026f6:	4b14      	ldr	r3, [pc, #80]	@ (8002748 <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00a      	beq.n	8002718 <TIM8_BRK_TIM12_IRQHandler+0x8c>
    	__timer_12_config__ ->ISR_Routines.Update_ISR();
 8002702:	4b11      	ldr	r3, [pc, #68]	@ (8002748 <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800270a:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_UIF;  // Clear the Break interrupt flag
 800270c:	4b0f      	ldr	r3, [pc, #60]	@ (800274c <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	4a0e      	ldr	r2, [pc, #56]	@ (800274c <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 8002712:	f023 0301 	bic.w	r3, r3, #1
 8002716:	6113      	str	r3, [r2, #16]
    }

    if (__timer_12_config__ ->ISR_Routines.Trigger_ISR){
 8002718:	4b0b      	ldr	r3, [pc, #44]	@ (8002748 <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00a      	beq.n	800273a <TIM8_BRK_TIM12_IRQHandler+0xae>
    	__timer_12_config__ ->ISR_Routines.Trigger_ISR();
 8002724:	4b08      	ldr	r3, [pc, #32]	@ (8002748 <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800272c:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_TIF;  // Clear the Break interrupt flag
 800272e:	4b07      	ldr	r3, [pc, #28]	@ (800274c <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	4a06      	ldr	r2, [pc, #24]	@ (800274c <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 8002734:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002738:	6113      	str	r3, [r2, #16]
    }

}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	200000d4 	.word	0x200000d4
 8002744:	40010000 	.word	0x40010000
 8002748:	200000e4 	.word	0x200000e4
 800274c:	40014000 	.word	0x40014000

08002750 <TIM8_UP_TIM13_IRQHandler>:

void TIM8_UP_TIM13_IRQHandler(void) {
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
    if (__timer_1_config__ ->ISR_Routines.Update_ISR) {
 8002754:	4b1a      	ldr	r3, [pc, #104]	@ (80027c0 <TIM8_UP_TIM13_IRQHandler+0x70>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00a      	beq.n	8002776 <TIM8_UP_TIM13_IRQHandler+0x26>
    	__timer_1_config__ ->ISR_Routines.Update_ISR();
 8002760:	4b17      	ldr	r3, [pc, #92]	@ (80027c0 <TIM8_UP_TIM13_IRQHandler+0x70>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002768:	4798      	blx	r3
    	TIM1->SR &= ~TIM_SR_UIF;  // Clear the Update interrupt flag
 800276a:	4b16      	ldr	r3, [pc, #88]	@ (80027c4 <TIM8_UP_TIM13_IRQHandler+0x74>)
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	4a15      	ldr	r2, [pc, #84]	@ (80027c4 <TIM8_UP_TIM13_IRQHandler+0x74>)
 8002770:	f023 0301 	bic.w	r3, r3, #1
 8002774:	6113      	str	r3, [r2, #16]
    }

    if (__timer_13_config__ ->ISR_Routines.Update_ISR) {
 8002776:	4b14      	ldr	r3, [pc, #80]	@ (80027c8 <TIM8_UP_TIM13_IRQHandler+0x78>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00a      	beq.n	8002798 <TIM8_UP_TIM13_IRQHandler+0x48>
    	__timer_13_config__ ->ISR_Routines.Update_ISR();
 8002782:	4b11      	ldr	r3, [pc, #68]	@ (80027c8 <TIM8_UP_TIM13_IRQHandler+0x78>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800278a:	4798      	blx	r3
    	TIM13->SR &= ~TIM_SR_UIF;  // Clear the Update interrupt flag
 800278c:	4b0f      	ldr	r3, [pc, #60]	@ (80027cc <TIM8_UP_TIM13_IRQHandler+0x7c>)
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	4a0e      	ldr	r2, [pc, #56]	@ (80027cc <TIM8_UP_TIM13_IRQHandler+0x7c>)
 8002792:	f023 0301 	bic.w	r3, r3, #1
 8002796:	6113      	str	r3, [r2, #16]
    }

    if (__timer_13_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8002798:	4b0b      	ldr	r3, [pc, #44]	@ (80027c8 <TIM8_UP_TIM13_IRQHandler+0x78>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00a      	beq.n	80027ba <TIM8_UP_TIM13_IRQHandler+0x6a>
    	__timer_13_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 80027a4:	4b08      	ldr	r3, [pc, #32]	@ (80027c8 <TIM8_UP_TIM13_IRQHandler+0x78>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ac:	4798      	blx	r3
    	TIM13->SR &= ~TIM_SR_CC1IF;  // Clear the Update interrupt flag
 80027ae:	4b07      	ldr	r3, [pc, #28]	@ (80027cc <TIM8_UP_TIM13_IRQHandler+0x7c>)
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	4a06      	ldr	r2, [pc, #24]	@ (80027cc <TIM8_UP_TIM13_IRQHandler+0x7c>)
 80027b4:	f023 0302 	bic.w	r3, r3, #2
 80027b8:	6113      	str	r3, [r2, #16]
    }

}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	200000b8 	.word	0x200000b8
 80027c4:	40010000 	.word	0x40010000
 80027c8:	200000e8 	.word	0x200000e8
 80027cc:	40001c00 	.word	0x40001c00

080027d0 <TIM8_TRG_COM_TIM14_IRQHandler>:

void TIM8_TRG_COM_TIM14_IRQHandler(void) {
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
    if (__timer_8_config__ ->ISR_Routines.Trigger_ISR) {
 80027d4:	4b22      	ldr	r3, [pc, #136]	@ (8002860 <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00a      	beq.n	80027f6 <TIM8_TRG_COM_TIM14_IRQHandler+0x26>
    	__timer_8_config__ ->ISR_Routines.Trigger_ISR();
 80027e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002860 <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80027e8:	4798      	blx	r3

    	TIM8->SR &= ~TIM_SR_TIF;  // Clear the Trigger interrupt flag
 80027ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002864 <TIM8_TRG_COM_TIM14_IRQHandler+0x94>)
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	4a1d      	ldr	r2, [pc, #116]	@ (8002864 <TIM8_TRG_COM_TIM14_IRQHandler+0x94>)
 80027f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027f4:	6113      	str	r3, [r2, #16]
    }

    if (__timer_8_config__ ->ISR_Routines.Commutation_ISR) {
 80027f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002860 <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00a      	beq.n	8002818 <TIM8_TRG_COM_TIM14_IRQHandler+0x48>
    	__timer_8_config__ ->ISR_Routines.Commutation_ISR();
 8002802:	4b17      	ldr	r3, [pc, #92]	@ (8002860 <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800280a:	4798      	blx	r3

    	TIM8->SR &= ~TIM_SR_COMIF;  // Clear the Trigger interrupt flag
 800280c:	4b15      	ldr	r3, [pc, #84]	@ (8002864 <TIM8_TRG_COM_TIM14_IRQHandler+0x94>)
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	4a14      	ldr	r2, [pc, #80]	@ (8002864 <TIM8_TRG_COM_TIM14_IRQHandler+0x94>)
 8002812:	f023 0320 	bic.w	r3, r3, #32
 8002816:	6113      	str	r3, [r2, #16]
    }

    if (__timer_14_config__ ->ISR_Routines.Update_ISR) {
 8002818:	4b13      	ldr	r3, [pc, #76]	@ (8002868 <TIM8_TRG_COM_TIM14_IRQHandler+0x98>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00a      	beq.n	800283a <TIM8_TRG_COM_TIM14_IRQHandler+0x6a>
    	__timer_14_config__ ->ISR_Routines.Update_ISR();
 8002824:	4b10      	ldr	r3, [pc, #64]	@ (8002868 <TIM8_TRG_COM_TIM14_IRQHandler+0x98>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800282c:	4798      	blx	r3
    	TIM14->SR &= ~TIM_SR_UIF;  // Clear the Update interrupt flag
 800282e:	4b0f      	ldr	r3, [pc, #60]	@ (800286c <TIM8_TRG_COM_TIM14_IRQHandler+0x9c>)
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	4a0e      	ldr	r2, [pc, #56]	@ (800286c <TIM8_TRG_COM_TIM14_IRQHandler+0x9c>)
 8002834:	f023 0301 	bic.w	r3, r3, #1
 8002838:	6113      	str	r3, [r2, #16]
    }

    if (__timer_14_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 800283a:	4b0b      	ldr	r3, [pc, #44]	@ (8002868 <TIM8_TRG_COM_TIM14_IRQHandler+0x98>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00a      	beq.n	800285c <TIM8_TRG_COM_TIM14_IRQHandler+0x8c>
    	__timer_14_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8002846:	4b08      	ldr	r3, [pc, #32]	@ (8002868 <TIM8_TRG_COM_TIM14_IRQHandler+0x98>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800284e:	4798      	blx	r3
    	TIM14->SR &= ~TIM_SR_CC1IF;  // Clear the Update interrupt flag
 8002850:	4b06      	ldr	r3, [pc, #24]	@ (800286c <TIM8_TRG_COM_TIM14_IRQHandler+0x9c>)
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	4a05      	ldr	r2, [pc, #20]	@ (800286c <TIM8_TRG_COM_TIM14_IRQHandler+0x9c>)
 8002856:	f023 0302 	bic.w	r3, r3, #2
 800285a:	6113      	str	r3, [r2, #16]
    }

}
 800285c:	bf00      	nop
 800285e:	bd80      	pop	{r7, pc}
 8002860:	200000d4 	.word	0x200000d4
 8002864:	40010400 	.word	0x40010400
 8002868:	200000ec 	.word	0x200000ec
 800286c:	40002000 	.word	0x40002000

08002870 <TIM8_CC_IRQHandler>:

void TIM8_CC_IRQHandler(void) {
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
    if (__timer_8_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8002874:	4b22      	ldr	r3, [pc, #136]	@ (8002900 <TIM8_CC_IRQHandler+0x90>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00a      	beq.n	8002896 <TIM8_CC_IRQHandler+0x26>
    	__timer_8_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8002880:	4b1f      	ldr	r3, [pc, #124]	@ (8002900 <TIM8_CC_IRQHandler+0x90>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002888:	4798      	blx	r3

    	TIM8->SR &= ~TIM_SR_CC1IF;  // Clear the Capture Compare interrupt flag
 800288a:	4b1e      	ldr	r3, [pc, #120]	@ (8002904 <TIM8_CC_IRQHandler+0x94>)
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	4a1d      	ldr	r2, [pc, #116]	@ (8002904 <TIM8_CC_IRQHandler+0x94>)
 8002890:	f023 0302 	bic.w	r3, r3, #2
 8002894:	6113      	str	r3, [r2, #16]
    }

    if (__timer_8_config__ ->ISR_Routines.Capture_Compare_2_ISR) {
 8002896:	4b1a      	ldr	r3, [pc, #104]	@ (8002900 <TIM8_CC_IRQHandler+0x90>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00a      	beq.n	80028b8 <TIM8_CC_IRQHandler+0x48>
    	__timer_8_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 80028a2:	4b17      	ldr	r3, [pc, #92]	@ (8002900 <TIM8_CC_IRQHandler+0x90>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028aa:	4798      	blx	r3

    	TIM8->SR &= ~TIM_SR_CC2IF;  // Clear the Capture Compare interrupt flag
 80028ac:	4b15      	ldr	r3, [pc, #84]	@ (8002904 <TIM8_CC_IRQHandler+0x94>)
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	4a14      	ldr	r2, [pc, #80]	@ (8002904 <TIM8_CC_IRQHandler+0x94>)
 80028b2:	f023 0304 	bic.w	r3, r3, #4
 80028b6:	6113      	str	r3, [r2, #16]
    }

    if (__timer_8_config__ ->ISR_Routines.Capture_Compare_3_ISR) {
 80028b8:	4b11      	ldr	r3, [pc, #68]	@ (8002900 <TIM8_CC_IRQHandler+0x90>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00a      	beq.n	80028da <TIM8_CC_IRQHandler+0x6a>
    	__timer_8_config__ ->ISR_Routines.Capture_Compare_3_ISR();
 80028c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002900 <TIM8_CC_IRQHandler+0x90>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028cc:	4798      	blx	r3

    	TIM8->SR &= ~TIM_SR_CC3IF;  // Clear the Capture Compare interrupt flag
 80028ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002904 <TIM8_CC_IRQHandler+0x94>)
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	4a0c      	ldr	r2, [pc, #48]	@ (8002904 <TIM8_CC_IRQHandler+0x94>)
 80028d4:	f023 0308 	bic.w	r3, r3, #8
 80028d8:	6113      	str	r3, [r2, #16]
    }

    if (__timer_8_config__ ->ISR_Routines.Capture_Compare_4_ISR) {
 80028da:	4b09      	ldr	r3, [pc, #36]	@ (8002900 <TIM8_CC_IRQHandler+0x90>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00a      	beq.n	80028fc <TIM8_CC_IRQHandler+0x8c>
    	__timer_8_config__ ->ISR_Routines.Capture_Compare_4_ISR();
 80028e6:	4b06      	ldr	r3, [pc, #24]	@ (8002900 <TIM8_CC_IRQHandler+0x90>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80028ee:	4798      	blx	r3

    	TIM8->SR &= ~TIM_SR_CC4IF;  // Clear the Capture Compare interrupt flag
 80028f0:	4b04      	ldr	r3, [pc, #16]	@ (8002904 <TIM8_CC_IRQHandler+0x94>)
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	4a03      	ldr	r2, [pc, #12]	@ (8002904 <TIM8_CC_IRQHandler+0x94>)
 80028f6:	f023 0310 	bic.w	r3, r3, #16
 80028fa:	6113      	str	r3, [r2, #16]
    }
}
 80028fc:	bf00      	nop
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	200000d4 	.word	0x200000d4
 8002904:	40010400 	.word	0x40010400

08002908 <Timer_1_Pin_Init>:


static void Timer_1_Pin_Init(Timer_Config *config)
{
 8002908:	b590      	push	{r4, r7, lr}
 800290a:	b087      	sub	sp, #28
 800290c:	af04      	add	r7, sp, #16
 800290e:	6078      	str	r0, [r7, #4]

		RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;
 8002910:	4b7d      	ldr	r3, [pc, #500]	@ (8002b08 <Timer_1_Pin_Init+0x200>)
 8002912:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002914:	4a7c      	ldr	r2, [pc, #496]	@ (8002b08 <Timer_1_Pin_Init+0x200>)
 8002916:	f043 0301 	orr.w	r3, r3, #1
 800291a:	6453      	str	r3, [r2, #68]	@ 0x44


		if(config -> Channel_1.Enable ==  true)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	7c1b      	ldrb	r3, [r3, #16]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d026      	beq.n	8002972 <Timer_1_Pin_Init+0x6a>
		{
			if(config -> Channel_1.Pin == Timer_Configurations.Channel.Pin.Timer_1.CH1_PA8)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	8a9b      	ldrh	r3, [r3, #20]
 8002928:	22a8      	movs	r2, #168	@ 0xa8
 800292a:	4293      	cmp	r3, r2
 800292c:	d10e      	bne.n	800294c <Timer_1_Pin_Init+0x44>
				GPIO_Pin_Init(GPIOA, 8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_1);
 800292e:	2002      	movs	r0, #2
 8002930:	2402      	movs	r4, #2
 8002932:	2303      	movs	r3, #3
 8002934:	2204      	movs	r2, #4
 8002936:	2101      	movs	r1, #1
 8002938:	9102      	str	r1, [sp, #8]
 800293a:	9201      	str	r2, [sp, #4]
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	4623      	mov	r3, r4
 8002940:	4602      	mov	r2, r0
 8002942:	2108      	movs	r1, #8
 8002944:	4871      	ldr	r0, [pc, #452]	@ (8002b0c <Timer_1_Pin_Init+0x204>)
 8002946:	f7ff faa7 	bl	8001e98 <GPIO_Pin_Init>
 800294a:	e012      	b.n	8002972 <Timer_1_Pin_Init+0x6a>
			else if(config -> Channel_1.Pin == Timer_Configurations.Channel.Pin.Timer_1.CH1_PE9)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	8a9b      	ldrh	r3, [r3, #20]
 8002950:	22e9      	movs	r2, #233	@ 0xe9
 8002952:	4293      	cmp	r3, r2
 8002954:	d10d      	bne.n	8002972 <Timer_1_Pin_Init+0x6a>
				GPIO_Pin_Init(GPIOE, 9, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_1);
 8002956:	2002      	movs	r0, #2
 8002958:	2402      	movs	r4, #2
 800295a:	2303      	movs	r3, #3
 800295c:	2204      	movs	r2, #4
 800295e:	2101      	movs	r1, #1
 8002960:	9102      	str	r1, [sp, #8]
 8002962:	9201      	str	r2, [sp, #4]
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	4623      	mov	r3, r4
 8002968:	4602      	mov	r2, r0
 800296a:	2109      	movs	r1, #9
 800296c:	4868      	ldr	r0, [pc, #416]	@ (8002b10 <Timer_1_Pin_Init+0x208>)
 800296e:	f7ff fa93 	bl	8001e98 <GPIO_Pin_Init>
		}

		if(config -> Channel_2.Enable ==  true)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	7d9b      	ldrb	r3, [r3, #22]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d027      	beq.n	80029ca <Timer_1_Pin_Init+0xc2>
		{
			if(config -> Channel_2.Pin == Timer_Configurations.Channel.Pin.Timer_1.CH2_PA9)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	8b5b      	ldrh	r3, [r3, #26]
 800297e:	22a9      	movs	r2, #169	@ 0xa9
 8002980:	4293      	cmp	r3, r2
 8002982:	d10e      	bne.n	80029a2 <Timer_1_Pin_Init+0x9a>
				GPIO_Pin_Init(GPIOA, 9, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_1);
 8002984:	2002      	movs	r0, #2
 8002986:	2402      	movs	r4, #2
 8002988:	2303      	movs	r3, #3
 800298a:	2204      	movs	r2, #4
 800298c:	2101      	movs	r1, #1
 800298e:	9102      	str	r1, [sp, #8]
 8002990:	9201      	str	r2, [sp, #4]
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	4623      	mov	r3, r4
 8002996:	4602      	mov	r2, r0
 8002998:	2109      	movs	r1, #9
 800299a:	485c      	ldr	r0, [pc, #368]	@ (8002b0c <Timer_1_Pin_Init+0x204>)
 800299c:	f7ff fa7c 	bl	8001e98 <GPIO_Pin_Init>
 80029a0:	e013      	b.n	80029ca <Timer_1_Pin_Init+0xc2>
			else if(config -> Channel_2.Pin == Timer_Configurations.Channel.Pin.Timer_1.CH2_PE11)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	8b5b      	ldrh	r3, [r3, #26]
 80029a6:	f640 6211 	movw	r2, #3601	@ 0xe11
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d10d      	bne.n	80029ca <Timer_1_Pin_Init+0xc2>
				GPIO_Pin_Init(GPIOE, 11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_1);
 80029ae:	2002      	movs	r0, #2
 80029b0:	2402      	movs	r4, #2
 80029b2:	2303      	movs	r3, #3
 80029b4:	2204      	movs	r2, #4
 80029b6:	2101      	movs	r1, #1
 80029b8:	9102      	str	r1, [sp, #8]
 80029ba:	9201      	str	r2, [sp, #4]
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	4623      	mov	r3, r4
 80029c0:	4602      	mov	r2, r0
 80029c2:	210b      	movs	r1, #11
 80029c4:	4852      	ldr	r0, [pc, #328]	@ (8002b10 <Timer_1_Pin_Init+0x208>)
 80029c6:	f7ff fa67 	bl	8001e98 <GPIO_Pin_Init>
		}

		if(config -> Channel_3.Enable ==  true)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	7f1b      	ldrb	r3, [r3, #28]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d028      	beq.n	8002a24 <Timer_1_Pin_Init+0x11c>
		{
			if(config -> Channel_3.Pin == Timer_Configurations.Channel.Pin.Timer_1.CH3_PA10)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	8c1b      	ldrh	r3, [r3, #32]
 80029d6:	f44f 6221 	mov.w	r2, #2576	@ 0xa10
 80029da:	4293      	cmp	r3, r2
 80029dc:	d10e      	bne.n	80029fc <Timer_1_Pin_Init+0xf4>
				GPIO_Pin_Init(GPIOA, 10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_1);
 80029de:	2002      	movs	r0, #2
 80029e0:	2402      	movs	r4, #2
 80029e2:	2303      	movs	r3, #3
 80029e4:	2204      	movs	r2, #4
 80029e6:	2101      	movs	r1, #1
 80029e8:	9102      	str	r1, [sp, #8]
 80029ea:	9201      	str	r2, [sp, #4]
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	4623      	mov	r3, r4
 80029f0:	4602      	mov	r2, r0
 80029f2:	210a      	movs	r1, #10
 80029f4:	4845      	ldr	r0, [pc, #276]	@ (8002b0c <Timer_1_Pin_Init+0x204>)
 80029f6:	f7ff fa4f 	bl	8001e98 <GPIO_Pin_Init>
 80029fa:	e013      	b.n	8002a24 <Timer_1_Pin_Init+0x11c>
			else if(config -> Channel_3.Pin == Timer_Configurations.Channel.Pin.Timer_1.CH3_PE13)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	8c1b      	ldrh	r3, [r3, #32]
 8002a00:	f640 6213 	movw	r2, #3603	@ 0xe13
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d10d      	bne.n	8002a24 <Timer_1_Pin_Init+0x11c>
				GPIO_Pin_Init(GPIOE, 13, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_1);
 8002a08:	2002      	movs	r0, #2
 8002a0a:	2402      	movs	r4, #2
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	2204      	movs	r2, #4
 8002a10:	2101      	movs	r1, #1
 8002a12:	9102      	str	r1, [sp, #8]
 8002a14:	9201      	str	r2, [sp, #4]
 8002a16:	9300      	str	r3, [sp, #0]
 8002a18:	4623      	mov	r3, r4
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	210d      	movs	r1, #13
 8002a1e:	483c      	ldr	r0, [pc, #240]	@ (8002b10 <Timer_1_Pin_Init+0x208>)
 8002a20:	f7ff fa3a 	bl	8001e98 <GPIO_Pin_Init>
		}

		if(config -> Channel_4.Enable ==  true)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d028      	beq.n	8002a80 <Timer_1_Pin_Init+0x178>
		{
			if(config -> Channel_4.Pin == Timer_Configurations.Channel.Pin.Timer_1.CH4_PA11)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a32:	f640 2211 	movw	r2, #2577	@ 0xa11
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d10e      	bne.n	8002a58 <Timer_1_Pin_Init+0x150>
				GPIO_Pin_Init(GPIOA, 11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_1);
 8002a3a:	2002      	movs	r0, #2
 8002a3c:	2402      	movs	r4, #2
 8002a3e:	2303      	movs	r3, #3
 8002a40:	2204      	movs	r2, #4
 8002a42:	2101      	movs	r1, #1
 8002a44:	9102      	str	r1, [sp, #8]
 8002a46:	9201      	str	r2, [sp, #4]
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	4623      	mov	r3, r4
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	210b      	movs	r1, #11
 8002a50:	482e      	ldr	r0, [pc, #184]	@ (8002b0c <Timer_1_Pin_Init+0x204>)
 8002a52:	f7ff fa21 	bl	8001e98 <GPIO_Pin_Init>
 8002a56:	e013      	b.n	8002a80 <Timer_1_Pin_Init+0x178>
			else if(config -> Channel_4.Pin == Timer_Configurations.Channel.Pin.Timer_1.CH4_PE14)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a5c:	f640 6214 	movw	r2, #3604	@ 0xe14
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d10d      	bne.n	8002a80 <Timer_1_Pin_Init+0x178>
				GPIO_Pin_Init(GPIOE, 14, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_1);
 8002a64:	2002      	movs	r0, #2
 8002a66:	2402      	movs	r4, #2
 8002a68:	2303      	movs	r3, #3
 8002a6a:	2204      	movs	r2, #4
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	9102      	str	r1, [sp, #8]
 8002a70:	9201      	str	r2, [sp, #4]
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	4623      	mov	r3, r4
 8002a76:	4602      	mov	r2, r0
 8002a78:	210e      	movs	r1, #14
 8002a7a:	4825      	ldr	r0, [pc, #148]	@ (8002b10 <Timer_1_Pin_Init+0x208>)
 8002a7c:	f7ff fa0c 	bl	8001e98 <GPIO_Pin_Init>
		}


		if(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Break_Interrupt)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002a86:	461a      	mov	r2, r3
 8002a88:	2380      	movs	r3, #128	@ 0x80
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d103      	bne.n	8002a96 <Timer_1_Pin_Init+0x18e>
		{
			NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002a8e:	2018      	movs	r0, #24
 8002a90:	f7ff faaa 	bl	8001fe8 <__NVIC_EnableIRQ>
				(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_3) ||
				(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_4))
		{
			NVIC_EnableIRQ(TIM1_CC_IRQn);
		}
}
 8002a94:	e034      	b.n	8002b00 <Timer_1_Pin_Init+0x1f8>
		else if(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.COM_Interrupt)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	2320      	movs	r3, #32
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d103      	bne.n	8002aac <Timer_1_Pin_Init+0x1a4>
			NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002aa4:	201a      	movs	r0, #26
 8002aa6:	f7ff fa9f 	bl	8001fe8 <__NVIC_EnableIRQ>
}
 8002aaa:	e029      	b.n	8002b00 <Timer_1_Pin_Init+0x1f8>
		else if(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Update_Interrupt)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d103      	bne.n	8002ac2 <Timer_1_Pin_Init+0x1ba>
			NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002aba:	2019      	movs	r0, #25
 8002abc:	f7ff fa94 	bl	8001fe8 <__NVIC_EnableIRQ>
}
 8002ac0:	e01e      	b.n	8002b00 <Timer_1_Pin_Init+0x1f8>
		else if((config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002ac8:	461a      	mov	r2, r3
 8002aca:	2302      	movs	r3, #2
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d014      	beq.n	8002afa <Timer_1_Pin_Init+0x1f2>
				(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_2) ||
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	2304      	movs	r3, #4
		else if((config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d00d      	beq.n	8002afa <Timer_1_Pin_Init+0x1f2>
				(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_3) ||
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	2308      	movs	r3, #8
				(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_2) ||
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d006      	beq.n	8002afa <Timer_1_Pin_Init+0x1f2>
				(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_4))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002af2:	461a      	mov	r2, r3
 8002af4:	2310      	movs	r3, #16
				(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_3) ||
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d102      	bne.n	8002b00 <Timer_1_Pin_Init+0x1f8>
			NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002afa:	201b      	movs	r0, #27
 8002afc:	f7ff fa74 	bl	8001fe8 <__NVIC_EnableIRQ>
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd90      	pop	{r4, r7, pc}
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	40020000 	.word	0x40020000
 8002b10:	40021000 	.word	0x40021000

08002b14 <Timer_2_Pin_Init>:

static void Timer_2_Pin_Init(Timer_Config *config)
{
 8002b14:	b590      	push	{r4, r7, lr}
 8002b16:	b087      	sub	sp, #28
 8002b18:	af04      	add	r7, sp, #16
 8002b1a:	6078      	str	r0, [r7, #4]

		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8002b1c:	4b7e      	ldr	r3, [pc, #504]	@ (8002d18 <Timer_2_Pin_Init+0x204>)
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b20:	4a7d      	ldr	r2, [pc, #500]	@ (8002d18 <Timer_2_Pin_Init+0x204>)
 8002b22:	f043 0301 	orr.w	r3, r3, #1
 8002b26:	6413      	str	r3, [r2, #64]	@ 0x40

		__timer_2_config__ = config;
 8002b28:	4a7c      	ldr	r2, [pc, #496]	@ (8002d1c <Timer_2_Pin_Init+0x208>)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6013      	str	r3, [r2, #0]

		if(config -> Channel_1.Enable ==  true)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	7c1b      	ldrb	r3, [r3, #16]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d03b      	beq.n	8002bae <Timer_2_Pin_Init+0x9a>
		{
			if(config -> Channel_1.Pin == Timer_Configurations.Channel.Pin.Timer_2.CH1_PA0)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	8a9b      	ldrh	r3, [r3, #20]
 8002b3a:	22a0      	movs	r2, #160	@ 0xa0
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d10e      	bne.n	8002b5e <Timer_2_Pin_Init+0x4a>
				GPIO_Pin_Init(GPIOA, 0, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_2);
 8002b40:	2002      	movs	r0, #2
 8002b42:	2400      	movs	r4, #0
 8002b44:	2303      	movs	r3, #3
 8002b46:	2204      	movs	r2, #4
 8002b48:	2101      	movs	r1, #1
 8002b4a:	9102      	str	r1, [sp, #8]
 8002b4c:	9201      	str	r2, [sp, #4]
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	4623      	mov	r3, r4
 8002b52:	4602      	mov	r2, r0
 8002b54:	2100      	movs	r1, #0
 8002b56:	4872      	ldr	r0, [pc, #456]	@ (8002d20 <Timer_2_Pin_Init+0x20c>)
 8002b58:	f7ff f99e 	bl	8001e98 <GPIO_Pin_Init>
 8002b5c:	e027      	b.n	8002bae <Timer_2_Pin_Init+0x9a>
			else if(config -> Channel_1.Pin == Timer_Configurations.Channel.Pin.Timer_2.CH1_PA15)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	8a9b      	ldrh	r3, [r3, #20]
 8002b62:	f640 2215 	movw	r2, #2581	@ 0xa15
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d10e      	bne.n	8002b88 <Timer_2_Pin_Init+0x74>
				GPIO_Pin_Init(GPIOA, 15, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_2);
 8002b6a:	2002      	movs	r0, #2
 8002b6c:	2402      	movs	r4, #2
 8002b6e:	2303      	movs	r3, #3
 8002b70:	2204      	movs	r2, #4
 8002b72:	2101      	movs	r1, #1
 8002b74:	9102      	str	r1, [sp, #8]
 8002b76:	9201      	str	r2, [sp, #4]
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	4623      	mov	r3, r4
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	210f      	movs	r1, #15
 8002b80:	4867      	ldr	r0, [pc, #412]	@ (8002d20 <Timer_2_Pin_Init+0x20c>)
 8002b82:	f7ff f989 	bl	8001e98 <GPIO_Pin_Init>
 8002b86:	e012      	b.n	8002bae <Timer_2_Pin_Init+0x9a>
			else if(config -> Channel_1.Pin == Timer_Configurations.Channel.Pin.Timer_2.CH1_PA5)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	8a9b      	ldrh	r3, [r3, #20]
 8002b8c:	22a5      	movs	r2, #165	@ 0xa5
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d10d      	bne.n	8002bae <Timer_2_Pin_Init+0x9a>
				GPIO_Pin_Init(GPIOA, 5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_2);
 8002b92:	2002      	movs	r0, #2
 8002b94:	2402      	movs	r4, #2
 8002b96:	2303      	movs	r3, #3
 8002b98:	2204      	movs	r2, #4
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	9102      	str	r1, [sp, #8]
 8002b9e:	9201      	str	r2, [sp, #4]
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	4623      	mov	r3, r4
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	2105      	movs	r1, #5
 8002ba8:	485d      	ldr	r0, [pc, #372]	@ (8002d20 <Timer_2_Pin_Init+0x20c>)
 8002baa:	f7ff f975 	bl	8001e98 <GPIO_Pin_Init>
		}

		if(config -> Channel_2.Enable ==  true)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	7d9b      	ldrb	r3, [r3, #22]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d026      	beq.n	8002c04 <Timer_2_Pin_Init+0xf0>
		{
			if(config -> Channel_2.Pin == Timer_Configurations.Channel.Pin.Timer_2.CH2_PA1)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	8b5b      	ldrh	r3, [r3, #26]
 8002bba:	22a1      	movs	r2, #161	@ 0xa1
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d10e      	bne.n	8002bde <Timer_2_Pin_Init+0xca>
				GPIO_Pin_Init(GPIOA, 1, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_2);
 8002bc0:	2002      	movs	r0, #2
 8002bc2:	2400      	movs	r4, #0
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	2204      	movs	r2, #4
 8002bc8:	2101      	movs	r1, #1
 8002bca:	9102      	str	r1, [sp, #8]
 8002bcc:	9201      	str	r2, [sp, #4]
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	4623      	mov	r3, r4
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	4852      	ldr	r0, [pc, #328]	@ (8002d20 <Timer_2_Pin_Init+0x20c>)
 8002bd8:	f7ff f95e 	bl	8001e98 <GPIO_Pin_Init>
 8002bdc:	e012      	b.n	8002c04 <Timer_2_Pin_Init+0xf0>
			else if(config -> Channel_2.Pin == Timer_Configurations.Channel.Pin.Timer_2.CH2_PB3)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	8b5b      	ldrh	r3, [r3, #26]
 8002be2:	22b3      	movs	r2, #179	@ 0xb3
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d10d      	bne.n	8002c04 <Timer_2_Pin_Init+0xf0>
				GPIO_Pin_Init(GPIOB,3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_2);
 8002be8:	2002      	movs	r0, #2
 8002bea:	2402      	movs	r4, #2
 8002bec:	2303      	movs	r3, #3
 8002bee:	2204      	movs	r2, #4
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	9102      	str	r1, [sp, #8]
 8002bf4:	9201      	str	r2, [sp, #4]
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	4623      	mov	r3, r4
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	2103      	movs	r1, #3
 8002bfe:	4849      	ldr	r0, [pc, #292]	@ (8002d24 <Timer_2_Pin_Init+0x210>)
 8002c00:	f7ff f94a 	bl	8001e98 <GPIO_Pin_Init>
		}

		if(config -> Channel_3.Enable ==  true)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	7f1b      	ldrb	r3, [r3, #28]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d027      	beq.n	8002c5c <Timer_2_Pin_Init+0x148>
		{
			if(config -> Channel_3.Pin == Timer_Configurations.Channel.Pin.Timer_2.CH3_PA2)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	8c1b      	ldrh	r3, [r3, #32]
 8002c10:	22a2      	movs	r2, #162	@ 0xa2
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d10e      	bne.n	8002c34 <Timer_2_Pin_Init+0x120>
				GPIO_Pin_Init(GPIOA, 2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_2);
 8002c16:	2002      	movs	r0, #2
 8002c18:	2402      	movs	r4, #2
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	2204      	movs	r2, #4
 8002c1e:	2101      	movs	r1, #1
 8002c20:	9102      	str	r1, [sp, #8]
 8002c22:	9201      	str	r2, [sp, #4]
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	4623      	mov	r3, r4
 8002c28:	4602      	mov	r2, r0
 8002c2a:	2102      	movs	r1, #2
 8002c2c:	483c      	ldr	r0, [pc, #240]	@ (8002d20 <Timer_2_Pin_Init+0x20c>)
 8002c2e:	f7ff f933 	bl	8001e98 <GPIO_Pin_Init>
 8002c32:	e013      	b.n	8002c5c <Timer_2_Pin_Init+0x148>
			else if(config -> Channel_3.Pin == Timer_Configurations.Channel.Pin.Timer_2.CH3_PB10)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	8c1b      	ldrh	r3, [r3, #32]
 8002c38:	f44f 6231 	mov.w	r2, #2832	@ 0xb10
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d10d      	bne.n	8002c5c <Timer_2_Pin_Init+0x148>
				GPIO_Pin_Init(GPIOB, 10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_2);
 8002c40:	2002      	movs	r0, #2
 8002c42:	2402      	movs	r4, #2
 8002c44:	2303      	movs	r3, #3
 8002c46:	2204      	movs	r2, #4
 8002c48:	2101      	movs	r1, #1
 8002c4a:	9102      	str	r1, [sp, #8]
 8002c4c:	9201      	str	r2, [sp, #4]
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	4623      	mov	r3, r4
 8002c52:	4602      	mov	r2, r0
 8002c54:	210a      	movs	r1, #10
 8002c56:	4833      	ldr	r0, [pc, #204]	@ (8002d24 <Timer_2_Pin_Init+0x210>)
 8002c58:	f7ff f91e 	bl	8001e98 <GPIO_Pin_Init>
		}

		if(config -> Channel_4.Enable ==  true)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d027      	beq.n	8002cb6 <Timer_2_Pin_Init+0x1a2>
		{
			if(config -> Channel_4.Pin == Timer_Configurations.Channel.Pin.Timer_2.CH4_PA3)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c6a:	22a3      	movs	r2, #163	@ 0xa3
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d10e      	bne.n	8002c8e <Timer_2_Pin_Init+0x17a>
				GPIO_Pin_Init(GPIOA, 3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_2);
 8002c70:	2002      	movs	r0, #2
 8002c72:	2402      	movs	r4, #2
 8002c74:	2303      	movs	r3, #3
 8002c76:	2204      	movs	r2, #4
 8002c78:	2101      	movs	r1, #1
 8002c7a:	9102      	str	r1, [sp, #8]
 8002c7c:	9201      	str	r2, [sp, #4]
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	4623      	mov	r3, r4
 8002c82:	4602      	mov	r2, r0
 8002c84:	2103      	movs	r1, #3
 8002c86:	4826      	ldr	r0, [pc, #152]	@ (8002d20 <Timer_2_Pin_Init+0x20c>)
 8002c88:	f7ff f906 	bl	8001e98 <GPIO_Pin_Init>
 8002c8c:	e013      	b.n	8002cb6 <Timer_2_Pin_Init+0x1a2>
			else if(config -> Channel_4.Pin == Timer_Configurations.Channel.Pin.Timer_2.CH4_PB11)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c92:	f640 3211 	movw	r2, #2833	@ 0xb11
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d10d      	bne.n	8002cb6 <Timer_2_Pin_Init+0x1a2>
				GPIO_Pin_Init(GPIOB, 11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_2);
 8002c9a:	2002      	movs	r0, #2
 8002c9c:	2402      	movs	r4, #2
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	2204      	movs	r2, #4
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	9102      	str	r1, [sp, #8]
 8002ca6:	9201      	str	r2, [sp, #4]
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	4623      	mov	r3, r4
 8002cac:	4602      	mov	r2, r0
 8002cae:	210b      	movs	r1, #11
 8002cb0:	481c      	ldr	r0, [pc, #112]	@ (8002d24 <Timer_2_Pin_Init+0x210>)
 8002cb2:	f7ff f8f1 	bl	8001e98 <GPIO_Pin_Init>
		}

		if(
		   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	2302      	movs	r3, #2
		if(
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d022      	beq.n	8002d0a <Timer_2_Pin_Init+0x1f6>
		   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_2) ||
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002cca:	461a      	mov	r2, r3
 8002ccc:	2304      	movs	r3, #4
		   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d01b      	beq.n	8002d0a <Timer_2_Pin_Init+0x1f6>
		   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_3) ||
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002cd8:	461a      	mov	r2, r3
 8002cda:	2308      	movs	r3, #8
		   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_2) ||
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d014      	beq.n	8002d0a <Timer_2_Pin_Init+0x1f6>
		   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_4) ||
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	2310      	movs	r3, #16
		   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_3) ||
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d00d      	beq.n	8002d0a <Timer_2_Pin_Init+0x1f6>
		   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Trigger_Interrupt) ||
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	2340      	movs	r3, #64	@ 0x40
		   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_4) ||
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d006      	beq.n	8002d0a <Timer_2_Pin_Init+0x1f6>
		   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Update_Interrupt)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002d02:	461a      	mov	r2, r3
 8002d04:	2301      	movs	r3, #1
		   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Trigger_Interrupt) ||
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d102      	bne.n	8002d10 <Timer_2_Pin_Init+0x1fc>
		)
		{
			NVIC_EnableIRQ(TIM2_IRQn);
 8002d0a:	201c      	movs	r0, #28
 8002d0c:	f7ff f96c 	bl	8001fe8 <__NVIC_EnableIRQ>
		}

}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd90      	pop	{r4, r7, pc}
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	200000bc 	.word	0x200000bc
 8002d20:	40020000 	.word	0x40020000
 8002d24:	40020400 	.word	0x40020400

08002d28 <Timer_3_Pin_Init>:

static void Timer_3_Pin_Init(Timer_Config *config)
{
 8002d28:	b590      	push	{r4, r7, lr}
 8002d2a:	b087      	sub	sp, #28
 8002d2c:	af04      	add	r7, sp, #16
 8002d2e:	6078      	str	r0, [r7, #4]
	RCC -> APB1ENR |= RCC_APB1ENR_TIM3EN;
 8002d30:	4b85      	ldr	r3, [pc, #532]	@ (8002f48 <Timer_3_Pin_Init+0x220>)
 8002d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d34:	4a84      	ldr	r2, [pc, #528]	@ (8002f48 <Timer_3_Pin_Init+0x220>)
 8002d36:	f043 0302 	orr.w	r3, r3, #2
 8002d3a:	6413      	str	r3, [r2, #64]	@ 0x40

	if(config -> Channel_1.Enable ==  true)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	7c1b      	ldrb	r3, [r3, #16]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d03a      	beq.n	8002dba <Timer_3_Pin_Init+0x92>
	{
		if(config -> Channel_1.Pin == Timer_Configurations.Channel.Pin.Timer_3.CH1_PA6)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	8a9b      	ldrh	r3, [r3, #20]
 8002d48:	22a6      	movs	r2, #166	@ 0xa6
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d10e      	bne.n	8002d6c <Timer_3_Pin_Init+0x44>
			GPIO_Pin_Init(GPIOA, 6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_3);
 8002d4e:	2002      	movs	r0, #2
 8002d50:	2402      	movs	r4, #2
 8002d52:	2303      	movs	r3, #3
 8002d54:	2204      	movs	r2, #4
 8002d56:	2102      	movs	r1, #2
 8002d58:	9102      	str	r1, [sp, #8]
 8002d5a:	9201      	str	r2, [sp, #4]
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	4623      	mov	r3, r4
 8002d60:	4602      	mov	r2, r0
 8002d62:	2106      	movs	r1, #6
 8002d64:	4879      	ldr	r0, [pc, #484]	@ (8002f4c <Timer_3_Pin_Init+0x224>)
 8002d66:	f7ff f897 	bl	8001e98 <GPIO_Pin_Init>
 8002d6a:	e026      	b.n	8002dba <Timer_3_Pin_Init+0x92>
		else if(config -> Channel_1.Pin == Timer_Configurations.Channel.Pin.Timer_3.CH1_PB4)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	8a9b      	ldrh	r3, [r3, #20]
 8002d70:	22b4      	movs	r2, #180	@ 0xb4
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d10e      	bne.n	8002d94 <Timer_3_Pin_Init+0x6c>
			GPIO_Pin_Init(GPIOB, 4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_3);
 8002d76:	2002      	movs	r0, #2
 8002d78:	2402      	movs	r4, #2
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	2204      	movs	r2, #4
 8002d7e:	2102      	movs	r1, #2
 8002d80:	9102      	str	r1, [sp, #8]
 8002d82:	9201      	str	r2, [sp, #4]
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	4623      	mov	r3, r4
 8002d88:	4602      	mov	r2, r0
 8002d8a:	2104      	movs	r1, #4
 8002d8c:	4870      	ldr	r0, [pc, #448]	@ (8002f50 <Timer_3_Pin_Init+0x228>)
 8002d8e:	f7ff f883 	bl	8001e98 <GPIO_Pin_Init>
 8002d92:	e012      	b.n	8002dba <Timer_3_Pin_Init+0x92>
		else if(config -> Channel_1.Pin == Timer_Configurations.Channel.Pin.Timer_3.CH1_PC6)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	8a9b      	ldrh	r3, [r3, #20]
 8002d98:	22c6      	movs	r2, #198	@ 0xc6
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d10d      	bne.n	8002dba <Timer_3_Pin_Init+0x92>
			GPIO_Pin_Init(GPIOC, 6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_3);
 8002d9e:	2002      	movs	r0, #2
 8002da0:	2402      	movs	r4, #2
 8002da2:	2303      	movs	r3, #3
 8002da4:	2204      	movs	r2, #4
 8002da6:	2102      	movs	r1, #2
 8002da8:	9102      	str	r1, [sp, #8]
 8002daa:	9201      	str	r2, [sp, #4]
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	4623      	mov	r3, r4
 8002db0:	4602      	mov	r2, r0
 8002db2:	2106      	movs	r1, #6
 8002db4:	4867      	ldr	r0, [pc, #412]	@ (8002f54 <Timer_3_Pin_Init+0x22c>)
 8002db6:	f7ff f86f 	bl	8001e98 <GPIO_Pin_Init>
	}

	if(config -> Channel_2.Enable ==  true)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	7d9b      	ldrb	r3, [r3, #22]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d03a      	beq.n	8002e38 <Timer_3_Pin_Init+0x110>
	{
		if(config -> Channel_2.Pin == Timer_Configurations.Channel.Pin.Timer_3.CH2_PA7)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	8b5b      	ldrh	r3, [r3, #26]
 8002dc6:	22a7      	movs	r2, #167	@ 0xa7
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d10e      	bne.n	8002dea <Timer_3_Pin_Init+0xc2>
			GPIO_Pin_Init(GPIOA, 7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_3);
 8002dcc:	2002      	movs	r0, #2
 8002dce:	2402      	movs	r4, #2
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	2204      	movs	r2, #4
 8002dd4:	2102      	movs	r1, #2
 8002dd6:	9102      	str	r1, [sp, #8]
 8002dd8:	9201      	str	r2, [sp, #4]
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	4623      	mov	r3, r4
 8002dde:	4602      	mov	r2, r0
 8002de0:	2107      	movs	r1, #7
 8002de2:	485a      	ldr	r0, [pc, #360]	@ (8002f4c <Timer_3_Pin_Init+0x224>)
 8002de4:	f7ff f858 	bl	8001e98 <GPIO_Pin_Init>
 8002de8:	e026      	b.n	8002e38 <Timer_3_Pin_Init+0x110>
		else if(config -> Channel_2.Pin == Timer_Configurations.Channel.Pin.Timer_3.CH2_PB5)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	8b5b      	ldrh	r3, [r3, #26]
 8002dee:	22b5      	movs	r2, #181	@ 0xb5
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d10e      	bne.n	8002e12 <Timer_3_Pin_Init+0xea>
			GPIO_Pin_Init(GPIOB, 5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_3);
 8002df4:	2002      	movs	r0, #2
 8002df6:	2402      	movs	r4, #2
 8002df8:	2303      	movs	r3, #3
 8002dfa:	2204      	movs	r2, #4
 8002dfc:	2102      	movs	r1, #2
 8002dfe:	9102      	str	r1, [sp, #8]
 8002e00:	9201      	str	r2, [sp, #4]
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	4623      	mov	r3, r4
 8002e06:	4602      	mov	r2, r0
 8002e08:	2105      	movs	r1, #5
 8002e0a:	4851      	ldr	r0, [pc, #324]	@ (8002f50 <Timer_3_Pin_Init+0x228>)
 8002e0c:	f7ff f844 	bl	8001e98 <GPIO_Pin_Init>
 8002e10:	e012      	b.n	8002e38 <Timer_3_Pin_Init+0x110>
		else if(config -> Channel_2.Pin == Timer_Configurations.Channel.Pin.Timer_3.CH2_PC7)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	8b5b      	ldrh	r3, [r3, #26]
 8002e16:	22c7      	movs	r2, #199	@ 0xc7
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d10d      	bne.n	8002e38 <Timer_3_Pin_Init+0x110>
			GPIO_Pin_Init(GPIOC, 7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_3);
 8002e1c:	2002      	movs	r0, #2
 8002e1e:	2402      	movs	r4, #2
 8002e20:	2303      	movs	r3, #3
 8002e22:	2204      	movs	r2, #4
 8002e24:	2102      	movs	r1, #2
 8002e26:	9102      	str	r1, [sp, #8]
 8002e28:	9201      	str	r2, [sp, #4]
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	4623      	mov	r3, r4
 8002e2e:	4602      	mov	r2, r0
 8002e30:	2107      	movs	r1, #7
 8002e32:	4848      	ldr	r0, [pc, #288]	@ (8002f54 <Timer_3_Pin_Init+0x22c>)
 8002e34:	f7ff f830 	bl	8001e98 <GPIO_Pin_Init>
	}

	if(config -> Channel_3.Enable ==  true)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	7f1b      	ldrb	r3, [r3, #28]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d026      	beq.n	8002e8e <Timer_3_Pin_Init+0x166>
	{
		if(config -> Channel_3.Pin == Timer_Configurations.Channel.Pin.Timer_3.CH3_PB0)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	8c1b      	ldrh	r3, [r3, #32]
 8002e44:	22b0      	movs	r2, #176	@ 0xb0
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d10e      	bne.n	8002e68 <Timer_3_Pin_Init+0x140>
			GPIO_Pin_Init(GPIOB, 0, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_3);
 8002e4a:	2002      	movs	r0, #2
 8002e4c:	2402      	movs	r4, #2
 8002e4e:	2303      	movs	r3, #3
 8002e50:	2204      	movs	r2, #4
 8002e52:	2102      	movs	r1, #2
 8002e54:	9102      	str	r1, [sp, #8]
 8002e56:	9201      	str	r2, [sp, #4]
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	4623      	mov	r3, r4
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	2100      	movs	r1, #0
 8002e60:	483b      	ldr	r0, [pc, #236]	@ (8002f50 <Timer_3_Pin_Init+0x228>)
 8002e62:	f7ff f819 	bl	8001e98 <GPIO_Pin_Init>
 8002e66:	e012      	b.n	8002e8e <Timer_3_Pin_Init+0x166>
		else if(config -> Channel_3.Pin == Timer_Configurations.Channel.Pin.Timer_3.CH3_PC8)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	8c1b      	ldrh	r3, [r3, #32]
 8002e6c:	22c8      	movs	r2, #200	@ 0xc8
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d10d      	bne.n	8002e8e <Timer_3_Pin_Init+0x166>
			GPIO_Pin_Init(GPIOC, 8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_3);
 8002e72:	2002      	movs	r0, #2
 8002e74:	2402      	movs	r4, #2
 8002e76:	2303      	movs	r3, #3
 8002e78:	2204      	movs	r2, #4
 8002e7a:	2102      	movs	r1, #2
 8002e7c:	9102      	str	r1, [sp, #8]
 8002e7e:	9201      	str	r2, [sp, #4]
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	4623      	mov	r3, r4
 8002e84:	4602      	mov	r2, r0
 8002e86:	2108      	movs	r1, #8
 8002e88:	4832      	ldr	r0, [pc, #200]	@ (8002f54 <Timer_3_Pin_Init+0x22c>)
 8002e8a:	f7ff f805 	bl	8001e98 <GPIO_Pin_Init>
	}

	if(config -> Channel_4.Enable ==  true)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d026      	beq.n	8002ee6 <Timer_3_Pin_Init+0x1be>
	{
		if(config -> Channel_4.Pin == Timer_Configurations.Channel.Pin.Timer_3.CH4_PB1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e9c:	22b1      	movs	r2, #177	@ 0xb1
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d10e      	bne.n	8002ec0 <Timer_3_Pin_Init+0x198>
			GPIO_Pin_Init(GPIOB, 1, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_3);
 8002ea2:	2002      	movs	r0, #2
 8002ea4:	2402      	movs	r4, #2
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	2204      	movs	r2, #4
 8002eaa:	2102      	movs	r1, #2
 8002eac:	9102      	str	r1, [sp, #8]
 8002eae:	9201      	str	r2, [sp, #4]
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	4623      	mov	r3, r4
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	4825      	ldr	r0, [pc, #148]	@ (8002f50 <Timer_3_Pin_Init+0x228>)
 8002eba:	f7fe ffed 	bl	8001e98 <GPIO_Pin_Init>
 8002ebe:	e012      	b.n	8002ee6 <Timer_3_Pin_Init+0x1be>
		else if(config -> Channel_4.Pin == Timer_Configurations.Channel.Pin.Timer_3.CH4_PC9)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ec4:	22c9      	movs	r2, #201	@ 0xc9
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d10d      	bne.n	8002ee6 <Timer_3_Pin_Init+0x1be>
			GPIO_Pin_Init(GPIOC, 9, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_3);
 8002eca:	2002      	movs	r0, #2
 8002ecc:	2402      	movs	r4, #2
 8002ece:	2303      	movs	r3, #3
 8002ed0:	2204      	movs	r2, #4
 8002ed2:	2102      	movs	r1, #2
 8002ed4:	9102      	str	r1, [sp, #8]
 8002ed6:	9201      	str	r2, [sp, #4]
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	4623      	mov	r3, r4
 8002edc:	4602      	mov	r2, r0
 8002ede:	2109      	movs	r1, #9
 8002ee0:	481c      	ldr	r0, [pc, #112]	@ (8002f54 <Timer_3_Pin_Init+0x22c>)
 8002ee2:	f7fe ffd9 	bl	8001e98 <GPIO_Pin_Init>
	}

	if(
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002eec:	461a      	mov	r2, r3
 8002eee:	2302      	movs	r3, #2
	if(
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d022      	beq.n	8002f3a <Timer_3_Pin_Init+0x212>
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_2) ||
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002efa:	461a      	mov	r2, r3
 8002efc:	2304      	movs	r3, #4
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d01b      	beq.n	8002f3a <Timer_3_Pin_Init+0x212>
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_3) ||
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002f08:	461a      	mov	r2, r3
 8002f0a:	2308      	movs	r3, #8
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_2) ||
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d014      	beq.n	8002f3a <Timer_3_Pin_Init+0x212>
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_4) ||
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002f16:	461a      	mov	r2, r3
 8002f18:	2310      	movs	r3, #16
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_3) ||
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d00d      	beq.n	8002f3a <Timer_3_Pin_Init+0x212>
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Trigger_Interrupt) ||
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002f24:	461a      	mov	r2, r3
 8002f26:	2340      	movs	r3, #64	@ 0x40
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_4) ||
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d006      	beq.n	8002f3a <Timer_3_Pin_Init+0x212>
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Update_Interrupt)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002f32:	461a      	mov	r2, r3
 8002f34:	2301      	movs	r3, #1
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Trigger_Interrupt) ||
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d102      	bne.n	8002f40 <Timer_3_Pin_Init+0x218>
	)
	{
		NVIC_EnableIRQ(TIM3_IRQn);
 8002f3a:	201d      	movs	r0, #29
 8002f3c:	f7ff f854 	bl	8001fe8 <__NVIC_EnableIRQ>
	}
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd90      	pop	{r4, r7, pc}
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	40020000 	.word	0x40020000
 8002f50:	40020400 	.word	0x40020400
 8002f54:	40020800 	.word	0x40020800

08002f58 <Timer_4_Pin_Init>:
static void Timer_4_Pin_Init(Timer_Config *config)
{
 8002f58:	b590      	push	{r4, r7, lr}
 8002f5a:	b087      	sub	sp, #28
 8002f5c:	af04      	add	r7, sp, #16
 8002f5e:	6078      	str	r0, [r7, #4]
	RCC -> APB1ENR |= RCC_APB1ENR_TIM4EN;
 8002f60:	4b72      	ldr	r3, [pc, #456]	@ (800312c <Timer_4_Pin_Init+0x1d4>)
 8002f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f64:	4a71      	ldr	r2, [pc, #452]	@ (800312c <Timer_4_Pin_Init+0x1d4>)
 8002f66:	f043 0304 	orr.w	r3, r3, #4
 8002f6a:	6413      	str	r3, [r2, #64]	@ 0x40

	if(config -> Channel_1.Enable ==  true)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	7c1b      	ldrb	r3, [r3, #16]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d027      	beq.n	8002fc4 <Timer_4_Pin_Init+0x6c>
	{
		if(config -> Channel_1.Pin == Timer_Configurations.Channel.Pin.Timer_4.CH1_PB6)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	8a9b      	ldrh	r3, [r3, #20]
 8002f78:	22b6      	movs	r2, #182	@ 0xb6
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d10e      	bne.n	8002f9c <Timer_4_Pin_Init+0x44>
			GPIO_Pin_Init(GPIOB, 6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_4);
 8002f7e:	2002      	movs	r0, #2
 8002f80:	2402      	movs	r4, #2
 8002f82:	2303      	movs	r3, #3
 8002f84:	2204      	movs	r2, #4
 8002f86:	2102      	movs	r1, #2
 8002f88:	9102      	str	r1, [sp, #8]
 8002f8a:	9201      	str	r2, [sp, #4]
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	4623      	mov	r3, r4
 8002f90:	4602      	mov	r2, r0
 8002f92:	2106      	movs	r1, #6
 8002f94:	4866      	ldr	r0, [pc, #408]	@ (8003130 <Timer_4_Pin_Init+0x1d8>)
 8002f96:	f7fe ff7f 	bl	8001e98 <GPIO_Pin_Init>
 8002f9a:	e013      	b.n	8002fc4 <Timer_4_Pin_Init+0x6c>
		else if(config -> Channel_1.Pin == Timer_Configurations.Channel.Pin.Timer_4.CH1_PD12)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	8a9b      	ldrh	r3, [r3, #20]
 8002fa0:	f640 5212 	movw	r2, #3346	@ 0xd12
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d10d      	bne.n	8002fc4 <Timer_4_Pin_Init+0x6c>
			GPIO_Pin_Init(GPIOD, 12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_4);
 8002fa8:	2002      	movs	r0, #2
 8002faa:	2402      	movs	r4, #2
 8002fac:	2303      	movs	r3, #3
 8002fae:	2204      	movs	r2, #4
 8002fb0:	2102      	movs	r1, #2
 8002fb2:	9102      	str	r1, [sp, #8]
 8002fb4:	9201      	str	r2, [sp, #4]
 8002fb6:	9300      	str	r3, [sp, #0]
 8002fb8:	4623      	mov	r3, r4
 8002fba:	4602      	mov	r2, r0
 8002fbc:	210c      	movs	r1, #12
 8002fbe:	485d      	ldr	r0, [pc, #372]	@ (8003134 <Timer_4_Pin_Init+0x1dc>)
 8002fc0:	f7fe ff6a 	bl	8001e98 <GPIO_Pin_Init>
	}

	if(config -> Channel_2.Enable ==  true)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	7d9b      	ldrb	r3, [r3, #22]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d027      	beq.n	800301c <Timer_4_Pin_Init+0xc4>
	{
		if(config -> Channel_2.Pin == Timer_Configurations.Channel.Pin.Timer_4.CH2_PB7)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	8b5b      	ldrh	r3, [r3, #26]
 8002fd0:	22b7      	movs	r2, #183	@ 0xb7
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d10e      	bne.n	8002ff4 <Timer_4_Pin_Init+0x9c>
			GPIO_Pin_Init(GPIOB, 7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_4);
 8002fd6:	2002      	movs	r0, #2
 8002fd8:	2402      	movs	r4, #2
 8002fda:	2303      	movs	r3, #3
 8002fdc:	2204      	movs	r2, #4
 8002fde:	2102      	movs	r1, #2
 8002fe0:	9102      	str	r1, [sp, #8]
 8002fe2:	9201      	str	r2, [sp, #4]
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	4623      	mov	r3, r4
 8002fe8:	4602      	mov	r2, r0
 8002fea:	2107      	movs	r1, #7
 8002fec:	4850      	ldr	r0, [pc, #320]	@ (8003130 <Timer_4_Pin_Init+0x1d8>)
 8002fee:	f7fe ff53 	bl	8001e98 <GPIO_Pin_Init>
 8002ff2:	e013      	b.n	800301c <Timer_4_Pin_Init+0xc4>
		else if(config -> Channel_2.Pin == Timer_Configurations.Channel.Pin.Timer_4.CH2_PD13)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	8b5b      	ldrh	r3, [r3, #26]
 8002ff8:	f640 5213 	movw	r2, #3347	@ 0xd13
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d10d      	bne.n	800301c <Timer_4_Pin_Init+0xc4>
			GPIO_Pin_Init(GPIOD, 13, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_4);
 8003000:	2002      	movs	r0, #2
 8003002:	2402      	movs	r4, #2
 8003004:	2303      	movs	r3, #3
 8003006:	2204      	movs	r2, #4
 8003008:	2102      	movs	r1, #2
 800300a:	9102      	str	r1, [sp, #8]
 800300c:	9201      	str	r2, [sp, #4]
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	4623      	mov	r3, r4
 8003012:	4602      	mov	r2, r0
 8003014:	210d      	movs	r1, #13
 8003016:	4847      	ldr	r0, [pc, #284]	@ (8003134 <Timer_4_Pin_Init+0x1dc>)
 8003018:	f7fe ff3e 	bl	8001e98 <GPIO_Pin_Init>
	}

	if(config -> Channel_3.Enable ==  true)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	7f1b      	ldrb	r3, [r3, #28]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d026      	beq.n	8003072 <Timer_4_Pin_Init+0x11a>
	{
		if(config -> Channel_3.Pin == Timer_Configurations.Channel.Pin.Timer_3.CH3_PB0)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	8c1b      	ldrh	r3, [r3, #32]
 8003028:	22b0      	movs	r2, #176	@ 0xb0
 800302a:	4293      	cmp	r3, r2
 800302c:	d10e      	bne.n	800304c <Timer_4_Pin_Init+0xf4>
			GPIO_Pin_Init(GPIOB, 0, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_4);
 800302e:	2002      	movs	r0, #2
 8003030:	2402      	movs	r4, #2
 8003032:	2303      	movs	r3, #3
 8003034:	2204      	movs	r2, #4
 8003036:	2102      	movs	r1, #2
 8003038:	9102      	str	r1, [sp, #8]
 800303a:	9201      	str	r2, [sp, #4]
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	4623      	mov	r3, r4
 8003040:	4602      	mov	r2, r0
 8003042:	2100      	movs	r1, #0
 8003044:	483a      	ldr	r0, [pc, #232]	@ (8003130 <Timer_4_Pin_Init+0x1d8>)
 8003046:	f7fe ff27 	bl	8001e98 <GPIO_Pin_Init>
 800304a:	e012      	b.n	8003072 <Timer_4_Pin_Init+0x11a>
		else if(config -> Channel_3.Pin == Timer_Configurations.Channel.Pin.Timer_3.CH3_PC8)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	8c1b      	ldrh	r3, [r3, #32]
 8003050:	22c8      	movs	r2, #200	@ 0xc8
 8003052:	4293      	cmp	r3, r2
 8003054:	d10d      	bne.n	8003072 <Timer_4_Pin_Init+0x11a>
			GPIO_Pin_Init(GPIOC, 8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_4);
 8003056:	2002      	movs	r0, #2
 8003058:	2402      	movs	r4, #2
 800305a:	2303      	movs	r3, #3
 800305c:	2204      	movs	r2, #4
 800305e:	2102      	movs	r1, #2
 8003060:	9102      	str	r1, [sp, #8]
 8003062:	9201      	str	r2, [sp, #4]
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	4623      	mov	r3, r4
 8003068:	4602      	mov	r2, r0
 800306a:	2108      	movs	r1, #8
 800306c:	4832      	ldr	r0, [pc, #200]	@ (8003138 <Timer_4_Pin_Init+0x1e0>)
 800306e:	f7fe ff13 	bl	8001e98 <GPIO_Pin_Init>
	}

	if(config -> Channel_4.Enable ==  true)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8003078:	2b00      	cmp	r3, #0
 800307a:	d026      	beq.n	80030ca <Timer_4_Pin_Init+0x172>
	{
		if(config -> Channel_4.Pin == Timer_Configurations.Channel.Pin.Timer_3.CH4_PB1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003080:	22b1      	movs	r2, #177	@ 0xb1
 8003082:	4293      	cmp	r3, r2
 8003084:	d10e      	bne.n	80030a4 <Timer_4_Pin_Init+0x14c>
			GPIO_Pin_Init(GPIOB, 1, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_4);
 8003086:	2002      	movs	r0, #2
 8003088:	2402      	movs	r4, #2
 800308a:	2303      	movs	r3, #3
 800308c:	2204      	movs	r2, #4
 800308e:	2102      	movs	r1, #2
 8003090:	9102      	str	r1, [sp, #8]
 8003092:	9201      	str	r2, [sp, #4]
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	4623      	mov	r3, r4
 8003098:	4602      	mov	r2, r0
 800309a:	2101      	movs	r1, #1
 800309c:	4824      	ldr	r0, [pc, #144]	@ (8003130 <Timer_4_Pin_Init+0x1d8>)
 800309e:	f7fe fefb 	bl	8001e98 <GPIO_Pin_Init>
 80030a2:	e012      	b.n	80030ca <Timer_4_Pin_Init+0x172>
		else if(config -> Channel_4.Pin == Timer_Configurations.Channel.Pin.Timer_3.CH4_PC9)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80030a8:	22c9      	movs	r2, #201	@ 0xc9
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d10d      	bne.n	80030ca <Timer_4_Pin_Init+0x172>
			GPIO_Pin_Init(GPIOC, 9, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_4);
 80030ae:	2002      	movs	r0, #2
 80030b0:	2402      	movs	r4, #2
 80030b2:	2303      	movs	r3, #3
 80030b4:	2204      	movs	r2, #4
 80030b6:	2102      	movs	r1, #2
 80030b8:	9102      	str	r1, [sp, #8]
 80030ba:	9201      	str	r2, [sp, #4]
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	4623      	mov	r3, r4
 80030c0:	4602      	mov	r2, r0
 80030c2:	2109      	movs	r1, #9
 80030c4:	481c      	ldr	r0, [pc, #112]	@ (8003138 <Timer_4_Pin_Init+0x1e0>)
 80030c6:	f7fe fee7 	bl	8001e98 <GPIO_Pin_Init>
	}

	if(
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80030d0:	461a      	mov	r2, r3
 80030d2:	2302      	movs	r3, #2
	if(
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d022      	beq.n	800311e <Timer_4_Pin_Init+0x1c6>
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_2) ||
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80030de:	461a      	mov	r2, r3
 80030e0:	2304      	movs	r3, #4
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d01b      	beq.n	800311e <Timer_4_Pin_Init+0x1c6>
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_3) ||
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80030ec:	461a      	mov	r2, r3
 80030ee:	2308      	movs	r3, #8
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_2) ||
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d014      	beq.n	800311e <Timer_4_Pin_Init+0x1c6>
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_4) ||
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80030fa:	461a      	mov	r2, r3
 80030fc:	2310      	movs	r3, #16
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_3) ||
 80030fe:	429a      	cmp	r2, r3
 8003100:	d00d      	beq.n	800311e <Timer_4_Pin_Init+0x1c6>
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Trigger_Interrupt) ||
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8003108:	461a      	mov	r2, r3
 800310a:	2340      	movs	r3, #64	@ 0x40
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_4) ||
 800310c:	429a      	cmp	r2, r3
 800310e:	d006      	beq.n	800311e <Timer_4_Pin_Init+0x1c6>
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Update_Interrupt)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8003116:	461a      	mov	r2, r3
 8003118:	2301      	movs	r3, #1
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Trigger_Interrupt) ||
 800311a:	429a      	cmp	r2, r3
 800311c:	d102      	bne.n	8003124 <Timer_4_Pin_Init+0x1cc>
	)
	{
		NVIC_EnableIRQ(TIM4_IRQn);
 800311e:	201e      	movs	r0, #30
 8003120:	f7fe ff62 	bl	8001fe8 <__NVIC_EnableIRQ>
	}
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	bd90      	pop	{r4, r7, pc}
 800312c:	40023800 	.word	0x40023800
 8003130:	40020400 	.word	0x40020400
 8003134:	40020c00 	.word	0x40020c00
 8003138:	40020800 	.word	0x40020800

0800313c <Timer_5_Pin_Init>:
static void Timer_5_Pin_Init(Timer_Config *config)
{
 800313c:	b590      	push	{r4, r7, lr}
 800313e:	b087      	sub	sp, #28
 8003140:	af04      	add	r7, sp, #16
 8003142:	6078      	str	r0, [r7, #4]
	RCC -> APB1ENR |= RCC_APB1ENR_TIM5EN;
 8003144:	4b49      	ldr	r3, [pc, #292]	@ (800326c <Timer_5_Pin_Init+0x130>)
 8003146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003148:	4a48      	ldr	r2, [pc, #288]	@ (800326c <Timer_5_Pin_Init+0x130>)
 800314a:	f043 0308 	orr.w	r3, r3, #8
 800314e:	6413      	str	r3, [r2, #64]	@ 0x40

	if(config -> Channel_1.Enable ==  true)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	7c1b      	ldrb	r3, [r3, #16]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d012      	beq.n	800317e <Timer_5_Pin_Init+0x42>
	{
		if(config -> Channel_1.Pin == Timer_Configurations.Channel.Pin.Timer_5.CH1_PA0)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	8a9b      	ldrh	r3, [r3, #20]
 800315c:	22a0      	movs	r2, #160	@ 0xa0
 800315e:	4293      	cmp	r3, r2
 8003160:	d10d      	bne.n	800317e <Timer_5_Pin_Init+0x42>
			GPIO_Pin_Init(GPIOA, 0, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_5);
 8003162:	2002      	movs	r0, #2
 8003164:	2402      	movs	r4, #2
 8003166:	2303      	movs	r3, #3
 8003168:	2204      	movs	r2, #4
 800316a:	2102      	movs	r1, #2
 800316c:	9102      	str	r1, [sp, #8]
 800316e:	9201      	str	r2, [sp, #4]
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	4623      	mov	r3, r4
 8003174:	4602      	mov	r2, r0
 8003176:	2100      	movs	r1, #0
 8003178:	483d      	ldr	r0, [pc, #244]	@ (8003270 <Timer_5_Pin_Init+0x134>)
 800317a:	f7fe fe8d 	bl	8001e98 <GPIO_Pin_Init>
	}

	if(config -> Channel_2.Enable ==  true)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	7d9b      	ldrb	r3, [r3, #22]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d012      	beq.n	80031ac <Timer_5_Pin_Init+0x70>
	{
		if(config -> Channel_2.Pin == Timer_Configurations.Channel.Pin.Timer_5.CH2_PA1)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	8b5b      	ldrh	r3, [r3, #26]
 800318a:	22a1      	movs	r2, #161	@ 0xa1
 800318c:	4293      	cmp	r3, r2
 800318e:	d10d      	bne.n	80031ac <Timer_5_Pin_Init+0x70>
			GPIO_Pin_Init(GPIOA, 1, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_5);
 8003190:	2002      	movs	r0, #2
 8003192:	2402      	movs	r4, #2
 8003194:	2303      	movs	r3, #3
 8003196:	2204      	movs	r2, #4
 8003198:	2102      	movs	r1, #2
 800319a:	9102      	str	r1, [sp, #8]
 800319c:	9201      	str	r2, [sp, #4]
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	4623      	mov	r3, r4
 80031a2:	4602      	mov	r2, r0
 80031a4:	2101      	movs	r1, #1
 80031a6:	4832      	ldr	r0, [pc, #200]	@ (8003270 <Timer_5_Pin_Init+0x134>)
 80031a8:	f7fe fe76 	bl	8001e98 <GPIO_Pin_Init>
	}

	if(config -> Channel_3.Enable ==  true)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	7f1b      	ldrb	r3, [r3, #28]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d012      	beq.n	80031da <Timer_5_Pin_Init+0x9e>
	{
		if(config -> Channel_3.Pin == Timer_Configurations.Channel.Pin.Timer_5.CH3_PA2)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	8c1b      	ldrh	r3, [r3, #32]
 80031b8:	22a2      	movs	r2, #162	@ 0xa2
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d10d      	bne.n	80031da <Timer_5_Pin_Init+0x9e>
			GPIO_Pin_Init(GPIOB, 0, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_5);
 80031be:	2002      	movs	r0, #2
 80031c0:	2402      	movs	r4, #2
 80031c2:	2303      	movs	r3, #3
 80031c4:	2204      	movs	r2, #4
 80031c6:	2102      	movs	r1, #2
 80031c8:	9102      	str	r1, [sp, #8]
 80031ca:	9201      	str	r2, [sp, #4]
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	4623      	mov	r3, r4
 80031d0:	4602      	mov	r2, r0
 80031d2:	2100      	movs	r1, #0
 80031d4:	4827      	ldr	r0, [pc, #156]	@ (8003274 <Timer_5_Pin_Init+0x138>)
 80031d6:	f7fe fe5f 	bl	8001e98 <GPIO_Pin_Init>
	}

	if(config -> Channel_4.Enable ==  true)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d012      	beq.n	800320a <Timer_5_Pin_Init+0xce>
	{
		if(config -> Channel_4.Pin == Timer_Configurations.Channel.Pin.Timer_5.CH4_PA3)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80031e8:	22a3      	movs	r2, #163	@ 0xa3
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d10d      	bne.n	800320a <Timer_5_Pin_Init+0xce>
			GPIO_Pin_Init(GPIOB, 1, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_5);
 80031ee:	2002      	movs	r0, #2
 80031f0:	2402      	movs	r4, #2
 80031f2:	2303      	movs	r3, #3
 80031f4:	2204      	movs	r2, #4
 80031f6:	2102      	movs	r1, #2
 80031f8:	9102      	str	r1, [sp, #8]
 80031fa:	9201      	str	r2, [sp, #4]
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	4623      	mov	r3, r4
 8003200:	4602      	mov	r2, r0
 8003202:	2101      	movs	r1, #1
 8003204:	481b      	ldr	r0, [pc, #108]	@ (8003274 <Timer_5_Pin_Init+0x138>)
 8003206:	f7fe fe47 	bl	8001e98 <GPIO_Pin_Init>
	}

	if(
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8003210:	461a      	mov	r2, r3
 8003212:	2302      	movs	r3, #2
	if(
 8003214:	429a      	cmp	r2, r3
 8003216:	d022      	beq.n	800325e <Timer_5_Pin_Init+0x122>
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_2) ||
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800321e:	461a      	mov	r2, r3
 8003220:	2304      	movs	r3, #4
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 8003222:	429a      	cmp	r2, r3
 8003224:	d01b      	beq.n	800325e <Timer_5_Pin_Init+0x122>
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_3) ||
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800322c:	461a      	mov	r2, r3
 800322e:	2308      	movs	r3, #8
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_2) ||
 8003230:	429a      	cmp	r2, r3
 8003232:	d014      	beq.n	800325e <Timer_5_Pin_Init+0x122>
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_4) ||
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800323a:	461a      	mov	r2, r3
 800323c:	2310      	movs	r3, #16
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_3) ||
 800323e:	429a      	cmp	r2, r3
 8003240:	d00d      	beq.n	800325e <Timer_5_Pin_Init+0x122>
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Trigger_Interrupt) ||
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8003248:	461a      	mov	r2, r3
 800324a:	2340      	movs	r3, #64	@ 0x40
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_4) ||
 800324c:	429a      	cmp	r2, r3
 800324e:	d006      	beq.n	800325e <Timer_5_Pin_Init+0x122>
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Update_Interrupt)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8003256:	461a      	mov	r2, r3
 8003258:	2301      	movs	r3, #1
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Trigger_Interrupt) ||
 800325a:	429a      	cmp	r2, r3
 800325c:	d102      	bne.n	8003264 <Timer_5_Pin_Init+0x128>
	)
	{
		NVIC_EnableIRQ(TIM5_IRQn);
 800325e:	2032      	movs	r0, #50	@ 0x32
 8003260:	f7fe fec2 	bl	8001fe8 <__NVIC_EnableIRQ>
	}
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	bd90      	pop	{r4, r7, pc}
 800326c:	40023800 	.word	0x40023800
 8003270:	40020000 	.word	0x40020000
 8003274:	40020400 	.word	0x40020400

08003278 <Timer_8_Pin_Init>:
static void Timer_8_Pin_Init(Timer_Config *config)
{
 8003278:	b590      	push	{r4, r7, lr}
 800327a:	b087      	sub	sp, #28
 800327c:	af04      	add	r7, sp, #16
 800327e:	6078      	str	r0, [r7, #4]
	RCC -> APB2ENR |= RCC_APB2ENR_TIM8EN;
 8003280:	4b53      	ldr	r3, [pc, #332]	@ (80033d0 <Timer_8_Pin_Init+0x158>)
 8003282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003284:	4a52      	ldr	r2, [pc, #328]	@ (80033d0 <Timer_8_Pin_Init+0x158>)
 8003286:	f043 0302 	orr.w	r3, r3, #2
 800328a:	6453      	str	r3, [r2, #68]	@ 0x44

	if(config -> Channel_1.Enable ==  true)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	7c1b      	ldrb	r3, [r3, #16]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d012      	beq.n	80032ba <Timer_8_Pin_Init+0x42>
	{
		if(config -> Channel_1.Pin == Timer_Configurations.Channel.Pin.Timer_8.CH1_PC6)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	8a9b      	ldrh	r3, [r3, #20]
 8003298:	22c6      	movs	r2, #198	@ 0xc6
 800329a:	4293      	cmp	r3, r2
 800329c:	d10d      	bne.n	80032ba <Timer_8_Pin_Init+0x42>
			GPIO_Pin_Init(GPIOC, 6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_8);
 800329e:	2002      	movs	r0, #2
 80032a0:	2402      	movs	r4, #2
 80032a2:	2303      	movs	r3, #3
 80032a4:	2204      	movs	r2, #4
 80032a6:	2103      	movs	r1, #3
 80032a8:	9102      	str	r1, [sp, #8]
 80032aa:	9201      	str	r2, [sp, #4]
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	4623      	mov	r3, r4
 80032b0:	4602      	mov	r2, r0
 80032b2:	2106      	movs	r1, #6
 80032b4:	4847      	ldr	r0, [pc, #284]	@ (80033d4 <Timer_8_Pin_Init+0x15c>)
 80032b6:	f7fe fdef 	bl	8001e98 <GPIO_Pin_Init>
	}

	if(config -> Channel_2.Enable ==  true)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	7d9b      	ldrb	r3, [r3, #22]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d012      	beq.n	80032e8 <Timer_8_Pin_Init+0x70>
	{
		if(config -> Channel_2.Pin == Timer_Configurations.Channel.Pin.Timer_8.CH2_PC7)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	8b5b      	ldrh	r3, [r3, #26]
 80032c6:	22c7      	movs	r2, #199	@ 0xc7
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d10d      	bne.n	80032e8 <Timer_8_Pin_Init+0x70>
			GPIO_Pin_Init(GPIOC, 7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_8);
 80032cc:	2002      	movs	r0, #2
 80032ce:	2402      	movs	r4, #2
 80032d0:	2303      	movs	r3, #3
 80032d2:	2204      	movs	r2, #4
 80032d4:	2103      	movs	r1, #3
 80032d6:	9102      	str	r1, [sp, #8]
 80032d8:	9201      	str	r2, [sp, #4]
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	4623      	mov	r3, r4
 80032de:	4602      	mov	r2, r0
 80032e0:	2107      	movs	r1, #7
 80032e2:	483c      	ldr	r0, [pc, #240]	@ (80033d4 <Timer_8_Pin_Init+0x15c>)
 80032e4:	f7fe fdd8 	bl	8001e98 <GPIO_Pin_Init>
	}

	if(config -> Channel_3.Enable ==  true)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	7f1b      	ldrb	r3, [r3, #28]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d012      	beq.n	8003316 <Timer_8_Pin_Init+0x9e>
	{
		if(config -> Channel_3.Pin == Timer_Configurations.Channel.Pin.Timer_8.CH3_PC8)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	8c1b      	ldrh	r3, [r3, #32]
 80032f4:	22c8      	movs	r2, #200	@ 0xc8
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d10d      	bne.n	8003316 <Timer_8_Pin_Init+0x9e>
			GPIO_Pin_Init(GPIOC, 8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_8);
 80032fa:	2002      	movs	r0, #2
 80032fc:	2402      	movs	r4, #2
 80032fe:	2303      	movs	r3, #3
 8003300:	2204      	movs	r2, #4
 8003302:	2103      	movs	r1, #3
 8003304:	9102      	str	r1, [sp, #8]
 8003306:	9201      	str	r2, [sp, #4]
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	4623      	mov	r3, r4
 800330c:	4602      	mov	r2, r0
 800330e:	2108      	movs	r1, #8
 8003310:	4830      	ldr	r0, [pc, #192]	@ (80033d4 <Timer_8_Pin_Init+0x15c>)
 8003312:	f7fe fdc1 	bl	8001e98 <GPIO_Pin_Init>
	}

	if(config -> Channel_4.Enable ==  true)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800331c:	2b00      	cmp	r3, #0
 800331e:	d012      	beq.n	8003346 <Timer_8_Pin_Init+0xce>
	{
		if(config -> Channel_4.Pin == Timer_Configurations.Channel.Pin.Timer_8.CH4_PC9)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003324:	22c9      	movs	r2, #201	@ 0xc9
 8003326:	4293      	cmp	r3, r2
 8003328:	d10d      	bne.n	8003346 <Timer_8_Pin_Init+0xce>
			GPIO_Pin_Init(GPIOC, 9, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_8);
 800332a:	2002      	movs	r0, #2
 800332c:	2402      	movs	r4, #2
 800332e:	2303      	movs	r3, #3
 8003330:	2204      	movs	r2, #4
 8003332:	2103      	movs	r1, #3
 8003334:	9102      	str	r1, [sp, #8]
 8003336:	9201      	str	r2, [sp, #4]
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	4623      	mov	r3, r4
 800333c:	4602      	mov	r2, r0
 800333e:	2109      	movs	r1, #9
 8003340:	4824      	ldr	r0, [pc, #144]	@ (80033d4 <Timer_8_Pin_Init+0x15c>)
 8003342:	f7fe fda9 	bl	8001e98 <GPIO_Pin_Init>
	}


	if(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Break_Interrupt)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800334c:	461a      	mov	r2, r3
 800334e:	2380      	movs	r3, #128	@ 0x80
 8003350:	429a      	cmp	r2, r3
 8003352:	d103      	bne.n	800335c <Timer_8_Pin_Init+0xe4>
	{
		NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003354:	202b      	movs	r0, #43	@ 0x2b
 8003356:	f7fe fe47 	bl	8001fe8 <__NVIC_EnableIRQ>
	{
		NVIC_EnableIRQ(TIM8_CC_IRQn);
	}


}
 800335a:	e034      	b.n	80033c6 <Timer_8_Pin_Init+0x14e>
	else if(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.COM_Interrupt)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8003362:	461a      	mov	r2, r3
 8003364:	2320      	movs	r3, #32
 8003366:	429a      	cmp	r2, r3
 8003368:	d103      	bne.n	8003372 <Timer_8_Pin_Init+0xfa>
		NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800336a:	202d      	movs	r0, #45	@ 0x2d
 800336c:	f7fe fe3c 	bl	8001fe8 <__NVIC_EnableIRQ>
}
 8003370:	e029      	b.n	80033c6 <Timer_8_Pin_Init+0x14e>
	else if(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Update_Interrupt)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8003378:	461a      	mov	r2, r3
 800337a:	2301      	movs	r3, #1
 800337c:	429a      	cmp	r2, r3
 800337e:	d103      	bne.n	8003388 <Timer_8_Pin_Init+0x110>
		NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003380:	202c      	movs	r0, #44	@ 0x2c
 8003382:	f7fe fe31 	bl	8001fe8 <__NVIC_EnableIRQ>
}
 8003386:	e01e      	b.n	80033c6 <Timer_8_Pin_Init+0x14e>
	else if((config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800338e:	461a      	mov	r2, r3
 8003390:	2302      	movs	r3, #2
 8003392:	429a      	cmp	r2, r3
 8003394:	d014      	beq.n	80033c0 <Timer_8_Pin_Init+0x148>
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_2) ||
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800339c:	461a      	mov	r2, r3
 800339e:	2304      	movs	r3, #4
	else if((config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d00d      	beq.n	80033c0 <Timer_8_Pin_Init+0x148>
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_3) ||
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80033aa:	461a      	mov	r2, r3
 80033ac:	2308      	movs	r3, #8
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_2) ||
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d006      	beq.n	80033c0 <Timer_8_Pin_Init+0x148>
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_4))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80033b8:	461a      	mov	r2, r3
 80033ba:	2310      	movs	r3, #16
			(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_3) ||
 80033bc:	429a      	cmp	r2, r3
 80033be:	d102      	bne.n	80033c6 <Timer_8_Pin_Init+0x14e>
		NVIC_EnableIRQ(TIM8_CC_IRQn);
 80033c0:	202e      	movs	r0, #46	@ 0x2e
 80033c2:	f7fe fe11 	bl	8001fe8 <__NVIC_EnableIRQ>
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd90      	pop	{r4, r7, pc}
 80033ce:	bf00      	nop
 80033d0:	40023800 	.word	0x40023800
 80033d4:	40020800 	.word	0x40020800

080033d8 <Timer_9_Pin_Init>:




static void Timer_9_Pin_Init(Timer_Config *config)
{
 80033d8:	b590      	push	{r4, r7, lr}
 80033da:	b087      	sub	sp, #28
 80033dc:	af04      	add	r7, sp, #16
 80033de:	6078      	str	r0, [r7, #4]
	RCC -> APB2ENR |= RCC_APB2ENR_TIM9EN;
 80033e0:	4b38      	ldr	r3, [pc, #224]	@ (80034c4 <Timer_9_Pin_Init+0xec>)
 80033e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e4:	4a37      	ldr	r2, [pc, #220]	@ (80034c4 <Timer_9_Pin_Init+0xec>)
 80033e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033ea:	6453      	str	r3, [r2, #68]	@ 0x44

	__timer_9_config__ = config;
 80033ec:	4a36      	ldr	r2, [pc, #216]	@ (80034c8 <Timer_9_Pin_Init+0xf0>)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6013      	str	r3, [r2, #0]

	if(config -> Channel_1.Enable ==  true)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	7c1b      	ldrb	r3, [r3, #16]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d025      	beq.n	8003446 <Timer_9_Pin_Init+0x6e>
	{
		if(config -> Channel_1.Pin == Timer_Configurations.Channel.Pin.Timer_9.CH1_PA2)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	8a9b      	ldrh	r3, [r3, #20]
 80033fe:	22a2      	movs	r2, #162	@ 0xa2
 8003400:	4293      	cmp	r3, r2
 8003402:	d10d      	bne.n	8003420 <Timer_9_Pin_Init+0x48>
			GPIO_Pin_Init(GPIOA, 2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_9);
 8003404:	2002      	movs	r0, #2
 8003406:	2402      	movs	r4, #2
 8003408:	2303      	movs	r3, #3
 800340a:	2204      	movs	r2, #4
 800340c:	2103      	movs	r1, #3
 800340e:	9102      	str	r1, [sp, #8]
 8003410:	9201      	str	r2, [sp, #4]
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	4623      	mov	r3, r4
 8003416:	4602      	mov	r2, r0
 8003418:	2102      	movs	r1, #2
 800341a:	482c      	ldr	r0, [pc, #176]	@ (80034cc <Timer_9_Pin_Init+0xf4>)
 800341c:	f7fe fd3c 	bl	8001e98 <GPIO_Pin_Init>
		if(config -> Channel_1.Pin == Timer_Configurations.Channel.Pin.Timer_9.CH1_PE5)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	8a9b      	ldrh	r3, [r3, #20]
 8003424:	22e5      	movs	r2, #229	@ 0xe5
 8003426:	4293      	cmp	r3, r2
 8003428:	d10d      	bne.n	8003446 <Timer_9_Pin_Init+0x6e>
			GPIO_Pin_Init(GPIOE, 5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_9);
 800342a:	2002      	movs	r0, #2
 800342c:	2402      	movs	r4, #2
 800342e:	2303      	movs	r3, #3
 8003430:	2204      	movs	r2, #4
 8003432:	2103      	movs	r1, #3
 8003434:	9102      	str	r1, [sp, #8]
 8003436:	9201      	str	r2, [sp, #4]
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	4623      	mov	r3, r4
 800343c:	4602      	mov	r2, r0
 800343e:	2105      	movs	r1, #5
 8003440:	4823      	ldr	r0, [pc, #140]	@ (80034d0 <Timer_9_Pin_Init+0xf8>)
 8003442:	f7fe fd29 	bl	8001e98 <GPIO_Pin_Init>
	}

	if(config -> Channel_2.Enable ==  true)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	7d9b      	ldrb	r3, [r3, #22]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d025      	beq.n	800349a <Timer_9_Pin_Init+0xc2>
	{
		if(config -> Channel_2.Pin == Timer_Configurations.Channel.Pin.Timer_9.CH2_PA3)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	8b5b      	ldrh	r3, [r3, #26]
 8003452:	22a3      	movs	r2, #163	@ 0xa3
 8003454:	4293      	cmp	r3, r2
 8003456:	d10d      	bne.n	8003474 <Timer_9_Pin_Init+0x9c>
			GPIO_Pin_Init(GPIOA, 3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_9);
 8003458:	2002      	movs	r0, #2
 800345a:	2402      	movs	r4, #2
 800345c:	2303      	movs	r3, #3
 800345e:	2204      	movs	r2, #4
 8003460:	2103      	movs	r1, #3
 8003462:	9102      	str	r1, [sp, #8]
 8003464:	9201      	str	r2, [sp, #4]
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	4623      	mov	r3, r4
 800346a:	4602      	mov	r2, r0
 800346c:	2103      	movs	r1, #3
 800346e:	4817      	ldr	r0, [pc, #92]	@ (80034cc <Timer_9_Pin_Init+0xf4>)
 8003470:	f7fe fd12 	bl	8001e98 <GPIO_Pin_Init>
		if(config -> Channel_1.Pin == Timer_Configurations.Channel.Pin.Timer_9.CH1_PE5)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	8a9b      	ldrh	r3, [r3, #20]
 8003478:	22e5      	movs	r2, #229	@ 0xe5
 800347a:	4293      	cmp	r3, r2
 800347c:	d10d      	bne.n	800349a <Timer_9_Pin_Init+0xc2>
			GPIO_Pin_Init(GPIOE, 5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_9);
 800347e:	2002      	movs	r0, #2
 8003480:	2402      	movs	r4, #2
 8003482:	2303      	movs	r3, #3
 8003484:	2204      	movs	r2, #4
 8003486:	2103      	movs	r1, #3
 8003488:	9102      	str	r1, [sp, #8]
 800348a:	9201      	str	r2, [sp, #4]
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	4623      	mov	r3, r4
 8003490:	4602      	mov	r2, r0
 8003492:	2105      	movs	r1, #5
 8003494:	480e      	ldr	r0, [pc, #56]	@ (80034d0 <Timer_9_Pin_Init+0xf8>)
 8003496:	f7fe fcff 	bl	8001e98 <GPIO_Pin_Init>
	}

	if(
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80034a0:	461a      	mov	r2, r3
 80034a2:	2302      	movs	r3, #2
	if(
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d006      	beq.n	80034b6 <Timer_9_Pin_Init+0xde>
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Update_Interrupt)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80034ae:	461a      	mov	r2, r3
 80034b0:	2301      	movs	r3, #1
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d102      	bne.n	80034bc <Timer_9_Pin_Init+0xe4>
	)
	{
		NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80034b6:	2018      	movs	r0, #24
 80034b8:	f7fe fd96 	bl	8001fe8 <__NVIC_EnableIRQ>
	}
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd90      	pop	{r4, r7, pc}
 80034c4:	40023800 	.word	0x40023800
 80034c8:	200000d8 	.word	0x200000d8
 80034cc:	40020000 	.word	0x40020000
 80034d0:	40021000 	.word	0x40021000

080034d4 <Timer_10_Pin_Init>:

static void Timer_10_Pin_Init(Timer_Config *config)
{
 80034d4:	b590      	push	{r4, r7, lr}
 80034d6:	b087      	sub	sp, #28
 80034d8:	af04      	add	r7, sp, #16
 80034da:	6078      	str	r0, [r7, #4]
	RCC -> APB2ENR |= RCC_APB2ENR_TIM10EN;
 80034dc:	4b18      	ldr	r3, [pc, #96]	@ (8003540 <Timer_10_Pin_Init+0x6c>)
 80034de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034e0:	4a17      	ldr	r2, [pc, #92]	@ (8003540 <Timer_10_Pin_Init+0x6c>)
 80034e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034e6:	6453      	str	r3, [r2, #68]	@ 0x44

	if(config -> Channel_1.Enable ==  true)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	7c1b      	ldrb	r3, [r3, #16]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d012      	beq.n	8003516 <Timer_10_Pin_Init+0x42>
	{
		if(config -> Channel_1.Pin == Timer_Configurations.Channel.Pin.Timer_10.CH1_PB8)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	8a9b      	ldrh	r3, [r3, #20]
 80034f4:	22b8      	movs	r2, #184	@ 0xb8
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d10d      	bne.n	8003516 <Timer_10_Pin_Init+0x42>
			GPIO_Pin_Init(GPIOB, 8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_10);
 80034fa:	2002      	movs	r0, #2
 80034fc:	2402      	movs	r4, #2
 80034fe:	2303      	movs	r3, #3
 8003500:	2204      	movs	r2, #4
 8003502:	2103      	movs	r1, #3
 8003504:	9102      	str	r1, [sp, #8]
 8003506:	9201      	str	r2, [sp, #4]
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	4623      	mov	r3, r4
 800350c:	4602      	mov	r2, r0
 800350e:	2108      	movs	r1, #8
 8003510:	480c      	ldr	r0, [pc, #48]	@ (8003544 <Timer_10_Pin_Init+0x70>)
 8003512:	f7fe fcc1 	bl	8001e98 <GPIO_Pin_Init>
	}

	if(
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800351c:	461a      	mov	r2, r3
 800351e:	2302      	movs	r3, #2
	if(
 8003520:	429a      	cmp	r2, r3
 8003522:	d006      	beq.n	8003532 <Timer_10_Pin_Init+0x5e>
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Update_Interrupt)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800352a:	461a      	mov	r2, r3
 800352c:	2301      	movs	r3, #1
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 800352e:	429a      	cmp	r2, r3
 8003530:	d102      	bne.n	8003538 <Timer_10_Pin_Init+0x64>
	)
	{
		NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003532:	2019      	movs	r0, #25
 8003534:	f7fe fd58 	bl	8001fe8 <__NVIC_EnableIRQ>
	}
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	bd90      	pop	{r4, r7, pc}
 8003540:	40023800 	.word	0x40023800
 8003544:	40020400 	.word	0x40020400

08003548 <Timer_11_Pin_Init>:

static void Timer_11_Pin_Init(Timer_Config *config)
{
 8003548:	b590      	push	{r4, r7, lr}
 800354a:	b087      	sub	sp, #28
 800354c:	af04      	add	r7, sp, #16
 800354e:	6078      	str	r0, [r7, #4]
	RCC -> APB2ENR |= RCC_APB2ENR_TIM11EN;
 8003550:	4b18      	ldr	r3, [pc, #96]	@ (80035b4 <Timer_11_Pin_Init+0x6c>)
 8003552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003554:	4a17      	ldr	r2, [pc, #92]	@ (80035b4 <Timer_11_Pin_Init+0x6c>)
 8003556:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800355a:	6453      	str	r3, [r2, #68]	@ 0x44

	if(config -> Channel_1.Enable ==  true)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	7c1b      	ldrb	r3, [r3, #16]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d012      	beq.n	800358a <Timer_11_Pin_Init+0x42>
	{
		if(config -> Channel_1.Pin == Timer_Configurations.Channel.Pin.Timer_11.CH1_PB9)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	8a9b      	ldrh	r3, [r3, #20]
 8003568:	22b9      	movs	r2, #185	@ 0xb9
 800356a:	4293      	cmp	r3, r2
 800356c:	d10d      	bne.n	800358a <Timer_11_Pin_Init+0x42>
			GPIO_Pin_Init(GPIOB, 9, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_11);
 800356e:	2002      	movs	r0, #2
 8003570:	2402      	movs	r4, #2
 8003572:	2303      	movs	r3, #3
 8003574:	2204      	movs	r2, #4
 8003576:	2103      	movs	r1, #3
 8003578:	9102      	str	r1, [sp, #8]
 800357a:	9201      	str	r2, [sp, #4]
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	4623      	mov	r3, r4
 8003580:	4602      	mov	r2, r0
 8003582:	2109      	movs	r1, #9
 8003584:	480c      	ldr	r0, [pc, #48]	@ (80035b8 <Timer_11_Pin_Init+0x70>)
 8003586:	f7fe fc87 	bl	8001e98 <GPIO_Pin_Init>
	}

	if(
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8003590:	461a      	mov	r2, r3
 8003592:	2302      	movs	r3, #2
	if(
 8003594:	429a      	cmp	r2, r3
 8003596:	d006      	beq.n	80035a6 <Timer_11_Pin_Init+0x5e>
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Update_Interrupt)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800359e:	461a      	mov	r2, r3
 80035a0:	2301      	movs	r3, #1
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d102      	bne.n	80035ac <Timer_11_Pin_Init+0x64>
	)
	{
		NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80035a6:	201a      	movs	r0, #26
 80035a8:	f7fe fd1e 	bl	8001fe8 <__NVIC_EnableIRQ>
	}
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd90      	pop	{r4, r7, pc}
 80035b4:	40023800 	.word	0x40023800
 80035b8:	40020400 	.word	0x40020400

080035bc <Timer_12_Pin_Init>:

static void Timer_12_Pin_Init(Timer_Config *config)
{
 80035bc:	b590      	push	{r4, r7, lr}
 80035be:	b087      	sub	sp, #28
 80035c0:	af04      	add	r7, sp, #16
 80035c2:	6078      	str	r0, [r7, #4]
	RCC -> APB1ENR |= RCC_APB1ENR_TIM12EN;
 80035c4:	4b25      	ldr	r3, [pc, #148]	@ (800365c <Timer_12_Pin_Init+0xa0>)
 80035c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c8:	4a24      	ldr	r2, [pc, #144]	@ (800365c <Timer_12_Pin_Init+0xa0>)
 80035ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035ce:	6413      	str	r3, [r2, #64]	@ 0x40

	if(config -> Channel_1.Enable ==  true)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	7c1b      	ldrb	r3, [r3, #16]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d013      	beq.n	8003600 <Timer_12_Pin_Init+0x44>
	{
		if(config -> Channel_1.Pin == Timer_Configurations.Channel.Pin.Timer_12.CH1_PB14)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	8a9b      	ldrh	r3, [r3, #20]
 80035dc:	f640 3214 	movw	r2, #2836	@ 0xb14
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d10d      	bne.n	8003600 <Timer_12_Pin_Init+0x44>
			GPIO_Pin_Init(GPIOB, 14, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_12);
 80035e4:	2002      	movs	r0, #2
 80035e6:	2402      	movs	r4, #2
 80035e8:	2303      	movs	r3, #3
 80035ea:	2204      	movs	r2, #4
 80035ec:	2109      	movs	r1, #9
 80035ee:	9102      	str	r1, [sp, #8]
 80035f0:	9201      	str	r2, [sp, #4]
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	4623      	mov	r3, r4
 80035f6:	4602      	mov	r2, r0
 80035f8:	210e      	movs	r1, #14
 80035fa:	4819      	ldr	r0, [pc, #100]	@ (8003660 <Timer_12_Pin_Init+0xa4>)
 80035fc:	f7fe fc4c 	bl	8001e98 <GPIO_Pin_Init>
	}

	if(config -> Channel_2.Enable ==  true)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	7d9b      	ldrb	r3, [r3, #22]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d013      	beq.n	8003630 <Timer_12_Pin_Init+0x74>
	{
		if(config -> Channel_2.Pin == Timer_Configurations.Channel.Pin.Timer_12.CH2_PB15)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	8b5b      	ldrh	r3, [r3, #26]
 800360c:	f640 3215 	movw	r2, #2837	@ 0xb15
 8003610:	4293      	cmp	r3, r2
 8003612:	d10d      	bne.n	8003630 <Timer_12_Pin_Init+0x74>
			GPIO_Pin_Init(GPIOB, 15, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_12);
 8003614:	2002      	movs	r0, #2
 8003616:	2402      	movs	r4, #2
 8003618:	2303      	movs	r3, #3
 800361a:	2204      	movs	r2, #4
 800361c:	2109      	movs	r1, #9
 800361e:	9102      	str	r1, [sp, #8]
 8003620:	9201      	str	r2, [sp, #4]
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	4623      	mov	r3, r4
 8003626:	4602      	mov	r2, r0
 8003628:	210f      	movs	r1, #15
 800362a:	480d      	ldr	r0, [pc, #52]	@ (8003660 <Timer_12_Pin_Init+0xa4>)
 800362c:	f7fe fc34 	bl	8001e98 <GPIO_Pin_Init>
	}

	if(
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8003636:	461a      	mov	r2, r3
 8003638:	2302      	movs	r3, #2
	if(
 800363a:	429a      	cmp	r2, r3
 800363c:	d006      	beq.n	800364c <Timer_12_Pin_Init+0x90>
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Update_Interrupt)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8003644:	461a      	mov	r2, r3
 8003646:	2301      	movs	r3, #1
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 8003648:	429a      	cmp	r2, r3
 800364a:	d102      	bne.n	8003652 <Timer_12_Pin_Init+0x96>
	)
	{
		NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800364c:	202b      	movs	r0, #43	@ 0x2b
 800364e:	f7fe fccb 	bl	8001fe8 <__NVIC_EnableIRQ>
	}
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	bd90      	pop	{r4, r7, pc}
 800365a:	bf00      	nop
 800365c:	40023800 	.word	0x40023800
 8003660:	40020400 	.word	0x40020400

08003664 <Timer_13_Pin_Init>:

static void Timer_13_Pin_Init(Timer_Config *config)
{
 8003664:	b590      	push	{r4, r7, lr}
 8003666:	b087      	sub	sp, #28
 8003668:	af04      	add	r7, sp, #16
 800366a:	6078      	str	r0, [r7, #4]
	RCC -> APB1ENR |= RCC_APB1ENR_TIM13EN;
 800366c:	4b18      	ldr	r3, [pc, #96]	@ (80036d0 <Timer_13_Pin_Init+0x6c>)
 800366e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003670:	4a17      	ldr	r2, [pc, #92]	@ (80036d0 <Timer_13_Pin_Init+0x6c>)
 8003672:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003676:	6413      	str	r3, [r2, #64]	@ 0x40

	if(config -> Channel_1.Enable ==  true)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	7c1b      	ldrb	r3, [r3, #16]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d012      	beq.n	80036a6 <Timer_13_Pin_Init+0x42>
	{
		if(config -> Channel_1.Pin == Timer_Configurations.Channel.Pin.Timer_13.CH1_PA6)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	8a9b      	ldrh	r3, [r3, #20]
 8003684:	22a6      	movs	r2, #166	@ 0xa6
 8003686:	4293      	cmp	r3, r2
 8003688:	d10d      	bne.n	80036a6 <Timer_13_Pin_Init+0x42>
			GPIO_Pin_Init(GPIOA, 6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_13);
 800368a:	2002      	movs	r0, #2
 800368c:	2402      	movs	r4, #2
 800368e:	2303      	movs	r3, #3
 8003690:	2204      	movs	r2, #4
 8003692:	2109      	movs	r1, #9
 8003694:	9102      	str	r1, [sp, #8]
 8003696:	9201      	str	r2, [sp, #4]
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	4623      	mov	r3, r4
 800369c:	4602      	mov	r2, r0
 800369e:	2106      	movs	r1, #6
 80036a0:	480c      	ldr	r0, [pc, #48]	@ (80036d4 <Timer_13_Pin_Init+0x70>)
 80036a2:	f7fe fbf9 	bl	8001e98 <GPIO_Pin_Init>
	}

	if(
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80036ac:	461a      	mov	r2, r3
 80036ae:	2302      	movs	r3, #2
	if(
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d006      	beq.n	80036c2 <Timer_13_Pin_Init+0x5e>
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Update_Interrupt)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80036ba:	461a      	mov	r2, r3
 80036bc:	2301      	movs	r3, #1
	   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 80036be:	429a      	cmp	r2, r3
 80036c0:	d102      	bne.n	80036c8 <Timer_13_Pin_Init+0x64>
	)
	{
		NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80036c2:	202c      	movs	r0, #44	@ 0x2c
 80036c4:	f7fe fc90 	bl	8001fe8 <__NVIC_EnableIRQ>
	}
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd90      	pop	{r4, r7, pc}
 80036d0:	40023800 	.word	0x40023800
 80036d4:	40020000 	.word	0x40020000

080036d8 <Timer_14_Pin_Init>:

static void Timer_14_Pin_Init(Timer_Config *config)
{
 80036d8:	b590      	push	{r4, r7, lr}
 80036da:	b087      	sub	sp, #28
 80036dc:	af04      	add	r7, sp, #16
 80036de:	6078      	str	r0, [r7, #4]
	RCC -> APB1ENR |= RCC_APB1ENR_TIM14EN;
 80036e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003750 <Timer_14_Pin_Init+0x78>)
 80036e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e4:	4a1a      	ldr	r2, [pc, #104]	@ (8003750 <Timer_14_Pin_Init+0x78>)
 80036e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036ea:	6413      	str	r3, [r2, #64]	@ 0x40

	if(config -> Channel_1.Enable ==  true)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	7c1b      	ldrb	r3, [r3, #16]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d012      	beq.n	800371a <Timer_14_Pin_Init+0x42>
	{
		if(config -> Channel_1.Pin == Timer_Configurations.Channel.Pin.Timer_14.CH1_PA7)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	8a9b      	ldrh	r3, [r3, #20]
 80036f8:	22a7      	movs	r2, #167	@ 0xa7
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d10d      	bne.n	800371a <Timer_14_Pin_Init+0x42>
			GPIO_Pin_Init(GPIOA, 7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.TIM_14);
 80036fe:	2002      	movs	r0, #2
 8003700:	2402      	movs	r4, #2
 8003702:	2303      	movs	r3, #3
 8003704:	2204      	movs	r2, #4
 8003706:	2109      	movs	r1, #9
 8003708:	9102      	str	r1, [sp, #8]
 800370a:	9201      	str	r2, [sp, #4]
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	4623      	mov	r3, r4
 8003710:	4602      	mov	r2, r0
 8003712:	2107      	movs	r1, #7
 8003714:	480f      	ldr	r0, [pc, #60]	@ (8003754 <Timer_14_Pin_Init+0x7c>)
 8003716:	f7fe fbbf 	bl	8001e98 <GPIO_Pin_Init>
	}

	if(!config->Interrupt_Request)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8003720:	2b00      	cmp	r3, #0
 8003722:	d110      	bne.n	8003746 <Timer_14_Pin_Init+0x6e>
		if(
		   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800372a:	461a      	mov	r2, r3
 800372c:	2302      	movs	r3, #2
		if(
 800372e:	429a      	cmp	r2, r3
 8003730:	d006      	beq.n	8003740 <Timer_14_Pin_Init+0x68>
		   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Update_Interrupt)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8003738:	461a      	mov	r2, r3
 800373a:	2301      	movs	r3, #1
		   (config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) ||
 800373c:	429a      	cmp	r2, r3
 800373e:	d102      	bne.n	8003746 <Timer_14_Pin_Init+0x6e>
		)
		{
			NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003740:	202d      	movs	r0, #45	@ 0x2d
 8003742:	f7fe fc51 	bl	8001fe8 <__NVIC_EnableIRQ>
		}
}
 8003746:	bf00      	nop
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	bd90      	pop	{r4, r7, pc}
 800374e:	bf00      	nop
 8003750:	40023800 	.word	0x40023800
 8003754:	40020000 	.word	0x40020000

08003758 <Input_Capture_Mode_Setup>:




static void Input_Capture_Mode_Setup(Timer_Config *config)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
	if(config->Channel_1.Type == Timer_Configurations.Channel.Type.Input_Capture_Direct_Mode)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	8a5b      	ldrh	r3, [r3, #18]
 8003764:	2201      	movs	r2, #1
 8003766:	4293      	cmp	r3, r2
 8003768:	d160      	bne.n	800382c <Input_Capture_Mode_Setup+0xd4>
	{
		if(config->Edge == Timer_Configurations.Edge.rising_edge_non_inverted) config -> Port -> CCER &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8003770:	2200      	movs	r2, #0
 8003772:	4293      	cmp	r3, r2
 8003774:	d108      	bne.n	8003788 <Input_Capture_Mode_Setup+0x30>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6a1a      	ldr	r2, [r3, #32]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 020a 	bic.w	r2, r2, #10
 8003784:	621a      	str	r2, [r3, #32]
 8003786:	e01c      	b.n	80037c2 <Input_Capture_Mode_Setup+0x6a>
		else if(config->Edge == Timer_Configurations.Edge.falling_edge_inverted) config -> Port -> CCER |= TIM_CCER_CC1NP;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800378e:	2200      	movs	r2, #0
 8003790:	4293      	cmp	r3, r2
 8003792:	d108      	bne.n	80037a6 <Input_Capture_Mode_Setup+0x4e>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6a1a      	ldr	r2, [r3, #32]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0208 	orr.w	r2, r2, #8
 80037a2:	621a      	str	r2, [r3, #32]
 80037a4:	e00d      	b.n	80037c2 <Input_Capture_Mode_Setup+0x6a>
		else if(config->Edge == Timer_Configurations.Edge.both_edges_non_inverted) config -> Port -> CCER |= (TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80037ac:	2200      	movs	r2, #0
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d107      	bne.n	80037c2 <Input_Capture_Mode_Setup+0x6a>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6a1a      	ldr	r2, [r3, #32]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f042 020a 	orr.w	r2, r2, #10
 80037c0:	621a      	str	r2, [r3, #32]

		if(config -> DMA_Enable == true) config -> Port -> DIER |= TIM_DIER_CC1DE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d007      	beq.n	80037dc <Input_Capture_Mode_Setup+0x84>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68da      	ldr	r2, [r3, #12]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037da:	60da      	str	r2, [r3, #12]
		if(config -> Interrupt_Request & Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_1) config -> Port -> DIER |= TIM_DIER_CC1IE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80037e2:	461a      	mov	r2, r3
 80037e4:	2302      	movs	r3, #2
 80037e6:	4013      	ands	r3, r2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d007      	beq.n	80037fc <Input_Capture_Mode_Setup+0xa4>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68da      	ldr	r2, [r3, #12]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 0202 	orr.w	r2, r2, #2
 80037fa:	60da      	str	r2, [r3, #12]

		config -> Port -> CCMR1 |= TIM_CCMR1_CC1S_0;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	699a      	ldr	r2, [r3, #24]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0201 	orr.w	r2, r2, #1
 800380a:	619a      	str	r2, [r3, #24]
		config -> Port -> CCMR1 &= ~TIM_CCMR1_CC1S_1;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	699a      	ldr	r2, [r3, #24]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0202 	bic.w	r2, r2, #2
 800381a:	619a      	str	r2, [r3, #24]
		config -> Port -> CCER |= TIM_CCER_CC1E;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6a1a      	ldr	r2, [r3, #32]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 0201 	orr.w	r2, r2, #1
 800382a:	621a      	str	r2, [r3, #32]

	}
	if(config->Channel_2.Type == Timer_Configurations.Channel.Type.Input_Capture_Direct_Mode)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	8b1b      	ldrh	r3, [r3, #24]
 8003830:	2201      	movs	r2, #1
 8003832:	4293      	cmp	r3, r2
 8003834:	d160      	bne.n	80038f8 <Input_Capture_Mode_Setup+0x1a0>
	{
		if(config->Edge == Timer_Configurations.Edge.rising_edge_non_inverted) config -> Port -> CCER &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800383c:	2200      	movs	r2, #0
 800383e:	4293      	cmp	r3, r2
 8003840:	d108      	bne.n	8003854 <Input_Capture_Mode_Setup+0xfc>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6a1a      	ldr	r2, [r3, #32]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003850:	621a      	str	r2, [r3, #32]
 8003852:	e01c      	b.n	800388e <Input_Capture_Mode_Setup+0x136>
		else if(config->Edge == Timer_Configurations.Edge.falling_edge_inverted) config -> Port -> CCER |= TIM_CCER_CC2NP;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800385a:	2200      	movs	r2, #0
 800385c:	4293      	cmp	r3, r2
 800385e:	d108      	bne.n	8003872 <Input_Capture_Mode_Setup+0x11a>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6a1a      	ldr	r2, [r3, #32]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800386e:	621a      	str	r2, [r3, #32]
 8003870:	e00d      	b.n	800388e <Input_Capture_Mode_Setup+0x136>
		else if(config->Edge == Timer_Configurations.Edge.both_edges_non_inverted) config -> Port -> CCER |= (TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8003878:	2200      	movs	r2, #0
 800387a:	4293      	cmp	r3, r2
 800387c:	d107      	bne.n	800388e <Input_Capture_Mode_Setup+0x136>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6a1a      	ldr	r2, [r3, #32]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 800388c:	621a      	str	r2, [r3, #32]

		if(config -> DMA_Enable == true) config -> Port -> DIER |= TIM_DIER_CC2DE;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003894:	2b00      	cmp	r3, #0
 8003896:	d007      	beq.n	80038a8 <Input_Capture_Mode_Setup+0x150>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80038a6:	60da      	str	r2, [r3, #12]
		if(config -> Interrupt_Request & Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_2) config -> Port -> DIER |= TIM_DIER_CC2IE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80038ae:	461a      	mov	r2, r3
 80038b0:	2304      	movs	r3, #4
 80038b2:	4013      	ands	r3, r2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d007      	beq.n	80038c8 <Input_Capture_Mode_Setup+0x170>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 0204 	orr.w	r2, r2, #4
 80038c6:	60da      	str	r2, [r3, #12]

		config -> Port -> CCMR1 |= TIM_CCMR1_CC2S_0;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	699a      	ldr	r2, [r3, #24]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038d6:	619a      	str	r2, [r3, #24]
		config -> Port -> CCMR1 &= ~TIM_CCMR1_CC2S_1;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	699a      	ldr	r2, [r3, #24]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80038e6:	619a      	str	r2, [r3, #24]
		config -> Port -> CCER |= TIM_CCER_CC2E;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6a1a      	ldr	r2, [r3, #32]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 0210 	orr.w	r2, r2, #16
 80038f6:	621a      	str	r2, [r3, #32]
	}
	if(config->Channel_3.Type == Timer_Configurations.Channel.Type.Input_Capture_Direct_Mode)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	8bdb      	ldrh	r3, [r3, #30]
 80038fc:	2201      	movs	r2, #1
 80038fe:	4293      	cmp	r3, r2
 8003900:	d160      	bne.n	80039c4 <Input_Capture_Mode_Setup+0x26c>
	{
		if(config->Edge == Timer_Configurations.Edge.rising_edge_non_inverted) config -> Port -> CCER &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8003908:	2200      	movs	r2, #0
 800390a:	4293      	cmp	r3, r2
 800390c:	d108      	bne.n	8003920 <Input_Capture_Mode_Setup+0x1c8>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6a1a      	ldr	r2, [r3, #32]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 800391c:	621a      	str	r2, [r3, #32]
 800391e:	e01c      	b.n	800395a <Input_Capture_Mode_Setup+0x202>
		else if(config->Edge == Timer_Configurations.Edge.falling_edge_inverted) config -> Port -> CCER |= TIM_CCER_CC3NP;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8003926:	2200      	movs	r2, #0
 8003928:	4293      	cmp	r3, r2
 800392a:	d108      	bne.n	800393e <Input_Capture_Mode_Setup+0x1e6>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6a1a      	ldr	r2, [r3, #32]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800393a:	621a      	str	r2, [r3, #32]
 800393c:	e00d      	b.n	800395a <Input_Capture_Mode_Setup+0x202>
		else if(config->Edge == Timer_Configurations.Edge.both_edges_non_inverted) config -> Port -> CCER |= (TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8003944:	2200      	movs	r2, #0
 8003946:	4293      	cmp	r3, r2
 8003948:	d107      	bne.n	800395a <Input_Capture_Mode_Setup+0x202>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6a1a      	ldr	r2, [r3, #32]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f442 6220 	orr.w	r2, r2, #2560	@ 0xa00
 8003958:	621a      	str	r2, [r3, #32]

		if(config -> DMA_Enable == true) config -> Port -> DIER |= TIM_DIER_CC3DE;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003960:	2b00      	cmp	r3, #0
 8003962:	d007      	beq.n	8003974 <Input_Capture_Mode_Setup+0x21c>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68da      	ldr	r2, [r3, #12]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003972:	60da      	str	r2, [r3, #12]
		if(config -> Interrupt_Request & Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_3) config -> Port -> DIER |= TIM_DIER_CC3IE;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800397a:	461a      	mov	r2, r3
 800397c:	2308      	movs	r3, #8
 800397e:	4013      	ands	r3, r2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d007      	beq.n	8003994 <Input_Capture_Mode_Setup+0x23c>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68da      	ldr	r2, [r3, #12]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f042 0208 	orr.w	r2, r2, #8
 8003992:	60da      	str	r2, [r3, #12]

		config -> Port -> CCMR2 |= TIM_CCMR2_CC3S_0;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	69da      	ldr	r2, [r3, #28]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0201 	orr.w	r2, r2, #1
 80039a2:	61da      	str	r2, [r3, #28]
		config -> Port -> CCMR2 &= ~TIM_CCMR2_CC3S_1;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	69da      	ldr	r2, [r3, #28]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 0202 	bic.w	r2, r2, #2
 80039b2:	61da      	str	r2, [r3, #28]
		config -> Port -> CCER |= TIM_CCER_CC3E;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6a1a      	ldr	r2, [r3, #32]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039c2:	621a      	str	r2, [r3, #32]
	}
	if(config->Channel_4.Type == Timer_Configurations.Channel.Type.Input_Capture_Direct_Mode)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80039c8:	2201      	movs	r2, #1
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d160      	bne.n	8003a90 <Input_Capture_Mode_Setup+0x338>
	{
		if(config->Edge == Timer_Configurations.Edge.rising_edge_non_inverted) config -> Port -> CCER &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80039d4:	2200      	movs	r2, #0
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d108      	bne.n	80039ec <Input_Capture_Mode_Setup+0x294>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6a1a      	ldr	r2, [r3, #32]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 80039e8:	621a      	str	r2, [r3, #32]
 80039ea:	e01c      	b.n	8003a26 <Input_Capture_Mode_Setup+0x2ce>
		else if(config->Edge == Timer_Configurations.Edge.falling_edge_inverted) config -> Port -> CCER |= TIM_CCER_CC4NP;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80039f2:	2200      	movs	r2, #0
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d108      	bne.n	8003a0a <Input_Capture_Mode_Setup+0x2b2>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6a1a      	ldr	r2, [r3, #32]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a06:	621a      	str	r2, [r3, #32]
 8003a08:	e00d      	b.n	8003a26 <Input_Capture_Mode_Setup+0x2ce>
		else if(config->Edge == Timer_Configurations.Edge.both_edges_non_inverted) config -> Port -> CCER |= (TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8003a10:	2200      	movs	r2, #0
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d107      	bne.n	8003a26 <Input_Capture_Mode_Setup+0x2ce>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6a1a      	ldr	r2, [r3, #32]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f442 4220 	orr.w	r2, r2, #40960	@ 0xa000
 8003a24:	621a      	str	r2, [r3, #32]

		if(config -> DMA_Enable == true) config -> Port -> DIER |= TIM_DIER_CC4DE;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d007      	beq.n	8003a40 <Input_Capture_Mode_Setup+0x2e8>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003a3e:	60da      	str	r2, [r3, #12]
		if(config -> Interrupt_Request & Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_4) config -> Port -> DIER |= TIM_DIER_CC4IE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8003a46:	461a      	mov	r2, r3
 8003a48:	2310      	movs	r3, #16
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d007      	beq.n	8003a60 <Input_Capture_Mode_Setup+0x308>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68da      	ldr	r2, [r3, #12]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0210 	orr.w	r2, r2, #16
 8003a5e:	60da      	str	r2, [r3, #12]

		config -> Port -> CCMR2 |= TIM_CCMR2_CC4S_0;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	69da      	ldr	r2, [r3, #28]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a6e:	61da      	str	r2, [r3, #28]
		config -> Port -> CCMR2 &= ~TIM_CCMR2_CC4S_1;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	69da      	ldr	r2, [r3, #28]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003a7e:	61da      	str	r2, [r3, #28]
		config -> Port -> CCER |= TIM_CCER_CC4E;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6a1a      	ldr	r2, [r3, #32]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003a8e:	621a      	str	r2, [r3, #32]
	}
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <PWM_Input_Mode_Setup>:

static void PWM_Input_Mode_Setup(Timer_Config *config)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
	if(config -> Combined_Channel == Timer_Configurations.Combined_Channel.PWM_Input_Channel_1)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003aaa:	2202      	movs	r2, #2
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d14d      	bne.n	8003b4c <PWM_Input_Mode_Setup+0xb0>
	{
		config -> Port -> PSC=0;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	629a      	str	r2, [r3, #40]	@ 0x28
		config -> Port -> ARR=0xFFFFFFFF;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ac0:	62da      	str	r2, [r3, #44]	@ 0x2c
		config -> Port -> CNT=0;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	625a      	str	r2, [r3, #36]	@ 0x24

		config -> Port -> CCMR1|=TIM_CCMR1_CC1S_0;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	699a      	ldr	r2, [r3, #24]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f042 0201 	orr.w	r2, r2, #1
 8003ad8:	619a      	str	r2, [r3, #24]

		config -> Port -> CCER&=~(TIM_CCER_CC1P|TIM_CCER_CC1NP);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6a1a      	ldr	r2, [r3, #32]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 020a 	bic.w	r2, r2, #10
 8003ae8:	621a      	str	r2, [r3, #32]

		config -> Port -> CCMR1|=TIM_CCMR1_CC2S_1;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	699a      	ldr	r2, [r3, #24]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003af8:	619a      	str	r2, [r3, #24]

		config -> Port -> CCER|=TIM_CCER_CC2P;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	6a1a      	ldr	r2, [r3, #32]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f042 0220 	orr.w	r2, r2, #32
 8003b08:	621a      	str	r2, [r3, #32]

		config -> Port -> CCER&=~TIM_CCER_CC2NP;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6a1a      	ldr	r2, [r3, #32]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b18:	621a      	str	r2, [r3, #32]

		config -> Port -> SMCR|=TIM_SMCR_TS_2|TIM_SMCR_TS_0;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8003b28:	609a      	str	r2, [r3, #8]

		config -> Port -> SMCR|=TIM_SMCR_SMS_2;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f042 0204 	orr.w	r2, r2, #4
 8003b38:	609a      	str	r2, [r3, #8]

		config -> Port -> CCER|=TIM_CCER_CC1E|TIM_CCER_CC2E;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	6a1a      	ldr	r2, [r3, #32]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f042 0211 	orr.w	r2, r2, #17
 8003b48:	621a      	str	r2, [r3, #32]

		config -> Port -> SMCR|=TIM_SMCR_SMS_2;

		config -> Port -> CCER|=TIM_CCER_CC3E|TIM_CCER_CC4E;
	}
}
 8003b4a:	e052      	b.n	8003bf2 <PWM_Input_Mode_Setup+0x156>
	else if(config -> Combined_Channel == Timer_Configurations.Combined_Channel.PWM_Input_Channel_2)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b52:	2204      	movs	r2, #4
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d14c      	bne.n	8003bf2 <PWM_Input_Mode_Setup+0x156>
		config -> Port -> PSC=0;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	629a      	str	r2, [r3, #40]	@ 0x28
		config -> Port -> ARR=0xFFFFFFFF;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f04f 32ff 	mov.w	r2, #4294967295
 8003b68:	62da      	str	r2, [r3, #44]	@ 0x2c
		config -> Port -> CNT=0;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	625a      	str	r2, [r3, #36]	@ 0x24
		config -> Port -> CCMR2|=TIM_CCMR2_CC3S_0;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	69da      	ldr	r2, [r3, #28]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f042 0201 	orr.w	r2, r2, #1
 8003b80:	61da      	str	r2, [r3, #28]
		config -> Port -> CCER&=~(TIM_CCER_CC3P|TIM_CCER_CC3NP);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6a1a      	ldr	r2, [r3, #32]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 8003b90:	621a      	str	r2, [r3, #32]
		config -> Port -> CCMR2|=TIM_CCMR2_CC4S_1;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	69da      	ldr	r2, [r3, #28]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ba0:	61da      	str	r2, [r3, #28]
		config -> Port -> CCER|=TIM_CCER_CC4P;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6a1a      	ldr	r2, [r3, #32]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003bb0:	621a      	str	r2, [r3, #32]
		config -> Port -> CCER&=~TIM_CCER_CC4NP;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6a1a      	ldr	r2, [r3, #32]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bc0:	621a      	str	r2, [r3, #32]
		config -> Port -> SMCR|=TIM_SMCR_TS_2|TIM_SMCR_TS_0;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8003bd0:	609a      	str	r2, [r3, #8]
		config -> Port -> SMCR|=TIM_SMCR_SMS_2;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f042 0204 	orr.w	r2, r2, #4
 8003be0:	609a      	str	r2, [r3, #8]
		config -> Port -> CCER|=TIM_CCER_CC3E|TIM_CCER_CC4E;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6a1a      	ldr	r2, [r3, #32]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 8003bf0:	621a      	str	r2, [r3, #32]
}
 8003bf2:	bf00      	nop
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <Encoder_Mode_Setup>:



static void Encoder_Mode_Setup(Timer_Config *config)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
//	config -> Port -> CCMR1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F); // Clear IC1F and IC2F bits
////	config -> Port -> CCMR1 |= (TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC2F_3); // Set filter to 8 samples, N=8
//	config -> Port -> CCMR1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC); // Clear IC1PSC and IC2PSC bits
//	config -> Port -> CCER &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P); // Clear CC1P and CC2P bits (rising edge)
//
	config -> Port -> SMCR = 0x0000;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	609a      	str	r2, [r3, #8]
	config -> Port -> CR2 = 0x0000;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2200      	movs	r2, #0
 8003c14:	605a      	str	r2, [r3, #4]
	config -> Port->CCMR1 = 0x0000;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	619a      	str	r2, [r3, #24]

	config -> Port->SMCR &= ~TIM_SMCR_SMS;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 0207 	bic.w	r2, r2, #7
 8003c2c:	609a      	str	r2, [r3, #8]
	config -> Port->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689a      	ldr	r2, [r3, #8]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f042 0203 	orr.w	r2, r2, #3
 8003c3c:	609a      	str	r2, [r3, #8]
	config -> Port -> CCMR1 |= (TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC2F_3);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6812      	ldr	r2, [r2, #0]
 8003c48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c50:	6193      	str	r3, [r2, #24]
	// Set TIM2 Channels to input
	config -> Port->CCMR1 &= ~((3U << TIM_CCMR1_CC1S_Pos) | (3U << TIM_CCMR1_CC2S_Pos));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	6812      	ldr	r2, [r2, #0]
 8003c5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c60:	f023 0303 	bic.w	r3, r3, #3
 8003c64:	6193      	str	r3, [r2, #24]
	config -> Port->CCMR1 |= (1U << TIM_CCMR1_CC1S_Pos) | (1U << TIM_CCMR1_CC2S_Pos);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6812      	ldr	r2, [r2, #0]
 8003c70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c74:	f043 0301 	orr.w	r3, r3, #1
 8003c78:	6193      	str	r3, [r2, #24]

	// Configure polarity (if necessary)
	config -> Port->CCER &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6a1a      	ldr	r2, [r3, #32]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8003c88:	621a      	str	r2, [r3, #32]
	config -> Port -> ARR = config->Encoder_Resolution - 1;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	3a01      	subs	r2, #1
 8003c96:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <XOR_Mode_Setup>:

static void XOR_Mode_Setup(Timer_Config *config)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
	config -> Port -> CR2 |= TIM_CR2_TI1S;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003cba:	605a      	str	r2, [r3, #4]
	config -> Port -> SMCR &= ~TIM_SMCR_TS;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003cca:	609a      	str	r2, [r3, #8]
	config -> Port -> SMCR |= TIM_SMCR_TS_2 | TIM_SMCR_TS_1 | TIM_SMCR_TS_0;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 0270 	orr.w	r2, r2, #112	@ 0x70
 8003cda:	609a      	str	r2, [r3, #8]
	config -> Port -> SMCR &= ~TIM_SMCR_SMS;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689a      	ldr	r2, [r3, #8]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f022 0207 	bic.w	r2, r2, #7
 8003cea:	609a      	str	r2, [r3, #8]
	config -> Port -> SMCR |= TIM_SMCR_SMS_2;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689a      	ldr	r2, [r3, #8]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f042 0204 	orr.w	r2, r2, #4
 8003cfa:	609a      	str	r2, [r3, #8]
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <PWM_Mode_Setup>:

static void PWM_Mode_Setup(Timer_Config *config)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]

	if((config -> Channel_1.Enable == true))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	7c1b      	ldrb	r3, [r3, #16]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d055      	beq.n	8003dc4 <PWM_Mode_Setup+0xbc>
	{

		if((config -> Channel_1.Type == Timer_Configurations.Channel.Type.PWM_Gen_CHP) || (config -> Channel_1.Type == Timer_Configurations.Channel.Type.PWM_Gen_CHP_CHN))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	8a5b      	ldrh	r3, [r3, #18]
 8003d1c:	2240      	movs	r2, #64	@ 0x40
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d005      	beq.n	8003d2e <PWM_Mode_Setup+0x26>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	8a5b      	ldrh	r3, [r3, #18]
 8003d26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d11f      	bne.n	8003d6e <PWM_Mode_Setup+0x66>
		{
			config -> Port -> CCMR1 |= (6 << TIM_CCMR1_OC1M_Pos) ; // PWM mode 1 for CH1 and CH2
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	699a      	ldr	r2, [r3, #24]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8003d3c:	619a      	str	r2, [r3, #24]
			config -> Port -> CCMR1 |= TIM_CCMR1_OC1PE ; // Enable preload for output compare
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	699a      	ldr	r2, [r3, #24]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f042 0208 	orr.w	r2, r2, #8
 8003d4c:	619a      	str	r2, [r3, #24]
			config -> Port -> CCER |= TIM_CCER_CC1E ;  // Enable CH1 and CH2 outputs
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6a1a      	ldr	r2, [r3, #32]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f042 0201 	orr.w	r2, r2, #1
 8003d5c:	621a      	str	r2, [r3, #32]
			config -> Port -> BDTR |= TIM_BDTR_MOE;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d6c:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		if((config -> Channel_1.Type == Timer_Configurations.Channel.Type.PWM_Gen_CHN) || (config -> Channel_1.Type == Timer_Configurations.Channel.Type.PWM_Gen_CHP_CHN))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	8a5b      	ldrh	r3, [r3, #18]
 8003d72:	2280      	movs	r2, #128	@ 0x80
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d005      	beq.n	8003d84 <PWM_Mode_Setup+0x7c>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	8a5b      	ldrh	r3, [r3, #18]
 8003d7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d11f      	bne.n	8003dc4 <PWM_Mode_Setup+0xbc>
		{
			config -> Port -> CCMR1 |= (6 << TIM_CCMR1_OC1M_Pos) ; // PWM mode 1 for CH1 and CH2
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	699a      	ldr	r2, [r3, #24]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8003d92:	619a      	str	r2, [r3, #24]
			config -> Port -> CCMR1 |= TIM_CCMR1_OC1PE ; // Enable preload for output compare
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	699a      	ldr	r2, [r3, #24]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f042 0208 	orr.w	r2, r2, #8
 8003da2:	619a      	str	r2, [r3, #24]
			config -> Port -> CCER |= TIM_CCER_CC1NE ;  // Enable CH1 and CH2 outputs
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6a1a      	ldr	r2, [r3, #32]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f042 0204 	orr.w	r2, r2, #4
 8003db2:	621a      	str	r2, [r3, #32]
			config -> Port -> BDTR |= TIM_BDTR_MOE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003dc2:	645a      	str	r2, [r3, #68]	@ 0x44
		}

	}
	if((config -> Channel_2.Enable == true))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	7d9b      	ldrb	r3, [r3, #22]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d055      	beq.n	8003e78 <PWM_Mode_Setup+0x170>
	{
		if((config -> Channel_2.Type == Timer_Configurations.Channel.Type.PWM_Gen_CHP) || (config -> Channel_2.Type == Timer_Configurations.Channel.Type.PWM_Gen_CHP_CHN))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	8b1b      	ldrh	r3, [r3, #24]
 8003dd0:	2240      	movs	r2, #64	@ 0x40
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d005      	beq.n	8003de2 <PWM_Mode_Setup+0xda>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	8b1b      	ldrh	r3, [r3, #24]
 8003dda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d11f      	bne.n	8003e22 <PWM_Mode_Setup+0x11a>
		{
			config -> Port -> CCMR1 |= (6 << TIM_CCMR1_OC2M_Pos) ; // PWM mode 1 for CH1 and CH2
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	699a      	ldr	r2, [r3, #24]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 8003df0:	619a      	str	r2, [r3, #24]
			config -> Port -> CCMR1 |= TIM_CCMR1_OC2PE ; // Enable preload for output compare
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	699a      	ldr	r2, [r3, #24]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e00:	619a      	str	r2, [r3, #24]
			config -> Port -> CCER |= TIM_CCER_CC2E ;  // Enable CH1 and CH2 outputs
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6a1a      	ldr	r2, [r3, #32]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f042 0210 	orr.w	r2, r2, #16
 8003e10:	621a      	str	r2, [r3, #32]
			config -> Port -> BDTR |= TIM_BDTR_MOE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e20:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		if((config -> Channel_2.Type == Timer_Configurations.Channel.Type.PWM_Gen_CHN) || (config -> Channel_2.Type == Timer_Configurations.Channel.Type.PWM_Gen_CHP_CHN))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	8b1b      	ldrh	r3, [r3, #24]
 8003e26:	2280      	movs	r2, #128	@ 0x80
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d005      	beq.n	8003e38 <PWM_Mode_Setup+0x130>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	8b1b      	ldrh	r3, [r3, #24]
 8003e30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d11f      	bne.n	8003e78 <PWM_Mode_Setup+0x170>
		{
			config -> Port -> CCMR1 |= (6 << TIM_CCMR1_OC2M_Pos) ; // PWM mode 1 for CH1 and CH2
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	699a      	ldr	r2, [r3, #24]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 8003e46:	619a      	str	r2, [r3, #24]
			config -> Port -> CCMR1 |= TIM_CCMR1_OC2PE ; // Enable preload for output compare
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	699a      	ldr	r2, [r3, #24]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e56:	619a      	str	r2, [r3, #24]
			config -> Port -> CCER |= TIM_CCER_CC2NE ;  // Enable CH1 and CH2 outputs
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6a1a      	ldr	r2, [r3, #32]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e66:	621a      	str	r2, [r3, #32]
			config -> Port -> BDTR |= TIM_BDTR_MOE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e76:	645a      	str	r2, [r3, #68]	@ 0x44
		}
	}
	if((config -> Channel_3.Enable == true))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	7f1b      	ldrb	r3, [r3, #28]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d055      	beq.n	8003f2c <PWM_Mode_Setup+0x224>
	{
		if((config -> Channel_3.Type == Timer_Configurations.Channel.Type.PWM_Gen_CHP) || (config -> Channel_3.Type == Timer_Configurations.Channel.Type.PWM_Gen_CHP_CHN))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	8bdb      	ldrh	r3, [r3, #30]
 8003e84:	2240      	movs	r2, #64	@ 0x40
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d005      	beq.n	8003e96 <PWM_Mode_Setup+0x18e>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	8bdb      	ldrh	r3, [r3, #30]
 8003e8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d11f      	bne.n	8003ed6 <PWM_Mode_Setup+0x1ce>
		{
			config -> Port -> CCMR2 |= (6 << TIM_CCMR2_OC3M_Pos) ; // PWM mode 1 for CH1 and CH2
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	69da      	ldr	r2, [r3, #28]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8003ea4:	61da      	str	r2, [r3, #28]
			config -> Port -> CCMR2 |= TIM_CCMR2_OC3PE ; // Enable preload for output compare
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	69da      	ldr	r2, [r3, #28]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f042 0208 	orr.w	r2, r2, #8
 8003eb4:	61da      	str	r2, [r3, #28]
			config -> Port -> CCER |= TIM_CCER_CC3E ;  // Enable CH1 and CH2 outputs
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	6a1a      	ldr	r2, [r3, #32]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ec4:	621a      	str	r2, [r3, #32]
			config -> Port -> BDTR |= TIM_BDTR_MOE;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ed4:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		if((config -> Channel_3.Type == Timer_Configurations.Channel.Type.PWM_Gen_CHN) || (config -> Channel_3.Type == Timer_Configurations.Channel.Type.PWM_Gen_CHP_CHN))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	8bdb      	ldrh	r3, [r3, #30]
 8003eda:	2280      	movs	r2, #128	@ 0x80
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d005      	beq.n	8003eec <PWM_Mode_Setup+0x1e4>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	8bdb      	ldrh	r3, [r3, #30]
 8003ee4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d11f      	bne.n	8003f2c <PWM_Mode_Setup+0x224>
		{
			config -> Port -> CCMR2 |= (6 << TIM_CCMR2_OC3M_Pos) ; // PWM mode 1 for CH1 and CH2
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	69da      	ldr	r2, [r3, #28]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8003efa:	61da      	str	r2, [r3, #28]
			config -> Port -> CCMR2 |= TIM_CCMR2_OC4PE ; // Enable preload for output compare
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	69da      	ldr	r2, [r3, #28]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f0a:	61da      	str	r2, [r3, #28]
			config -> Port -> CCER |= TIM_CCER_CC3NE ;  // Enable CH1 and CH2 outputs
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6a1a      	ldr	r2, [r3, #32]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f1a:	621a      	str	r2, [r3, #32]
			config -> Port -> BDTR |= TIM_BDTR_MOE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f2a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
	}
	if((config -> Channel_4.Enable == true))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d02f      	beq.n	8003f96 <PWM_Mode_Setup+0x28e>
	{
		if((config -> Channel_4.Type == Timer_Configurations.Channel.Type.PWM_Gen_CHP) || (config -> Channel_4.Type == Timer_Configurations.Channel.Type.PWM_Gen_CHP_CHN) || (config -> Channel_4.Type == Timer_Configurations.Channel.Type.PWM_Gen_CHN))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003f3a:	2240      	movs	r2, #64	@ 0x40
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00a      	beq.n	8003f56 <PWM_Mode_Setup+0x24e>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003f44:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d004      	beq.n	8003f56 <PWM_Mode_Setup+0x24e>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003f50:	2280      	movs	r2, #128	@ 0x80
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d11f      	bne.n	8003f96 <PWM_Mode_Setup+0x28e>
		{
			config -> Port -> CCMR2 |= (6 << TIM_CCMR2_OC4M_Pos) ; // PWM mode 1 for CH1 and CH2
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	69da      	ldr	r2, [r3, #28]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 8003f64:	61da      	str	r2, [r3, #28]
			config -> Port -> CCMR2 |= TIM_CCMR2_OC4PE ; // Enable preload for output compare
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	69da      	ldr	r2, [r3, #28]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f74:	61da      	str	r2, [r3, #28]
			config -> Port -> CCER |= TIM_CCER_CC4E ;  // Enable CH1 and CH2 outputs
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6a1a      	ldr	r2, [r3, #32]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003f84:	621a      	str	r2, [r3, #32]
			config -> Port -> BDTR |= TIM_BDTR_MOE;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f94:	645a      	str	r2, [r3, #68]	@ 0x44
		}
	}

}
 8003f96:	bf00      	nop
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <Timer_Update>:

static void Timer_Update(Timer_Config *config)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
	config -> Port -> ARR = config -> Autoreload_Value;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	89da      	ldrh	r2, [r3, #14]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	62da      	str	r2, [r3, #44]	@ 0x2c
	config -> Port -> PSC = config -> Prescaler;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	899a      	ldrh	r2, [r3, #12]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	629a      	str	r2, [r3, #40]	@ 0x28

	config -> Port -> EGR |= TIM_EGR_UG;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	695a      	ldr	r2, [r3, #20]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f042 0201 	orr.w	r2, r2, #1
 8003fcc:	615a      	str	r2, [r3, #20]
//	config -> Port -> CR1 |= TIM_CR1_URS;
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
	...

08003fdc <Timer_Init>:

void Timer_Init(Timer_Config *config)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]

	if(config -> Port == TIM1) Timer_1_Pin_Init(config);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a6e      	ldr	r2, [pc, #440]	@ (80041a4 <Timer_Init+0x1c8>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d103      	bne.n	8003ff6 <Timer_Init+0x1a>
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7fe fc8a 	bl	8002908 <Timer_1_Pin_Init>
 8003ff4:	e093      	b.n	800411e <Timer_Init+0x142>
	else if(config -> Port == TIM2) Timer_2_Pin_Init(config);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ffe:	d103      	bne.n	8004008 <Timer_Init+0x2c>
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f7fe fd87 	bl	8002b14 <Timer_2_Pin_Init>
 8004006:	e08a      	b.n	800411e <Timer_Init+0x142>
	else if(config -> Port == TIM3) Timer_3_Pin_Init(config);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a66      	ldr	r2, [pc, #408]	@ (80041a8 <Timer_Init+0x1cc>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d103      	bne.n	800401a <Timer_Init+0x3e>
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7fe fe88 	bl	8002d28 <Timer_3_Pin_Init>
 8004018:	e081      	b.n	800411e <Timer_Init+0x142>
	else if(config -> Port == TIM4) Timer_4_Pin_Init(config);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a63      	ldr	r2, [pc, #396]	@ (80041ac <Timer_Init+0x1d0>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d103      	bne.n	800402c <Timer_Init+0x50>
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7fe ff97 	bl	8002f58 <Timer_4_Pin_Init>
 800402a:	e078      	b.n	800411e <Timer_Init+0x142>
	else if(config -> Port == TIM5) Timer_5_Pin_Init(config);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a5f      	ldr	r2, [pc, #380]	@ (80041b0 <Timer_Init+0x1d4>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d103      	bne.n	800403e <Timer_Init+0x62>
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7ff f880 	bl	800313c <Timer_5_Pin_Init>
 800403c:	e06f      	b.n	800411e <Timer_Init+0x142>
	else if(config -> Port == TIM6)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a5c      	ldr	r2, [pc, #368]	@ (80041b4 <Timer_Init+0x1d8>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d113      	bne.n	8004070 <Timer_Init+0x94>
	{
		__timer_6_config__ = config;
 8004048:	4a5b      	ldr	r2, [pc, #364]	@ (80041b8 <Timer_Init+0x1dc>)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6013      	str	r3, [r2, #0]
		RCC -> APB1ENR |= RCC_APB1ENR_TIM6EN;
 800404e:	4b5b      	ldr	r3, [pc, #364]	@ (80041bc <Timer_Init+0x1e0>)
 8004050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004052:	4a5a      	ldr	r2, [pc, #360]	@ (80041bc <Timer_Init+0x1e0>)
 8004054:	f043 0310 	orr.w	r3, r3, #16
 8004058:	6413      	str	r3, [r2, #64]	@ 0x40
		if((config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Update_Interrupt))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8004060:	461a      	mov	r2, r3
 8004062:	2301      	movs	r3, #1
 8004064:	429a      	cmp	r2, r3
 8004066:	d15a      	bne.n	800411e <Timer_Init+0x142>
		{
			NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004068:	2036      	movs	r0, #54	@ 0x36
 800406a:	f7fd ffbd 	bl	8001fe8 <__NVIC_EnableIRQ>
 800406e:	e056      	b.n	800411e <Timer_Init+0x142>
		}
	}
	else if(config -> Port == TIM7)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a52      	ldr	r2, [pc, #328]	@ (80041c0 <Timer_Init+0x1e4>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d113      	bne.n	80040a2 <Timer_Init+0xc6>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_TIM7EN;
 800407a:	4b50      	ldr	r3, [pc, #320]	@ (80041bc <Timer_Init+0x1e0>)
 800407c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407e:	4a4f      	ldr	r2, [pc, #316]	@ (80041bc <Timer_Init+0x1e0>)
 8004080:	f043 0320 	orr.w	r3, r3, #32
 8004084:	6413      	str	r3, [r2, #64]	@ 0x40
		__timer_7_config__ = config;
 8004086:	4a4f      	ldr	r2, [pc, #316]	@ (80041c4 <Timer_Init+0x1e8>)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6013      	str	r3, [r2, #0]
		if((config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Update_Interrupt))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8004092:	461a      	mov	r2, r3
 8004094:	2301      	movs	r3, #1
 8004096:	429a      	cmp	r2, r3
 8004098:	d141      	bne.n	800411e <Timer_Init+0x142>
		{
			NVIC_EnableIRQ(TIM7_IRQn);
 800409a:	2037      	movs	r0, #55	@ 0x37
 800409c:	f7fd ffa4 	bl	8001fe8 <__NVIC_EnableIRQ>
 80040a0:	e03d      	b.n	800411e <Timer_Init+0x142>
		}
	}
	else if(config -> Port == TIM8) Timer_8_Pin_Init(config);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a48      	ldr	r2, [pc, #288]	@ (80041c8 <Timer_Init+0x1ec>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d103      	bne.n	80040b4 <Timer_Init+0xd8>
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f7ff f8e3 	bl	8003278 <Timer_8_Pin_Init>
 80040b2:	e034      	b.n	800411e <Timer_Init+0x142>
	else if(config -> Port == TIM9) Timer_9_Pin_Init(config);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a44      	ldr	r2, [pc, #272]	@ (80041cc <Timer_Init+0x1f0>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d103      	bne.n	80040c6 <Timer_Init+0xea>
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7ff f98a 	bl	80033d8 <Timer_9_Pin_Init>
 80040c4:	e02b      	b.n	800411e <Timer_Init+0x142>
	else if(config -> Port == TIM10) Timer_10_Pin_Init(config);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a41      	ldr	r2, [pc, #260]	@ (80041d0 <Timer_Init+0x1f4>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d103      	bne.n	80040d8 <Timer_Init+0xfc>
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f7ff f9ff 	bl	80034d4 <Timer_10_Pin_Init>
 80040d6:	e022      	b.n	800411e <Timer_Init+0x142>
	else if(config -> Port == TIM11) Timer_11_Pin_Init(config);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a3d      	ldr	r2, [pc, #244]	@ (80041d4 <Timer_Init+0x1f8>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d103      	bne.n	80040ea <Timer_Init+0x10e>
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7ff fa30 	bl	8003548 <Timer_11_Pin_Init>
 80040e8:	e019      	b.n	800411e <Timer_Init+0x142>
	else if(config -> Port == TIM12) Timer_12_Pin_Init(config);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a3a      	ldr	r2, [pc, #232]	@ (80041d8 <Timer_Init+0x1fc>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d103      	bne.n	80040fc <Timer_Init+0x120>
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7ff fa61 	bl	80035bc <Timer_12_Pin_Init>
 80040fa:	e010      	b.n	800411e <Timer_Init+0x142>
	else if(config -> Port == TIM13) Timer_13_Pin_Init(config);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a36      	ldr	r2, [pc, #216]	@ (80041dc <Timer_Init+0x200>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d103      	bne.n	800410e <Timer_Init+0x132>
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7ff faac 	bl	8003664 <Timer_13_Pin_Init>
 800410c:	e007      	b.n	800411e <Timer_Init+0x142>
	else if(config -> Port == TIM14) Timer_14_Pin_Init(config);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a33      	ldr	r2, [pc, #204]	@ (80041e0 <Timer_Init+0x204>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d102      	bne.n	800411e <Timer_Init+0x142>
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f7ff fadd 	bl	80036d8 <Timer_14_Pin_Init>

	config -> Port -> DIER |= config -> Interrupt_Request;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68da      	ldr	r2, [r3, #12]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800412a:	4619      	mov	r1, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	60da      	str	r2, [r3, #12]

	//uint16_t Input_Capture_Direct_Mode;
	Input_Capture_Mode_Setup(config);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f7ff fb0f 	bl	8003758 <Input_Capture_Mode_Setup>
	PWM_Mode_Setup(config);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7ff fde4 	bl	8003d08 <PWM_Mode_Setup>

	if(config -> Mode == Timer_Configurations.Mode.Update)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	791b      	ldrb	r3, [r3, #4]
 8004144:	2220      	movs	r2, #32
 8004146:	4293      	cmp	r3, r2
 8004148:	d102      	bne.n	8004150 <Timer_Init+0x174>
	{
		Timer_Update(config);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7ff ff29 	bl	8003fa2 <Timer_Update>
	}

	if(config -> Combined_Channel == Timer_Configurations.Combined_Channel.Encoder)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004156:	2201      	movs	r2, #1
 8004158:	4293      	cmp	r3, r2
 800415a:	d102      	bne.n	8004162 <Timer_Init+0x186>
	{
		Encoder_Mode_Setup(config);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f7ff fd4e 	bl	8003bfe <Encoder_Mode_Setup>
	}

	if(config -> Combined_Channel == Timer_Configurations.Combined_Channel.PWM_Input_Channel_1)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004168:	2202      	movs	r2, #2
 800416a:	4293      	cmp	r3, r2
 800416c:	d102      	bne.n	8004174 <Timer_Init+0x198>
	{
		PWM_Input_Mode_Setup(config);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7ff fc94 	bl	8003a9c <PWM_Input_Mode_Setup>
	}

	if(config -> Combined_Channel == Timer_Configurations.Combined_Channel.XOR_Hall_Sensor)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800417a:	2208      	movs	r2, #8
 800417c:	4293      	cmp	r3, r2
 800417e:	d102      	bne.n	8004186 <Timer_Init+0x1aa>
	{

		XOR_Mode_Setup(config);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f7ff fd8f 	bl	8003ca4 <XOR_Mode_Setup>
	}

	if(config -> DMA_Enable) DMA_Init(&config->DMA_Timer);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800418c:	2b00      	cmp	r3, #0
 800418e:	d004      	beq.n	800419a <Timer_Init+0x1be>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3330      	adds	r3, #48	@ 0x30
 8004194:	4618      	mov	r0, r3
 8004196:	f7fd fb41 	bl	800181c <DMA_Init>
}
 800419a:	bf00      	nop
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	40010000 	.word	0x40010000
 80041a8:	40000400 	.word	0x40000400
 80041ac:	40000800 	.word	0x40000800
 80041b0:	40000c00 	.word	0x40000c00
 80041b4:	40001000 	.word	0x40001000
 80041b8:	200000cc 	.word	0x200000cc
 80041bc:	40023800 	.word	0x40023800
 80041c0:	40001400 	.word	0x40001400
 80041c4:	200000d0 	.word	0x200000d0
 80041c8:	40010400 	.word	0x40010400
 80041cc:	40014000 	.word	0x40014000
 80041d0:	40014400 	.word	0x40014400
 80041d4:	40014800 	.word	0x40014800
 80041d8:	40001800 	.word	0x40001800
 80041dc:	40001c00 	.word	0x40001c00
 80041e0:	40002000 	.word	0x40002000

080041e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	4603      	mov	r3, r0
 80041ec:	6039      	str	r1, [r7, #0]
 80041ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	db0a      	blt.n	800420e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	490c      	ldr	r1, [pc, #48]	@ (8004230 <__NVIC_SetPriority+0x4c>)
 80041fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004202:	0112      	lsls	r2, r2, #4
 8004204:	b2d2      	uxtb	r2, r2
 8004206:	440b      	add	r3, r1
 8004208:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800420c:	e00a      	b.n	8004224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	b2da      	uxtb	r2, r3
 8004212:	4908      	ldr	r1, [pc, #32]	@ (8004234 <__NVIC_SetPriority+0x50>)
 8004214:	79fb      	ldrb	r3, [r7, #7]
 8004216:	f003 030f 	and.w	r3, r3, #15
 800421a:	3b04      	subs	r3, #4
 800421c:	0112      	lsls	r2, r2, #4
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	440b      	add	r3, r1
 8004222:	761a      	strb	r2, [r3, #24]
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	e000e100 	.word	0xe000e100
 8004234:	e000ed00 	.word	0xe000ed00

08004238 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	3b01      	subs	r3, #1
 8004244:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004248:	d301      	bcc.n	800424e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800424a:	2301      	movs	r3, #1
 800424c:	e00f      	b.n	800426e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800424e:	4a0a      	ldr	r2, [pc, #40]	@ (8004278 <SysTick_Config+0x40>)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	3b01      	subs	r3, #1
 8004254:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004256:	210f      	movs	r1, #15
 8004258:	f04f 30ff 	mov.w	r0, #4294967295
 800425c:	f7ff ffc2 	bl	80041e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004260:	4b05      	ldr	r3, [pc, #20]	@ (8004278 <SysTick_Config+0x40>)
 8004262:	2200      	movs	r2, #0
 8004264:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004266:	4b04      	ldr	r3, [pc, #16]	@ (8004278 <SysTick_Config+0x40>)
 8004268:	2207      	movs	r2, #7
 800426a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3708      	adds	r7, #8
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	e000e010 	.word	0xe000e010

0800427c <MCU_Clock_Setup>:
{
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
}

__STATIC_INLINE void MCU_Clock_Setup(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
//	uint8_t pll_m = 4;
//	uint8_t pll_n = 168; //192
//	uint8_t pll_p = 0;
//	uint8_t pll_q = 7;

	SystemInit();
 8004282:	f000 faf7 	bl	8004874 <SystemInit>

	uint8_t pll_m = 8;
 8004286:	2308      	movs	r3, #8
 8004288:	71fb      	strb	r3, [r7, #7]
	uint16_t pll_n = 336; //192
 800428a:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800428e:	80bb      	strh	r3, [r7, #4]
	uint8_t pll_p = 0;
 8004290:	2300      	movs	r3, #0
 8004292:	70fb      	strb	r3, [r7, #3]
	uint8_t pll_q = 7;
 8004294:	2307      	movs	r3, #7
 8004296:	70bb      	strb	r3, [r7, #2]

	RCC->PLLCFGR = 0x00000000;
 8004298:	4b3c      	ldr	r3, [pc, #240]	@ (800438c <MCU_Clock_Setup+0x110>)
 800429a:	2200      	movs	r2, #0
 800429c:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 800429e:	4b3b      	ldr	r3, [pc, #236]	@ (800438c <MCU_Clock_Setup+0x110>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a3a      	ldr	r2, [pc, #232]	@ (800438c <MCU_Clock_Setup+0x110>)
 80042a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042a8:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 80042aa:	bf00      	nop
 80042ac:	4b37      	ldr	r3, [pc, #220]	@ (800438c <MCU_Clock_Setup+0x110>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d0f9      	beq.n	80042ac <MCU_Clock_Setup+0x30>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 80042b8:	4b34      	ldr	r3, [pc, #208]	@ (800438c <MCU_Clock_Setup+0x110>)
 80042ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042bc:	4a33      	ldr	r2, [pc, #204]	@ (800438c <MCU_Clock_Setup+0x110>)
 80042be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042c2:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 80042c4:	4b32      	ldr	r3, [pc, #200]	@ (8004390 <MCU_Clock_Setup+0x114>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a31      	ldr	r2, [pc, #196]	@ (8004390 <MCU_Clock_Setup+0x114>)
 80042ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80042ce:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 80042d0:	4b30      	ldr	r3, [pc, #192]	@ (8004394 <MCU_Clock_Setup+0x118>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a2f      	ldr	r2, [pc, #188]	@ (8004394 <MCU_Clock_Setup+0x118>)
 80042d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80042da:	f043 0305 	orr.w	r3, r3, #5
 80042de:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 80042e0:	4b2a      	ldr	r3, [pc, #168]	@ (800438c <MCU_Clock_Setup+0x110>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	78ba      	ldrb	r2, [r7, #2]
 80042e6:	0611      	lsls	r1, r2, #24
 80042e8:	78fa      	ldrb	r2, [r7, #3]
 80042ea:	0412      	lsls	r2, r2, #16
 80042ec:	4311      	orrs	r1, r2
 80042ee:	88ba      	ldrh	r2, [r7, #4]
 80042f0:	0192      	lsls	r2, r2, #6
 80042f2:	4311      	orrs	r1, r2
 80042f4:	79fa      	ldrb	r2, [r7, #7]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	4611      	mov	r1, r2
 80042fa:	4a24      	ldr	r2, [pc, #144]	@ (800438c <MCU_Clock_Setup+0x110>)
 80042fc:	430b      	orrs	r3, r1
 80042fe:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 8004300:	4b22      	ldr	r3, [pc, #136]	@ (800438c <MCU_Clock_Setup+0x110>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	4a21      	ldr	r2, [pc, #132]	@ (800438c <MCU_Clock_Setup+0x110>)
 8004306:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800430a:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 800430c:	4b1f      	ldr	r3, [pc, #124]	@ (800438c <MCU_Clock_Setup+0x110>)
 800430e:	4a1f      	ldr	r2, [pc, #124]	@ (800438c <MCU_Clock_Setup+0x110>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 8004314:	4b1d      	ldr	r3, [pc, #116]	@ (800438c <MCU_Clock_Setup+0x110>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	4a1c      	ldr	r2, [pc, #112]	@ (800438c <MCU_Clock_Setup+0x110>)
 800431a:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 800431e:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 8004320:	4b1a      	ldr	r3, [pc, #104]	@ (800438c <MCU_Clock_Setup+0x110>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	4a19      	ldr	r2, [pc, #100]	@ (800438c <MCU_Clock_Setup+0x110>)
 8004326:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800432a:	6093      	str	r3, [r2, #8]




	RCC -> CR |= RCC_CR_PLLON;
 800432c:	4b17      	ldr	r3, [pc, #92]	@ (800438c <MCU_Clock_Setup+0x110>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a16      	ldr	r2, [pc, #88]	@ (800438c <MCU_Clock_Setup+0x110>)
 8004332:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004336:	6013      	str	r3, [r2, #0]



	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 8004338:	bf00      	nop
 800433a:	4b14      	ldr	r3, [pc, #80]	@ (800438c <MCU_Clock_Setup+0x110>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d0f9      	beq.n	800433a <MCU_Clock_Setup+0xbe>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 8004346:	4b11      	ldr	r3, [pc, #68]	@ (800438c <MCU_Clock_Setup+0x110>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	4a10      	ldr	r2, [pc, #64]	@ (800438c <MCU_Clock_Setup+0x110>)
 800434c:	f043 0302 	orr.w	r3, r3, #2
 8004350:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 8004352:	bf00      	nop
 8004354:	4b0d      	ldr	r3, [pc, #52]	@ (800438c <MCU_Clock_Setup+0x110>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	2b08      	cmp	r3, #8
 800435e:	d1f9      	bne.n	8004354 <MCU_Clock_Setup+0xd8>
	SystemCoreClockUpdate();
 8004360:	f000 fa9a 	bl	8004898 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 8004364:	4b0c      	ldr	r3, [pc, #48]	@ (8004398 <MCU_Clock_Setup+0x11c>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	08db      	lsrs	r3, r3, #3
 800436a:	4a0c      	ldr	r2, [pc, #48]	@ (800439c <MCU_Clock_Setup+0x120>)
 800436c:	fba2 2303 	umull	r2, r3, r2, r3
 8004370:	085b      	lsrs	r3, r3, #1
 8004372:	4618      	mov	r0, r3
 8004374:	f7ff ff60 	bl	8004238 <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8004378:	4b04      	ldr	r3, [pc, #16]	@ (800438c <MCU_Clock_Setup+0x110>)
 800437a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800437c:	4a03      	ldr	r2, [pc, #12]	@ (800438c <MCU_Clock_Setup+0x110>)
 800437e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004382:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8004384:	bf00      	nop
 8004386:	3708      	adds	r7, #8
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	40023800 	.word	0x40023800
 8004390:	40007000 	.word	0x40007000
 8004394:	40023c00 	.word	0x40023c00
 8004398:	20000010 	.word	0x20000010
 800439c:	18618619 	.word	0x18618619

080043a0 <Delay_Config>:
}



__STATIC_INLINE uint32_t Delay_Config(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0

	SysTick->CTRL = 0;
 80043a4:	4b09      	ldr	r3, [pc, #36]	@ (80043cc <Delay_Config+0x2c>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 80043aa:	4b08      	ldr	r3, [pc, #32]	@ (80043cc <Delay_Config+0x2c>)
 80043ac:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 80043b0:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 80043b2:	4b06      	ldr	r3, [pc, #24]	@ (80043cc <Delay_Config+0x2c>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 80043b8:	4b04      	ldr	r3, [pc, #16]	@ (80043cc <Delay_Config+0x2c>)
 80043ba:	2205      	movs	r2, #5
 80043bc:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	e000e010 	.word	0xe000e010

080043d0 <Delay_ms>:
	while((SysTick->CTRL & 0x00010000) == 0);
	return (0UL);                                                     /* Function successful */
}

__STATIC_INLINE uint32_t Delay_ms(volatile float ms)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	ed87 0a01 	vstr	s0, [r7, #4]
	unsigned long x =0x29040 * (ms);
 80043da:	edd7 7a01 	vldr	s15, [r7, #4]
 80043de:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8004424 <Delay_ms+0x54>
 80043e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043ea:	ee17 3a90 	vmov	r3, s15
 80043ee:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD =  x ;
 80043f0:	4a0d      	ldr	r2, [pc, #52]	@ (8004428 <Delay_ms+0x58>)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 80043f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004428 <Delay_ms+0x58>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 1;
 80043fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004428 <Delay_ms+0x58>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a09      	ldr	r2, [pc, #36]	@ (8004428 <Delay_ms+0x58>)
 8004402:	f043 0301 	orr.w	r3, r3, #1
 8004406:	6013      	str	r3, [r2, #0]
	while((SysTick->CTRL & 0x00010000) == 0);
 8004408:	bf00      	nop
 800440a:	4b07      	ldr	r3, [pc, #28]	@ (8004428 <Delay_ms+0x58>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0f9      	beq.n	800440a <Delay_ms+0x3a>
	return (0UL);                                                     /* Function successful */
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr
 8004424:	48241000 	.word	0x48241000
 8004428:	e000e010 	.word	0xe000e010

0800442c <Delay_milli>:


__STATIC_INLINE uint32_t Delay_milli(float ms)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	ed87 0a01 	vstr	s0, [r7, #4]
	for (; ms>0; ms--)
 8004436:	e00b      	b.n	8004450 <Delay_milli+0x24>
	{
		Delay_ms(1);
 8004438:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800443c:	f7ff ffc8 	bl	80043d0 <Delay_ms>
	for (; ms>0; ms--)
 8004440:	edd7 7a01 	vldr	s15, [r7, #4]
 8004444:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004448:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800444c:	edc7 7a01 	vstr	s15, [r7, #4]
 8004450:	edd7 7a01 	vldr	s15, [r7, #4]
 8004454:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800445c:	dcec      	bgt.n	8004438 <Delay_milli+0xc>
	}
	return ms;
 800445e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004462:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004466:	ee17 3a90 	vmov	r3, s15
}
 800446a:	4618      	mov	r0, r3
 800446c:	3708      	adds	r7, #8
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <GPIO_Pin_Low>:
 * @brief  Sets a specific pin low.
 * @param  Port: Pointer to GPIO port base address.
 * @param  pin: Pin number to set low (0-15).
 */
__STATIC_INLINE  void GPIO_Pin_Low(GPIO_TypeDef *Port, int pin)
{
 8004472:	b480      	push	{r7}
 8004474:	b083      	sub	sp, #12
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
 800447a:	6039      	str	r1, [r7, #0]
	Port -> ODR &= ~(1 << pin);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	2101      	movs	r1, #1
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	fa01 f202 	lsl.w	r2, r1, r2
 8004488:	43d2      	mvns	r2, r2
 800448a:	401a      	ands	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	615a      	str	r2, [r3, #20]
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <GPIO_Pin_High>:
 * @brief  Sets a specific pin high.
 * @param  Port: Pointer to GPIO port base address.
 * @param  pin: Pin number to set high (0-15).
 */
__STATIC_INLINE  void GPIO_Pin_High(GPIO_TypeDef *Port, int pin)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
	Port -> ODR |= 1 << pin;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	2101      	movs	r1, #1
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	fa01 f202 	lsl.w	r2, r1, r2
 80044b2:	431a      	orrs	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	615a      	str	r2, [r3, #20]
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <Timer_Trigger>:
void Timer_Init(Timer_Config *config);
//void Timer_Trigger(Timer_Config *config);
//void Timer_Disable(Timer_Config *config);

__STATIC_INLINE void Timer_Trigger(Timer_Config *config)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
	config -> Port -> CR1 |= TIM_CR1_CEN;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f042 0201 	orr.w	r2, r2, #1
 80044da:	601a      	str	r2, [r3, #0]
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <Select_DIG1>:
		/*9*/ 0b01101111
};


void Select_DIG1(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
	GPIO_Pin_Low(DIG_Port, DIG1);
 80044ec:	4b04      	ldr	r3, [pc, #16]	@ (8004500 <Select_DIG1+0x18>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a04      	ldr	r2, [pc, #16]	@ (8004504 <Select_DIG1+0x1c>)
 80044f2:	7812      	ldrb	r2, [r2, #0]
 80044f4:	4611      	mov	r1, r2
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7ff ffbb 	bl	8004472 <GPIO_Pin_Low>
}
 80044fc:	bf00      	nop
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	20000000 	.word	0x20000000
 8004504:	2000000e 	.word	0x2000000e

08004508 <Select_DIG2>:

void Select_DIG2(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
	GPIO_Pin_Low(DIG_Port, DIG2);
 800450c:	4b04      	ldr	r3, [pc, #16]	@ (8004520 <Select_DIG2+0x18>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a04      	ldr	r2, [pc, #16]	@ (8004524 <Select_DIG2+0x1c>)
 8004512:	7812      	ldrb	r2, [r2, #0]
 8004514:	4611      	mov	r1, r2
 8004516:	4618      	mov	r0, r3
 8004518:	f7ff ffab 	bl	8004472 <GPIO_Pin_Low>
}
 800451c:	bf00      	nop
 800451e:	bd80      	pop	{r7, pc}
 8004520:	20000000 	.word	0x20000000
 8004524:	2000000f 	.word	0x2000000f

08004528 <Diselect_DIG1>:

void Diselect_DIG1(void)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
	GPIO_Pin_High(DIG_Port, DIG1);
 800452c:	4b04      	ldr	r3, [pc, #16]	@ (8004540 <Diselect_DIG1+0x18>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a04      	ldr	r2, [pc, #16]	@ (8004544 <Diselect_DIG1+0x1c>)
 8004532:	7812      	ldrb	r2, [r2, #0]
 8004534:	4611      	mov	r1, r2
 8004536:	4618      	mov	r0, r3
 8004538:	f7ff ffb0 	bl	800449c <GPIO_Pin_High>
}
 800453c:	bf00      	nop
 800453e:	bd80      	pop	{r7, pc}
 8004540:	20000000 	.word	0x20000000
 8004544:	2000000e 	.word	0x2000000e

08004548 <Diselect_DIG2>:

void Diselect_DIG2(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
	GPIO_Pin_High(DIG_Port, DIG2);
 800454c:	4b04      	ldr	r3, [pc, #16]	@ (8004560 <Diselect_DIG2+0x18>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a04      	ldr	r2, [pc, #16]	@ (8004564 <Diselect_DIG2+0x1c>)
 8004552:	7812      	ldrb	r2, [r2, #0]
 8004554:	4611      	mov	r1, r2
 8004556:	4618      	mov	r0, r3
 8004558:	f7ff ffa0 	bl	800449c <GPIO_Pin_High>
}
 800455c:	bf00      	nop
 800455e:	bd80      	pop	{r7, pc}
 8004560:	20000000 	.word	0x20000000
 8004564:	2000000f 	.word	0x2000000f

08004568 <Seg7_Update>:
}
volatile   uint8_t mux_idx  = 0;


void Seg7_Update()
{
 8004568:	b580      	push	{r7, lr}
 800456a:	af00      	add	r7, sp, #0
//		SEG_PORT->ODR =  seg_lut[digits[1]];
//	}
//
//	mux_idx ^= 1;

	if(mux_idx == 0)
 800456c:	4b2c      	ldr	r3, [pc, #176]	@ (8004620 <Seg7_Update+0xb8>)
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d110      	bne.n	8004598 <Seg7_Update+0x30>
	{
		Diselect_DIG1();
 8004576:	f7ff ffd7 	bl	8004528 <Diselect_DIG1>
		Select_DIG2();
 800457a:	f7ff ffc5 	bl	8004508 <Select_DIG2>
		SEG_PORT->ODR =  seg_lut[digits[0]];
 800457e:	4b29      	ldr	r3, [pc, #164]	@ (8004624 <Seg7_Update+0xbc>)
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	b2db      	uxtb	r3, r3
 8004584:	461a      	mov	r2, r3
 8004586:	4b28      	ldr	r3, [pc, #160]	@ (8004628 <Seg7_Update+0xc0>)
 8004588:	5c9a      	ldrb	r2, [r3, r2]
 800458a:	4b28      	ldr	r3, [pc, #160]	@ (800462c <Seg7_Update+0xc4>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	615a      	str	r2, [r3, #20]
		mux_idx = 1;
 8004590:	4b23      	ldr	r3, [pc, #140]	@ (8004620 <Seg7_Update+0xb8>)
 8004592:	2201      	movs	r2, #1
 8004594:	701a      	strb	r2, [r3, #0]
		mux_idx = 0;
	}

//	mux_idx ^= 1;

}
 8004596:	e040      	b.n	800461a <Seg7_Update+0xb2>
	else if(mux_idx == 1)
 8004598:	4b21      	ldr	r3, [pc, #132]	@ (8004620 <Seg7_Update+0xb8>)
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d110      	bne.n	80045c4 <Seg7_Update+0x5c>
		Diselect_DIG2();
 80045a2:	f7ff ffd1 	bl	8004548 <Diselect_DIG2>
		Select_DIG1();
 80045a6:	f7ff ff9f 	bl	80044e8 <Select_DIG1>
		SEG_PORT->ODR =  seg_lut[digits[1]];
 80045aa:	4b1e      	ldr	r3, [pc, #120]	@ (8004624 <Seg7_Update+0xbc>)
 80045ac:	785b      	ldrb	r3, [r3, #1]
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	461a      	mov	r2, r3
 80045b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004628 <Seg7_Update+0xc0>)
 80045b4:	5c9a      	ldrb	r2, [r3, r2]
 80045b6:	4b1d      	ldr	r3, [pc, #116]	@ (800462c <Seg7_Update+0xc4>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	615a      	str	r2, [r3, #20]
		mux_idx = 2;
 80045bc:	4b18      	ldr	r3, [pc, #96]	@ (8004620 <Seg7_Update+0xb8>)
 80045be:	2202      	movs	r2, #2
 80045c0:	701a      	strb	r2, [r3, #0]
}
 80045c2:	e02a      	b.n	800461a <Seg7_Update+0xb2>
	else if(mux_idx == 2)
 80045c4:	4b16      	ldr	r3, [pc, #88]	@ (8004620 <Seg7_Update+0xb8>)
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d110      	bne.n	80045f0 <Seg7_Update+0x88>
		Diselect_DIG2();
 80045ce:	f7ff ffbb 	bl	8004548 <Diselect_DIG2>
		Select_DIG1();
 80045d2:	f7ff ff89 	bl	80044e8 <Select_DIG1>
		SEG_PORT->ODR =  seg_lut[digits[1]];
 80045d6:	4b13      	ldr	r3, [pc, #76]	@ (8004624 <Seg7_Update+0xbc>)
 80045d8:	785b      	ldrb	r3, [r3, #1]
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	461a      	mov	r2, r3
 80045de:	4b12      	ldr	r3, [pc, #72]	@ (8004628 <Seg7_Update+0xc0>)
 80045e0:	5c9a      	ldrb	r2, [r3, r2]
 80045e2:	4b12      	ldr	r3, [pc, #72]	@ (800462c <Seg7_Update+0xc4>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	615a      	str	r2, [r3, #20]
		mux_idx = 3;
 80045e8:	4b0d      	ldr	r3, [pc, #52]	@ (8004620 <Seg7_Update+0xb8>)
 80045ea:	2203      	movs	r2, #3
 80045ec:	701a      	strb	r2, [r3, #0]
}
 80045ee:	e014      	b.n	800461a <Seg7_Update+0xb2>
	else if(mux_idx == 3)
 80045f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004620 <Seg7_Update+0xb8>)
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b03      	cmp	r3, #3
 80045f8:	d10f      	bne.n	800461a <Seg7_Update+0xb2>
		Diselect_DIG2();
 80045fa:	f7ff ffa5 	bl	8004548 <Diselect_DIG2>
		Select_DIG1();
 80045fe:	f7ff ff73 	bl	80044e8 <Select_DIG1>
		SEG_PORT->ODR =  seg_lut[digits[1]];
 8004602:	4b08      	ldr	r3, [pc, #32]	@ (8004624 <Seg7_Update+0xbc>)
 8004604:	785b      	ldrb	r3, [r3, #1]
 8004606:	b2db      	uxtb	r3, r3
 8004608:	461a      	mov	r2, r3
 800460a:	4b07      	ldr	r3, [pc, #28]	@ (8004628 <Seg7_Update+0xc0>)
 800460c:	5c9a      	ldrb	r2, [r3, r2]
 800460e:	4b07      	ldr	r3, [pc, #28]	@ (800462c <Seg7_Update+0xc4>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	615a      	str	r2, [r3, #20]
		mux_idx = 0;
 8004614:	4b02      	ldr	r3, [pc, #8]	@ (8004620 <Seg7_Update+0xb8>)
 8004616:	2200      	movs	r2, #0
 8004618:	701a      	strb	r2, [r3, #0]
}
 800461a:	bf00      	nop
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	200001a1 	.word	0x200001a1
 8004624:	200000f0 	.word	0x200000f0
 8004628:	08004a4c 	.word	0x08004a4c
 800462c:	20000004 	.word	0x20000004

08004630 <Seg7_Init>:


void Seg7_Init(TIM_TypeDef *update_Timer, GPIO_TypeDef *segIOPort, GPIO_TypeDef *digPort)
{
 8004630:	b5b0      	push	{r4, r5, r7, lr}
 8004632:	b088      	sub	sp, #32
 8004634:	af04      	add	r7, sp, #16
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
	GPIO_Pin_Init(segIOPort, A, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.Pull_Up, GPIO_Configuration.Alternate_Functions.None);
 800463c:	4b5b      	ldr	r3, [pc, #364]	@ (80047ac <Seg7_Init+0x17c>)
 800463e:	7819      	ldrb	r1, [r3, #0]
 8004640:	2401      	movs	r4, #1
 8004642:	2500      	movs	r5, #0
 8004644:	2303      	movs	r3, #3
 8004646:	2201      	movs	r2, #1
 8004648:	2000      	movs	r0, #0
 800464a:	9002      	str	r0, [sp, #8]
 800464c:	9201      	str	r2, [sp, #4]
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	462b      	mov	r3, r5
 8004652:	4622      	mov	r2, r4
 8004654:	68b8      	ldr	r0, [r7, #8]
 8004656:	f7fd fc1f 	bl	8001e98 <GPIO_Pin_Init>
	GPIO_Pin_Init(segIOPort, B, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.Pull_Up, GPIO_Configuration.Alternate_Functions.None);
 800465a:	4b55      	ldr	r3, [pc, #340]	@ (80047b0 <Seg7_Init+0x180>)
 800465c:	7819      	ldrb	r1, [r3, #0]
 800465e:	2401      	movs	r4, #1
 8004660:	2500      	movs	r5, #0
 8004662:	2303      	movs	r3, #3
 8004664:	2201      	movs	r2, #1
 8004666:	2000      	movs	r0, #0
 8004668:	9002      	str	r0, [sp, #8]
 800466a:	9201      	str	r2, [sp, #4]
 800466c:	9300      	str	r3, [sp, #0]
 800466e:	462b      	mov	r3, r5
 8004670:	4622      	mov	r2, r4
 8004672:	68b8      	ldr	r0, [r7, #8]
 8004674:	f7fd fc10 	bl	8001e98 <GPIO_Pin_Init>
	GPIO_Pin_Init(segIOPort, C, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.Pull_Up, GPIO_Configuration.Alternate_Functions.None);
 8004678:	4b4e      	ldr	r3, [pc, #312]	@ (80047b4 <Seg7_Init+0x184>)
 800467a:	7819      	ldrb	r1, [r3, #0]
 800467c:	2401      	movs	r4, #1
 800467e:	2500      	movs	r5, #0
 8004680:	2303      	movs	r3, #3
 8004682:	2201      	movs	r2, #1
 8004684:	2000      	movs	r0, #0
 8004686:	9002      	str	r0, [sp, #8]
 8004688:	9201      	str	r2, [sp, #4]
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	462b      	mov	r3, r5
 800468e:	4622      	mov	r2, r4
 8004690:	68b8      	ldr	r0, [r7, #8]
 8004692:	f7fd fc01 	bl	8001e98 <GPIO_Pin_Init>
	GPIO_Pin_Init(segIOPort, D, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.Pull_Up, GPIO_Configuration.Alternate_Functions.None);
 8004696:	4b48      	ldr	r3, [pc, #288]	@ (80047b8 <Seg7_Init+0x188>)
 8004698:	7819      	ldrb	r1, [r3, #0]
 800469a:	2401      	movs	r4, #1
 800469c:	2500      	movs	r5, #0
 800469e:	2303      	movs	r3, #3
 80046a0:	2201      	movs	r2, #1
 80046a2:	2000      	movs	r0, #0
 80046a4:	9002      	str	r0, [sp, #8]
 80046a6:	9201      	str	r2, [sp, #4]
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	462b      	mov	r3, r5
 80046ac:	4622      	mov	r2, r4
 80046ae:	68b8      	ldr	r0, [r7, #8]
 80046b0:	f7fd fbf2 	bl	8001e98 <GPIO_Pin_Init>
	GPIO_Pin_Init(segIOPort, E, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.Pull_Up, GPIO_Configuration.Alternate_Functions.None);
 80046b4:	4b41      	ldr	r3, [pc, #260]	@ (80047bc <Seg7_Init+0x18c>)
 80046b6:	7819      	ldrb	r1, [r3, #0]
 80046b8:	2401      	movs	r4, #1
 80046ba:	2500      	movs	r5, #0
 80046bc:	2303      	movs	r3, #3
 80046be:	2201      	movs	r2, #1
 80046c0:	2000      	movs	r0, #0
 80046c2:	9002      	str	r0, [sp, #8]
 80046c4:	9201      	str	r2, [sp, #4]
 80046c6:	9300      	str	r3, [sp, #0]
 80046c8:	462b      	mov	r3, r5
 80046ca:	4622      	mov	r2, r4
 80046cc:	68b8      	ldr	r0, [r7, #8]
 80046ce:	f7fd fbe3 	bl	8001e98 <GPIO_Pin_Init>
	GPIO_Pin_Init(segIOPort, F, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.Pull_Up, GPIO_Configuration.Alternate_Functions.None);
 80046d2:	4b3b      	ldr	r3, [pc, #236]	@ (80047c0 <Seg7_Init+0x190>)
 80046d4:	7819      	ldrb	r1, [r3, #0]
 80046d6:	2401      	movs	r4, #1
 80046d8:	2500      	movs	r5, #0
 80046da:	2303      	movs	r3, #3
 80046dc:	2201      	movs	r2, #1
 80046de:	2000      	movs	r0, #0
 80046e0:	9002      	str	r0, [sp, #8]
 80046e2:	9201      	str	r2, [sp, #4]
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	462b      	mov	r3, r5
 80046e8:	4622      	mov	r2, r4
 80046ea:	68b8      	ldr	r0, [r7, #8]
 80046ec:	f7fd fbd4 	bl	8001e98 <GPIO_Pin_Init>
	GPIO_Pin_Init(segIOPort, G, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.Pull_Up, GPIO_Configuration.Alternate_Functions.None);
 80046f0:	4b34      	ldr	r3, [pc, #208]	@ (80047c4 <Seg7_Init+0x194>)
 80046f2:	7819      	ldrb	r1, [r3, #0]
 80046f4:	2401      	movs	r4, #1
 80046f6:	2500      	movs	r5, #0
 80046f8:	2303      	movs	r3, #3
 80046fa:	2201      	movs	r2, #1
 80046fc:	2000      	movs	r0, #0
 80046fe:	9002      	str	r0, [sp, #8]
 8004700:	9201      	str	r2, [sp, #4]
 8004702:	9300      	str	r3, [sp, #0]
 8004704:	462b      	mov	r3, r5
 8004706:	4622      	mov	r2, r4
 8004708:	68b8      	ldr	r0, [r7, #8]
 800470a:	f7fd fbc5 	bl	8001e98 <GPIO_Pin_Init>
	GPIO_Pin_Init(digPort, DIG1, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Open_Drain, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.None);
 800470e:	4b2e      	ldr	r3, [pc, #184]	@ (80047c8 <Seg7_Init+0x198>)
 8004710:	7819      	ldrb	r1, [r3, #0]
 8004712:	2401      	movs	r4, #1
 8004714:	2501      	movs	r5, #1
 8004716:	2303      	movs	r3, #3
 8004718:	2204      	movs	r2, #4
 800471a:	2000      	movs	r0, #0
 800471c:	9002      	str	r0, [sp, #8]
 800471e:	9201      	str	r2, [sp, #4]
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	462b      	mov	r3, r5
 8004724:	4622      	mov	r2, r4
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7fd fbb6 	bl	8001e98 <GPIO_Pin_Init>
	GPIO_Pin_Init(digPort, DIG2, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Open_Drain, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.None);
 800472c:	4b27      	ldr	r3, [pc, #156]	@ (80047cc <Seg7_Init+0x19c>)
 800472e:	7819      	ldrb	r1, [r3, #0]
 8004730:	2401      	movs	r4, #1
 8004732:	2501      	movs	r5, #1
 8004734:	2303      	movs	r3, #3
 8004736:	2204      	movs	r2, #4
 8004738:	2000      	movs	r0, #0
 800473a:	9002      	str	r0, [sp, #8]
 800473c:	9201      	str	r2, [sp, #4]
 800473e:	9300      	str	r3, [sp, #0]
 8004740:	462b      	mov	r3, r5
 8004742:	4622      	mov	r2, r4
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f7fd fba7 	bl	8001e98 <GPIO_Pin_Init>

//	GPIO_Pin_Init(digPort, DIG1, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.Pull_Up, GPIO_Configuration.Alternate_Functions.None);
//	GPIO_Pin_Init(digPort, DIG2, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.Pull_Up, GPIO_Configuration.Alternate_Functions.None);


	Seg7_Timer.Port = update_Timer;
 800474a:	4a21      	ldr	r2, [pc, #132]	@ (80047d0 <Seg7_Init+0x1a0>)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6013      	str	r3, [r2, #0]
	Seg7_Timer.Mode = Timer_Configurations.Mode.Update;
 8004750:	2220      	movs	r2, #32
 8004752:	4b1f      	ldr	r3, [pc, #124]	@ (80047d0 <Seg7_Init+0x1a0>)
 8004754:	711a      	strb	r2, [r3, #4]
	Seg7_Timer.Clock_Source = Timer_Configurations.Clock_Source.Internal;
 8004756:	2200      	movs	r2, #0
 8004758:	4b1d      	ldr	r3, [pc, #116]	@ (80047d0 <Seg7_Init+0x1a0>)
 800475a:	715a      	strb	r2, [r3, #5]
	Seg7_Timer.DMA_Enable = false;
 800475c:	4b1c      	ldr	r3, [pc, #112]	@ (80047d0 <Seg7_Init+0x1a0>)
 800475e:	2200      	movs	r2, #0
 8004760:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	Seg7_Timer.Direction = Timer_Configurations.Direction.Upcounting;
 8004764:	2300      	movs	r3, #0
 8004766:	2b00      	cmp	r3, #0
 8004768:	bf14      	ite	ne
 800476a:	2301      	movne	r3, #1
 800476c:	2300      	moveq	r3, #0
 800476e:	b2da      	uxtb	r2, r3
 8004770:	4b17      	ldr	r3, [pc, #92]	@ (80047d0 <Seg7_Init+0x1a0>)
 8004772:	719a      	strb	r2, [r3, #6]
	Seg7_Timer.Interrupt_Request = Timer_Configurations.Interrupt_Request.Update_Interrupt;
 8004774:	2301      	movs	r3, #1
 8004776:	b2da      	uxtb	r2, r3
 8004778:	4b15      	ldr	r3, [pc, #84]	@ (80047d0 <Seg7_Init+0x1a0>)
 800477a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	Seg7_Timer.ISR_Routines.Update_ISR = Seg7_Update;
 800477e:	4b14      	ldr	r3, [pc, #80]	@ (80047d0 <Seg7_Init+0x1a0>)
 8004780:	4a14      	ldr	r2, [pc, #80]	@ (80047d4 <Seg7_Init+0x1a4>)
 8004782:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	Seg7_Timer.Prescaler = (uint16_t)(8400)-1;
 8004786:	4b12      	ldr	r3, [pc, #72]	@ (80047d0 <Seg7_Init+0x1a0>)
 8004788:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800478c:	819a      	strh	r2, [r3, #12]
	Seg7_Timer.Autoreload_Value = 10000-1;
 800478e:	4b10      	ldr	r3, [pc, #64]	@ (80047d0 <Seg7_Init+0x1a0>)
 8004790:	f242 720f 	movw	r2, #9999	@ 0x270f
 8004794:	81da      	strh	r2, [r3, #14]
	Timer_Init(&Seg7_Timer);
 8004796:	480e      	ldr	r0, [pc, #56]	@ (80047d0 <Seg7_Init+0x1a0>)
 8004798:	f7ff fc20 	bl	8003fdc <Timer_Init>
	Timer_Trigger(&Seg7_Timer);
 800479c:	480c      	ldr	r0, [pc, #48]	@ (80047d0 <Seg7_Init+0x1a0>)
 800479e:	f7ff fe91 	bl	80044c4 <Timer_Trigger>
}
 80047a2:	bf00      	nop
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bdb0      	pop	{r4, r5, r7, pc}
 80047aa:	bf00      	nop
 80047ac:	200001a0 	.word	0x200001a0
 80047b0:	20000008 	.word	0x20000008
 80047b4:	20000009 	.word	0x20000009
 80047b8:	2000000a 	.word	0x2000000a
 80047bc:	2000000b 	.word	0x2000000b
 80047c0:	2000000c 	.word	0x2000000c
 80047c4:	2000000d 	.word	0x2000000d
 80047c8:	2000000e 	.word	0x2000000e
 80047cc:	2000000f 	.word	0x2000000f
 80047d0:	200000f4 	.word	0x200000f4
 80047d4:	08004569 	.word	0x08004569

080047d8 <display_number>:

void display_number(uint8_t value)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	4603      	mov	r3, r0
 80047e0:	71fb      	strb	r3, [r7, #7]
	digits[0] = value / 10;       /* tens  */
 80047e2:	79fb      	ldrb	r3, [r7, #7]
 80047e4:	4a0c      	ldr	r2, [pc, #48]	@ (8004818 <display_number+0x40>)
 80047e6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ea:	08db      	lsrs	r3, r3, #3
 80047ec:	b2da      	uxtb	r2, r3
 80047ee:	4b0b      	ldr	r3, [pc, #44]	@ (800481c <display_number+0x44>)
 80047f0:	701a      	strb	r2, [r3, #0]
	digits[1] = value % 10;       /* ones  */
 80047f2:	79fa      	ldrb	r2, [r7, #7]
 80047f4:	4b08      	ldr	r3, [pc, #32]	@ (8004818 <display_number+0x40>)
 80047f6:	fba3 1302 	umull	r1, r3, r3, r2
 80047fa:	08d9      	lsrs	r1, r3, #3
 80047fc:	460b      	mov	r3, r1
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	440b      	add	r3, r1
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	b2da      	uxtb	r2, r3
 8004808:	4b04      	ldr	r3, [pc, #16]	@ (800481c <display_number+0x44>)
 800480a:	705a      	strb	r2, [r3, #1]
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr
 8004818:	cccccccd 	.word	0xcccccccd
 800481c:	200000f0 	.word	0x200000f0

08004820 <main>:

int main(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
	MCU_Clock_Setup();
 8004826:	f7ff fd29 	bl	800427c <MCU_Clock_Setup>
	Delay_Config();
 800482a:	f7ff fdb9 	bl	80043a0 <Delay_Config>
	Seg7_Init(TIM6, SEG_PORT, DIG_Port);
 800482e:	4b0d      	ldr	r3, [pc, #52]	@ (8004864 <main+0x44>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a0d      	ldr	r2, [pc, #52]	@ (8004868 <main+0x48>)
 8004834:	6812      	ldr	r2, [r2, #0]
 8004836:	4619      	mov	r1, r3
 8004838:	480c      	ldr	r0, [pc, #48]	@ (800486c <main+0x4c>)
 800483a:	f7ff fef9 	bl	8004630 <Seg7_Init>

	for(;;)
	{


		for(int n = 0; n < 100; n++)
 800483e:	2300      	movs	r3, #0
 8004840:	607b      	str	r3, [r7, #4]
 8004842:	e00b      	b.n	800485c <main+0x3c>
		{

			display_number(n);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	b2db      	uxtb	r3, r3
 8004848:	4618      	mov	r0, r3
 800484a:	f7ff ffc5 	bl	80047d8 <display_number>

			Delay_milli(1000);
 800484e:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8004870 <main+0x50>
 8004852:	f7ff fdeb 	bl	800442c <Delay_milli>
		for(int n = 0; n < 100; n++)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	3301      	adds	r3, #1
 800485a:	607b      	str	r3, [r7, #4]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b63      	cmp	r3, #99	@ 0x63
 8004860:	ddf0      	ble.n	8004844 <main+0x24>
 8004862:	e7ec      	b.n	800483e <main+0x1e>
 8004864:	20000004 	.word	0x20000004
 8004868:	20000000 	.word	0x20000000
 800486c:	40001000 	.word	0x40001000
 8004870:	447a0000 	.word	0x447a0000

08004874 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004874:	b480      	push	{r7}
 8004876:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004878:	4b06      	ldr	r3, [pc, #24]	@ (8004894 <SystemInit+0x20>)
 800487a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800487e:	4a05      	ldr	r2, [pc, #20]	@ (8004894 <SystemInit+0x20>)
 8004880:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004884:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004888:	bf00      	nop
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	e000ed00 	.word	0xe000ed00

08004898 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8004898:	b480      	push	{r7}
 800489a:	b087      	sub	sp, #28
 800489c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800489e:	2300      	movs	r3, #0
 80048a0:	613b      	str	r3, [r7, #16]
 80048a2:	2300      	movs	r3, #0
 80048a4:	617b      	str	r3, [r7, #20]
 80048a6:	2302      	movs	r3, #2
 80048a8:	60fb      	str	r3, [r7, #12]
 80048aa:	2300      	movs	r3, #0
 80048ac:	60bb      	str	r3, [r7, #8]
 80048ae:	2302      	movs	r3, #2
 80048b0:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80048b2:	4b34      	ldr	r3, [pc, #208]	@ (8004984 <SystemCoreClockUpdate+0xec>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 030c 	and.w	r3, r3, #12
 80048ba:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	2b08      	cmp	r3, #8
 80048c0:	d011      	beq.n	80048e6 <SystemCoreClockUpdate+0x4e>
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	2b08      	cmp	r3, #8
 80048c6:	d844      	bhi.n	8004952 <SystemCoreClockUpdate+0xba>
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d003      	beq.n	80048d6 <SystemCoreClockUpdate+0x3e>
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	2b04      	cmp	r3, #4
 80048d2:	d004      	beq.n	80048de <SystemCoreClockUpdate+0x46>
 80048d4:	e03d      	b.n	8004952 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80048d6:	4b2c      	ldr	r3, [pc, #176]	@ (8004988 <SystemCoreClockUpdate+0xf0>)
 80048d8:	4a2c      	ldr	r2, [pc, #176]	@ (800498c <SystemCoreClockUpdate+0xf4>)
 80048da:	601a      	str	r2, [r3, #0]
      break;
 80048dc:	e03d      	b.n	800495a <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80048de:	4b2a      	ldr	r3, [pc, #168]	@ (8004988 <SystemCoreClockUpdate+0xf0>)
 80048e0:	4a2b      	ldr	r2, [pc, #172]	@ (8004990 <SystemCoreClockUpdate+0xf8>)
 80048e2:	601a      	str	r2, [r3, #0]
      break;
 80048e4:	e039      	b.n	800495a <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80048e6:	4b27      	ldr	r3, [pc, #156]	@ (8004984 <SystemCoreClockUpdate+0xec>)
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	0d9b      	lsrs	r3, r3, #22
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048f2:	4b24      	ldr	r3, [pc, #144]	@ (8004984 <SystemCoreClockUpdate+0xec>)
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048fa:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00c      	beq.n	800491c <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004902:	4a23      	ldr	r2, [pc, #140]	@ (8004990 <SystemCoreClockUpdate+0xf8>)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	fbb2 f3f3 	udiv	r3, r2, r3
 800490a:	4a1e      	ldr	r2, [pc, #120]	@ (8004984 <SystemCoreClockUpdate+0xec>)
 800490c:	6852      	ldr	r2, [r2, #4]
 800490e:	0992      	lsrs	r2, r2, #6
 8004910:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004914:	fb02 f303 	mul.w	r3, r2, r3
 8004918:	617b      	str	r3, [r7, #20]
 800491a:	e00b      	b.n	8004934 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800491c:	4a1b      	ldr	r2, [pc, #108]	@ (800498c <SystemCoreClockUpdate+0xf4>)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	fbb2 f3f3 	udiv	r3, r2, r3
 8004924:	4a17      	ldr	r2, [pc, #92]	@ (8004984 <SystemCoreClockUpdate+0xec>)
 8004926:	6852      	ldr	r2, [r2, #4]
 8004928:	0992      	lsrs	r2, r2, #6
 800492a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800492e:	fb02 f303 	mul.w	r3, r2, r3
 8004932:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8004934:	4b13      	ldr	r3, [pc, #76]	@ (8004984 <SystemCoreClockUpdate+0xec>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	0c1b      	lsrs	r3, r3, #16
 800493a:	f003 0303 	and.w	r3, r3, #3
 800493e:	3301      	adds	r3, #1
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	fbb2 f3f3 	udiv	r3, r2, r3
 800494c:	4a0e      	ldr	r2, [pc, #56]	@ (8004988 <SystemCoreClockUpdate+0xf0>)
 800494e:	6013      	str	r3, [r2, #0]
      break;
 8004950:	e003      	b.n	800495a <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8004952:	4b0d      	ldr	r3, [pc, #52]	@ (8004988 <SystemCoreClockUpdate+0xf0>)
 8004954:	4a0d      	ldr	r2, [pc, #52]	@ (800498c <SystemCoreClockUpdate+0xf4>)
 8004956:	601a      	str	r2, [r3, #0]
      break;
 8004958:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800495a:	4b0a      	ldr	r3, [pc, #40]	@ (8004984 <SystemCoreClockUpdate+0xec>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	091b      	lsrs	r3, r3, #4
 8004960:	f003 030f 	and.w	r3, r3, #15
 8004964:	4a0b      	ldr	r2, [pc, #44]	@ (8004994 <SystemCoreClockUpdate+0xfc>)
 8004966:	5cd3      	ldrb	r3, [r2, r3]
 8004968:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800496a:	4b07      	ldr	r3, [pc, #28]	@ (8004988 <SystemCoreClockUpdate+0xf0>)
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	fa22 f303 	lsr.w	r3, r2, r3
 8004974:	4a04      	ldr	r2, [pc, #16]	@ (8004988 <SystemCoreClockUpdate+0xf0>)
 8004976:	6013      	str	r3, [r2, #0]
}
 8004978:	bf00      	nop
 800497a:	371c      	adds	r7, #28
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	40023800 	.word	0x40023800
 8004988:	20000010 	.word	0x20000010
 800498c:	00f42400 	.word	0x00f42400
 8004990:	017d7840 	.word	0x017d7840
 8004994:	08004a58 	.word	0x08004a58

08004998 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004998:	480d      	ldr	r0, [pc, #52]	@ (80049d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800499a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800499c:	f7ff ff6a 	bl	8004874 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80049a0:	480c      	ldr	r0, [pc, #48]	@ (80049d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80049a2:	490d      	ldr	r1, [pc, #52]	@ (80049d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80049a4:	4a0d      	ldr	r2, [pc, #52]	@ (80049dc <LoopForever+0xe>)
  movs r3, #0
 80049a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80049a8:	e002      	b.n	80049b0 <LoopCopyDataInit>

080049aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80049ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80049ae:	3304      	adds	r3, #4

080049b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80049b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80049b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049b4:	d3f9      	bcc.n	80049aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049b6:	4a0a      	ldr	r2, [pc, #40]	@ (80049e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80049b8:	4c0a      	ldr	r4, [pc, #40]	@ (80049e4 <LoopForever+0x16>)
  movs r3, #0
 80049ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049bc:	e001      	b.n	80049c2 <LoopFillZerobss>

080049be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80049c0:	3204      	adds	r2, #4

080049c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80049c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80049c4:	d3fb      	bcc.n	80049be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80049c6:	f000 f811 	bl	80049ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80049ca:	f7ff ff29 	bl	8004820 <main>

080049ce <LoopForever>:

LoopForever:
  b LoopForever
 80049ce:	e7fe      	b.n	80049ce <LoopForever>
  ldr   r0, =_estack
 80049d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80049d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80049d8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80049dc:	08004a70 	.word	0x08004a70
  ldr r2, =_sbss
 80049e0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80049e4:	200001a4 	.word	0x200001a4

080049e8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80049e8:	e7fe      	b.n	80049e8 <ADC_IRQHandler>
	...

080049ec <__libc_init_array>:
 80049ec:	b570      	push	{r4, r5, r6, lr}
 80049ee:	4d0d      	ldr	r5, [pc, #52]	@ (8004a24 <__libc_init_array+0x38>)
 80049f0:	4c0d      	ldr	r4, [pc, #52]	@ (8004a28 <__libc_init_array+0x3c>)
 80049f2:	1b64      	subs	r4, r4, r5
 80049f4:	10a4      	asrs	r4, r4, #2
 80049f6:	2600      	movs	r6, #0
 80049f8:	42a6      	cmp	r6, r4
 80049fa:	d109      	bne.n	8004a10 <__libc_init_array+0x24>
 80049fc:	4d0b      	ldr	r5, [pc, #44]	@ (8004a2c <__libc_init_array+0x40>)
 80049fe:	4c0c      	ldr	r4, [pc, #48]	@ (8004a30 <__libc_init_array+0x44>)
 8004a00:	f000 f818 	bl	8004a34 <_init>
 8004a04:	1b64      	subs	r4, r4, r5
 8004a06:	10a4      	asrs	r4, r4, #2
 8004a08:	2600      	movs	r6, #0
 8004a0a:	42a6      	cmp	r6, r4
 8004a0c:	d105      	bne.n	8004a1a <__libc_init_array+0x2e>
 8004a0e:	bd70      	pop	{r4, r5, r6, pc}
 8004a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a14:	4798      	blx	r3
 8004a16:	3601      	adds	r6, #1
 8004a18:	e7ee      	b.n	80049f8 <__libc_init_array+0xc>
 8004a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a1e:	4798      	blx	r3
 8004a20:	3601      	adds	r6, #1
 8004a22:	e7f2      	b.n	8004a0a <__libc_init_array+0x1e>
 8004a24:	08004a68 	.word	0x08004a68
 8004a28:	08004a68 	.word	0x08004a68
 8004a2c:	08004a68 	.word	0x08004a68
 8004a30:	08004a6c 	.word	0x08004a6c

08004a34 <_init>:
 8004a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a36:	bf00      	nop
 8004a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a3a:	bc08      	pop	{r3}
 8004a3c:	469e      	mov	lr, r3
 8004a3e:	4770      	bx	lr

08004a40 <_fini>:
 8004a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a42:	bf00      	nop
 8004a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a46:	bc08      	pop	{r3}
 8004a48:	469e      	mov	lr, r3
 8004a4a:	4770      	bx	lr
